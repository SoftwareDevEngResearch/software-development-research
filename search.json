[
  {
    "objectID": "version-control-revealjs.html#where-is-version-control-needed",
    "href": "version-control-revealjs.html#where-is-version-control-needed",
    "title": "Introduction to version control with Git",
    "section": "Where is version control needed?",
    "text": "Where is version control needed?\n\nBacking up changing files\nStoring and accessing an annotated history of changes\nManaging the merging of changes between different change sets"
  },
  {
    "objectID": "version-control-revealjs.html#why-is-this-important",
    "href": "version-control-revealjs.html#why-is-this-important",
    "title": "Introduction to version control with Git",
    "section": "Why is this important?",
    "text": "Why is this important?\n\n\n\nImage credit: Jorge Cham, PhD Comics"
  },
  {
    "objectID": "version-control-revealjs.html#saving-copies",
    "href": "version-control-revealjs.html#saving-copies",
    "title": "Introduction to version control with Git",
    "section": "Saving copies",
    "text": "Saving copies\n\n important_code.py\n\n\n important_code-2.py\n\n\n important_code-fix.py\n\n\n important_code-final.py\n\n\n important_code-final-4Apr.py"
  },
  {
    "objectID": "version-control-revealjs.html#git-commits",
    "href": "version-control-revealjs.html#git-commits",
    "title": "Introduction to version control with Git",
    "section": "Git commits",
    "text": "Git commits\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py"
  },
  {
    "objectID": "version-control-revealjs.html#types-of-version-control",
    "href": "version-control-revealjs.html#types-of-version-control",
    "title": "Introduction to version control with Git",
    "section": "Types of version control",
    "text": "Types of version control\n\nCentralized:\n\n\nConcurrent Version System (cvs)\nSubversion (svn)\nPerforce (p4)\n\n\nDistributed:\n\n\nDecentralized CVS (dcvs)\nmercurial (hg)\nbazaar (bzr)\nGit (git)"
  },
  {
    "objectID": "version-control-revealjs.html#git",
    "href": "version-control-revealjs.html#git",
    "title": "Introduction to version control with Git",
    "section": "Git",
    "text": "Git\n\n\nGit is a knife whose handle is also a knife. – Philip Guo"
  },
  {
    "objectID": "version-control-revealjs.html#section",
    "href": "version-control-revealjs.html#section",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "$ git --help\n\n$ git config --global user.name \"Kyle Niemeyer\"\n$ git config --global user.email \"kyle.niemeyer@oregonstate.edu\"\n$ git config --global core.editor \"vim\""
  },
  {
    "objectID": "version-control-revealjs.html#section-1",
    "href": "version-control-revealjs.html#section-1",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "~ $ mkdir analysis_code\n~ $ cd analysis_code\n\n~/analysis_code $ git init\nInitialized empty Git repository in ~/analysis_code/.git/"
  },
  {
    "objectID": "version-control-revealjs.html#section-2",
    "href": "version-control-revealjs.html#section-2",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "~/analysis_code $ ls\n~/analysis_code $ ls -A\n.git\n\n~/analysis_code $ cd .git && ls -A\nHEAD    config    description    hooks    index    info    logs\n\n\n\n\n\n\n\nTip\n\n\nTry this yourself."
  },
  {
    "objectID": "version-control-revealjs.html#adding-files",
    "href": "version-control-revealjs.html#adding-files",
    "title": "Introduction to version control with Git",
    "section": "Adding files",
    "text": "Adding files\n~/analysis_code $ touch README.md\n~/analysis_code $ git add README.md\n~/analysis_code $ git status\n\n\n\n\n\n\n\nTip\n\n\nTry this yourself."
  },
  {
    "objectID": "version-control-revealjs.html#committing-changes",
    "href": "version-control-revealjs.html#committing-changes",
    "title": "Introduction to version control with Git",
    "section": "Committing changes",
    "text": "Committing changes\n\nSnapshot of repository = revision\n\n\nCommitting a revision:\n\n\nSaves current state with a unique ID (hash)\nNames you as the author\nAllows you to add a message\n\n~/analysis_code $ git commit\n\n\n\n\n\n\n\nTip\n\n\nTry this yourself."
  },
  {
    "objectID": "version-control-revealjs.html#options-to-save-time",
    "href": "version-control-revealjs.html#options-to-save-time",
    "title": "Introduction to version control with Git",
    "section": "Options to save time",
    "text": "Options to save time\n~/analysis_code $ git commit -m \"This is my message\"\n~/analysis_code $ git commit -am \"This is my message \n                  committing all changes\""
  },
  {
    "objectID": "version-control-revealjs.html#commit-messages",
    "href": "version-control-revealjs.html#commit-messages",
    "title": "Introduction to version control with Git",
    "section": "Commit messages",
    "text": "Commit messages\n\nBad commit message:\n\nFixed bug\n\nBetter commit message:\n\nFixed bug in mass calculation\n\nDue to incorrect density value, mass was being calculated\norders of magnitude larger than it should. The correct value\nof density fixed this problem."
  },
  {
    "objectID": "version-control-revealjs.html#viewing-history-and-differences",
    "href": "version-control-revealjs.html#viewing-history-and-differences",
    "title": "Introduction to version control with Git",
    "section": "Viewing history and differences",
    "text": "Viewing history and differences\n~/analysis_code $ git log\n~/analysis_code $ git diff"
  },
  {
    "objectID": "version-control-revealjs.html#undoing-work",
    "href": "version-control-revealjs.html#undoing-work",
    "title": "Introduction to version control with Git",
    "section": "Undoing work",
    "text": "Undoing work\n\nUn-add a file that has been staged:\n\n~/analysis_code $ git restore --staged &lt;filename&gt;\n\nReset all tracked files to previous commit:\n\n~/analysis_code $ git reset [mode] [commit]\n\nRemove uncommitted changes:\n\n~/analysis_code $ git checkout -- &lt;filename&gt;"
  },
  {
    "objectID": "version-control-revealjs.html#branches",
    "href": "version-control-revealjs.html#branches",
    "title": "Introduction to version control with Git",
    "section": "Branches",
    "text": "Branches\n~/analysis_code $ git branch\n* main\n\n~/analysis_code $ git branch experimental\n~/analysis_code $ git branch\n  experimental\n* main\n\n~/analysis_code $ git branch new\n~/analysis_code $ git branch\n  experimental\n* main\n  new\n\n~/analysis_code $ git branch -d new\n~/analysis_code $ git branch\n  experimental\n* main\n\n~/analysis_code $ git switch experimental\n~/analysis_code $ git branch\n* experimental\n  main"
  },
  {
    "objectID": "version-control-revealjs.html#merging-branches",
    "href": "version-control-revealjs.html#merging-branches",
    "title": "Introduction to version control with Git",
    "section": "Merging branches",
    "text": "Merging branches\n~/analysis_code $ git switch main\n~/analysis_code $ git merge experimental\n~/analysis_code $ git log"
  },
  {
    "objectID": "version-control.html",
    "href": "version-control.html",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Backing up changing files\nStoring and accessing an annotated history of changes\nManaging the merging of changes between different change sets\n\n\n\n\n\n\n\nImage credit: Jorge Cham, PhD Comics\n\n\n\n\n\n\n important_code.py\n\n\n important_code-2.py\n\n\n important_code-fix.py\n\n\n important_code-final.py\n\n\n important_code-final-4Apr.py\n\n\n\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n\n\n\nCentralized:\n\n\nConcurrent Version System (cvs)\nSubversion (svn)\nPerforce (p4)\n\n\nDistributed:\n\n\nDecentralized CVS (dcvs)\nmercurial (hg)\nbazaar (bzr)\nGit (git)\n\n\n\n\n\n\nGit is a knife whose handle is also a knife. – Philip Guo\n\n\n\n\n\nImage credit: xkcd",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#where-is-version-control-needed",
    "href": "version-control.html#where-is-version-control-needed",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Backing up changing files\nStoring and accessing an annotated history of changes\nManaging the merging of changes between different change sets",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#why-is-this-important",
    "href": "version-control.html#why-is-this-important",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Image credit: Jorge Cham, PhD Comics",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#saving-copies",
    "href": "version-control.html#saving-copies",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "important_code.py\n\n\n important_code-2.py\n\n\n important_code-fix.py\n\n\n important_code-final.py\n\n\n important_code-final-4Apr.py",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#git-commits",
    "href": "version-control.html#git-commits",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#types-of-version-control",
    "href": "version-control.html#types-of-version-control",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Centralized:\n\n\nConcurrent Version System (cvs)\nSubversion (svn)\nPerforce (p4)\n\n\nDistributed:\n\n\nDecentralized CVS (dcvs)\nmercurial (hg)\nbazaar (bzr)\nGit (git)",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#git",
    "href": "version-control.html#git",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Git is a knife whose handle is also a knife. – Philip Guo\n\n\n\n\n\nImage credit: xkcd",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#section",
    "href": "version-control.html#section",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "$ git --help\n\n$ git config --global user.name \"Kyle Niemeyer\"\n$ git config --global user.email \"kyle.niemeyer@oregonstate.edu\"\n$ git config --global core.editor \"vim\"",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#section-1",
    "href": "version-control.html#section-1",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "~ $ mkdir analysis_code\n~ $ cd analysis_code\n\n~/analysis_code $ git init\nInitialized empty Git repository in ~/analysis_code/.git/",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#section-2",
    "href": "version-control.html#section-2",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "~/analysis_code $ ls\n~/analysis_code $ ls -A\n.git\n\n~/analysis_code $ cd .git && ls -A\nHEAD    config    description    hooks    index    info    logs\n\n\n\n\n\n\nTip\n\n\n\nTry this yourself.",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#adding-files",
    "href": "version-control.html#adding-files",
    "title": "Introduction to version control with Git",
    "section": "Adding files",
    "text": "Adding files\n~/analysis_code $ touch README.md\n~/analysis_code $ git add README.md\n~/analysis_code $ git status\n\n\n\n\n\n\nTip\n\n\n\nTry this yourself.",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#committing-changes",
    "href": "version-control.html#committing-changes",
    "title": "Introduction to version control with Git",
    "section": "Committing changes",
    "text": "Committing changes\n\nSnapshot of repository = revision\n\n\nCommitting a revision:\n\n\nSaves current state with a unique ID (hash)\nNames you as the author\nAllows you to add a message\n\n~/analysis_code $ git commit\n\n\n\n\n\n\nTip\n\n\n\nTry this yourself.",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#options-to-save-time",
    "href": "version-control.html#options-to-save-time",
    "title": "Introduction to version control with Git",
    "section": "Options to save time",
    "text": "Options to save time\n~/analysis_code $ git commit -m \"This is my message\"\n~/analysis_code $ git commit -am \"This is my message \n                  committing all changes\"",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#commit-messages",
    "href": "version-control.html#commit-messages",
    "title": "Introduction to version control with Git",
    "section": "Commit messages",
    "text": "Commit messages\n\nBad commit message:\n\nFixed bug\n\nBetter commit message:\n\nFixed bug in mass calculation\n\nDue to incorrect density value, mass was being calculated\norders of magnitude larger than it should. The correct value\nof density fixed this problem.\n\n\n\n\nImage credit: xkcd",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#viewing-history-and-differences",
    "href": "version-control.html#viewing-history-and-differences",
    "title": "Introduction to version control with Git",
    "section": "Viewing history and differences",
    "text": "Viewing history and differences\n~/analysis_code $ git log\n~/analysis_code $ git diff",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#undoing-work",
    "href": "version-control.html#undoing-work",
    "title": "Introduction to version control with Git",
    "section": "Undoing work",
    "text": "Undoing work\n\nUn-add a file that has been staged:\n\n~/analysis_code $ git restore --staged &lt;filename&gt;\n\nReset all tracked files to previous commit:\n\n~/analysis_code $ git reset [mode] [commit]\n\nRemove uncommitted changes:\n\n~/analysis_code $ git checkout -- &lt;filename&gt;",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#branches",
    "href": "version-control.html#branches",
    "title": "Introduction to version control with Git",
    "section": "Branches",
    "text": "Branches\n~/analysis_code $ git branch\n* main\n\n~/analysis_code $ git branch experimental\n~/analysis_code $ git branch\n  experimental\n* main\n\n~/analysis_code $ git branch new\n~/analysis_code $ git branch\n  experimental\n* main\n  new\n\n~/analysis_code $ git branch -d new\n~/analysis_code $ git branch\n  experimental\n* main\n\n~/analysis_code $ git switch experimental\n~/analysis_code $ git branch\n* experimental\n  main",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#merging-branches",
    "href": "version-control.html#merging-branches",
    "title": "Introduction to version control with Git",
    "section": "Merging branches",
    "text": "Merging branches\n~/analysis_code $ git switch main\n~/analysis_code $ git merge experimental\n~/analysis_code $ git log",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "packaging-distribution-revealjs.html#hypothetical-workflow-for-a-researcher",
    "href": "packaging-distribution-revealjs.html#hypothetical-workflow-for-a-researcher",
    "title": "Getting Started",
    "section": "Hypothetical workflow for a researcher",
    "text": "Hypothetical workflow for a researcher\n\nWork on idea for paper with collaborators\nDo exploratory analysis in scripts and Jupyter ecosystem\nAs research progresses, need to write more-complicated functions and workflows\nCode begins to sprawl across multiple directories\nSoftware dependencies begin to become more complicated\nThe code “works on my machine”, but what about your collaborators?\n\n\nPeople heroically press forward, but this is painful, and not reusable"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#section",
    "href": "packaging-distribution-revealjs.html#section",
    "title": "Getting Started",
    "section": "",
    "text": "Imagine you start with a Jupyter notebook that looks like this:\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Rosenbrock function\ndef rosen(x):\n    \"\"\"The Rosenbrock function\"\"\"\n    return sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0)\n\ndef rosen_der(x):\n    \"\"\"Gradient of the Rosenbrock function\"\"\"\n    xm = x[1:-1]\n    xm_m1 = x[:-2]\n    xm_p1 = x[2:]\n    der = np.zeros_like(x)\n    der[1:-1] = 200 * (xm - xm_m1**2) - 400 * (xm_p1 - xm**2) * xm - 2 * (1 - xm)\n    der[0] = -400 * x[0] * (x[1] - x[0] ** 2) - 2 * (1 - x[0])\n    der[-1] = 200 * (x[-1] - x[-2] ** 2)\n    return der\n\n# Minimization of the Rosenbrock function with some initial guess\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#reusable-science-step-by-step",
    "href": "packaging-distribution-revealjs.html#reusable-science-step-by-step",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\nWe can convert our notebook code into a simple importable module an and example calling it:\n$ tree edit-sys-path \nedit-sys-path\n├── code\n│   └── utils.py\n└── example.py\n\n2 directories, 2 files"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#reusable-science-step-by-step-1",
    "href": "packaging-distribution-revealjs.html#reusable-science-step-by-step-1",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\n# example.py\nimport sys\nfrom pathlib import Path\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Make ./code/utils.py visible to sys.path\n# sys.path position 1 should be after cwd and before activated virtual environment\nsys.path.insert(1, str(Path().cwd() / \"code\"))\nfrom utils import rosen, rosen_der\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#reusable-science-step-by-step-2",
    "href": "packaging-distribution-revealjs.html#reusable-science-step-by-step-2",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\n\nThis is already better than having everything in a single massive file!\nHowever, now things are tied to this relative path on your computer:\n\n# Make ./code/utils.py visible to sys.path\nsys.path.insert(1, str(Path(__file__).parent / \"code\"))\nfrom utils import rosen, rosen_der\n\nand are brittle to refactoring and change; plus, not very portable to others.\n\n\nBut we can do better!"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#what-is-a-python-package",
    "href": "packaging-distribution-revealjs.html#what-is-a-python-package",
    "title": "Getting Started",
    "section": "What is a Python package?",
    "text": "What is a Python package?\n\nFirst, let’s define module.\n\n\nFrom https://docs.python.org/3/glossary.html#term-module:\n\n\nmodule\n\nAn object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects. Modules are loaded into Python by the process of importing.\n\n\nSee also package."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#what-is-a-python-package-1",
    "href": "packaging-distribution-revealjs.html#what-is-a-python-package-1",
    "title": "Getting Started",
    "section": "What is a Python package?",
    "text": "What is a Python package?\nDeconstructing that definition:\n\nWhen I write import modulename I am loading a module\nBut we also talk about “importing a package”! This seems to imply a package is a kind of module.\nThe module can contain “arbitrary Python objects”, which could include other modules.\nIt’s almost like we need a special name for a “module that can contain other modules”…\nWhen loading a module, its name gets added to the namespace, a collection of currently defined names and objects they reference: numpy.random.default_rng"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#aside-why-does-python-have-modules",
    "href": "packaging-distribution-revealjs.html#aside-why-does-python-have-modules",
    "title": "Getting Started",
    "section": "Aside: why does Python have modules?",
    "text": "Aside: why does Python have modules?\n\nBecause it’s good for your code to be modular.\n\n\n\nSource: https://realpython.com/python-modules-packages/"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#where-do-modules-come-from",
    "href": "packaging-distribution-revealjs.html#where-do-modules-come-from",
    "title": "Getting Started",
    "section": "Where do modules come from?",
    "text": "Where do modules come from?\n\nThe standard library\n\nPython code\nCompiled C code\n\nA local file that ends in `.py (confusingly, also called a “module”)\nThird-party libraries that you pip install or conda install (i.e., packages)\nA local package"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#what-is-a-python-package-2",
    "href": "packaging-distribution-revealjs.html#what-is-a-python-package-2",
    "title": "Getting Started",
    "section": "What is a Python package?",
    "text": "What is a Python package?\nWe spent all that time defining module, now we can define package:\n\nFrom https://docs.python.org/3/glossary.html#term-package:\n\n\npackage\n\nA Python module which can contain submodules or recursively, subpackages."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#package-can-have-multiple-meanings",
    "href": "packaging-distribution-revealjs.html#package-can-have-multiple-meanings",
    "title": "Getting Started",
    "section": "“Package” can have multiple meanings!",
    "text": "“Package” can have multiple meanings!\nTwo main usages:\n\nimport package: the one we talked about, when you write import packagename. We’ll start by making this.\ndistribution package: the actual artifact that gets downloaded off the internet and stored somewhere, like when you run pip install package. We’ll make these too."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#when-should-i-turn-my-code-into-a-package",
    "href": "packaging-distribution-revealjs.html#when-should-i-turn-my-code-into-a-package",
    "title": "Getting Started",
    "section": "When should I turn my code into a package?",
    "text": "When should I turn my code into a package?\nTwo common cases for research code:\n\nCode that goes with a research article; mainly used to reproduce the results, AKA a (computational) project or a research compendium.\nA generalized tool or library that other researchers can use\n\n\nNot all packages intended to reproduce a paper’s results need the full infrastructure we will discuss (documentation website, continuous integration, etc.)."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#hypothetical-workflow-for-a-researcher-1",
    "href": "packaging-distribution-revealjs.html#hypothetical-workflow-for-a-researcher-1",
    "title": "Getting Started",
    "section": "Hypothetical workflow for a researcher",
    "text": "Hypothetical workflow for a researcher\n\nWork on idea for paper with collaborators\nDo exploratory analysis in scripts and Jupyter ecosystem\nAs research progresses, need to write more-complicated functions and workflows\nCode begins to sprawl across multiple directories\nSoftware dependencies begin to become more complicated\nThe code “works on my machine”, but what about your collaborators?\n\n\nPeople heroically press forward, but this is painful, and not reusable"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#section-1",
    "href": "packaging-distribution-revealjs.html#section-1",
    "title": "Getting Started",
    "section": "",
    "text": "Imagine you start with a Jupyter notebook that looks like this:\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Rosenbrock function\ndef rosen(x):\n    \"\"\"The Rosenbrock function\"\"\"\n    return sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0)\n\ndef rosen_der(x):\n    \"\"\"Gradient of the Rosenbrock function\"\"\"\n    xm = x[1:-1]\n    xm_m1 = x[:-2]\n    xm_p1 = x[2:]\n    der = np.zeros_like(x)\n    der[1:-1] = 200 * (xm - xm_m1**2) - 400 * (xm_p1 - xm**2) * xm - 2 * (1 - xm)\n    der[0] = -400 * x[0] * (x[1] - x[0] ** 2) - 2 * (1 - x[0])\n    der[-1] = 200 * (x[-1] - x[-2] ** 2)\n    return der\n\n# Minimization of the Rosenbrock function with some initial guess\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#reusable-science-step-by-step-3",
    "href": "packaging-distribution-revealjs.html#reusable-science-step-by-step-3",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\nWe can convert our notebook code into a simple importable module an and example calling it:\n$ tree edit-sys-path \nedit-sys-path\n├── code\n│   └── utils.py\n└── example.py\n\n2 directories, 2 files"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#reusable-science-step-by-step-4",
    "href": "packaging-distribution-revealjs.html#reusable-science-step-by-step-4",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\n# example.py\nimport sys\nfrom pathlib import Path\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Make ./code/utils.py visible to sys.path\n# sys.path position 1 should be after cwd and before activated virtual environment\nsys.path.insert(1, str(Path().cwd() / \"code\"))\nfrom utils import rosen, rosen_der\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#reusable-science-step-by-step-5",
    "href": "packaging-distribution-revealjs.html#reusable-science-step-by-step-5",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\n\nThis is already better than having everything in a single massive file!\nHowever, now things are tied to this relative path on your computer:\n\n# Make ./code/utils.py visible to sys.path\nsys.path.insert(1, str(Path(__file__).parent / \"code\"))\nfrom utils import rosen, rosen_der\n\nand are brittle to refactoring and change; plus, not very portable to others.\n\n\nBut we can do better!"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#next-steps-packaging-your-code",
    "href": "packaging-distribution-revealjs.html#next-steps-packaging-your-code",
    "title": "Getting Started",
    "section": "Next steps: packaging your code",
    "text": "Next steps: packaging your code\n\nThe goal is for your code to be installable, and distributable.\nPer the Zen of Python, this should be straightforward, right?\n\n$ python3 -c 'import this' | grep obvious\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#next-steps-packaging-your-code-1",
    "href": "packaging-distribution-revealjs.html#next-steps-packaging-your-code-1",
    "title": "Getting Started",
    "section": "Next steps: packaging your code",
    "text": "Next steps: packaging your code\nUnfortunately, not so much. 😔\n\n\n\n\nYou might be asking: Why is there more than one thing?"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#next-steps-packaging-your-code-2",
    "href": "packaging-distribution-revealjs.html#next-steps-packaging-your-code-2",
    "title": "Getting Started",
    "section": "Next steps: packaging your code",
    "text": "Next steps: packaging your code\nThe good news: Python packaging has improved dramatically in the last 5 years\n\nIt has never been easier to just point your package manager to some code locally, or on the internet, and get working Python code installed and running on your machine regardless of operating system or architecture\nThis is a small miracle!\n\n\nThe bad news: Python packaging has expanded dramatically in the last 5 years\n\n\n\nBy creating standards the PyPA allowed for an ecosystem of packaging backends to be created to tackle various problems (this is good!)\nThis means that our The Zen of Python expectations are violated and we need to make design choices (hard for beginners)"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#next-steps-packaging-your-code-3",
    "href": "packaging-distribution-revealjs.html#next-steps-packaging-your-code-3",
    "title": "Getting Started",
    "section": "Next steps: packaging your code",
    "text": "Next steps: packaging your code\nThe okay news: You can probably default to the simplest thing.\n\npure Python: Probably hatch\ncompiled extensions: Probably setuptools + pybind11 or scikit-build-core + pybind11\n\n\n\n\n\n\nPython Packaging User Guide, Packaging Python Projects Tutorial\n\n\n\n\n\n\nScientific Python Library Development Guide"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#simple-packaging-example",
    "href": "packaging-distribution-revealjs.html#simple-packaging-example",
    "title": "Getting Started",
    "section": "Simple packaging example",
    "text": "Simple packaging example\nModern PEP 518 compliant build backends just need a single file: pyproject.toml\n$ tree simple_packaging\nsimple-packaging\n├── LICENSE\n├── README.md\n├── pyproject.toml\n├── src\n│   └── rosen\n│       ├── __init__.py\n│       ├── _version.py\n│       └── example.py\n└── tests\n    └── test_example.py\n\n4 directories, 7 files"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#simple-packaging-example-pyproject.toml",
    "href": "packaging-distribution-revealjs.html#simple-packaging-example-pyproject.toml",
    "title": "Getting Started",
    "section": "Simple packaging example: pyproject.toml",
    "text": "Simple packaging example: pyproject.toml\nWhat is .toml?\n\n“TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. TOML is designed to map unambiguously to a hash table. TOML should be easy to parse into data structures in a wide variety of languages.” — https://toml.io/ (emphasis mine)\n\nIn recent years TOML has seen a rise in popularity for configuration files and lock files. Things that need to be easy to read (humans) and easy to parse (machines)."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#simple-packaging-example-pyproject.toml-1",
    "href": "packaging-distribution-revealjs.html#simple-packaging-example-pyproject.toml-1",
    "title": "Getting Started",
    "section": "Simple packaging example: pyproject.toml",
    "text": "Simple packaging example: pyproject.toml\nDefining how your project should get built:\n[build-system]\nrequires = [\n    \"hatchling&gt;=1.13.0\",\n    \"hatch-vcs&gt;=0.3.0\",\n]\nbuild-backend = \"hatchling.build\"\n..."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#simple-packaging-example-pyproject.toml-2",
    "href": "packaging-distribution-revealjs.html#simple-packaging-example-pyproject.toml-2",
    "title": "Getting Started",
    "section": "Simple packaging example: pyproject.toml",
    "text": "Simple packaging example: pyproject.toml\nDefining project metadata and requirements/dependencies:\n[project]\nname = \"rosen\"\ndynamic = [\"version\"]\ndescription = \"Example package for demonstration\"\nreadme = \"README.md\"\nlicense = { text = \"BSD-3-Clause\" }  # SPDX short identifier\nauthors = [\n  { name = \"Kyle Niemeyer\", email = \"kyle.niemeyer@oregonstate.edu\" },\n]\nrequires-python = \"&gt;=3.8\"\n\ndependencies = [\n    \"scipy&gt;=1.6.0\",\n    \"numpy\",  # compatible versions controlled through scipy\n]\n..."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#simple-packaging-example-pyproject.toml-3",
    "href": "packaging-distribution-revealjs.html#simple-packaging-example-pyproject.toml-3",
    "title": "Getting Started",
    "section": "Simple packaging example: pyproject.toml",
    "text": "Simple packaging example: pyproject.toml\nConfiguring tooling options and interactions with other tools:\n[tool.hatch.version]\nsource = \"vcs\"\n\n[tool.hatch.version.raw-options]\nlocal_scheme = \"no-local-version\"\n# Need to give root as we aren't at the same level as the git repo\nroot = \"..\"\n\n[tool.hatch.build.hooks.vcs]\nversion-file = \"src/rosen/_version.py\"\n..."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#simple-packaging-example-installing-your-code",
    "href": "packaging-distribution-revealjs.html#simple-packaging-example-installing-your-code",
    "title": "Getting Started",
    "section": "Simple packaging example: Installing your code",
    "text": "Simple packaging example: Installing your code\nYou can now locally install your package into your Python virtual environment!\n$ cd simple_packaging\n$ pip install --upgrade pip wheel\n$ pip install .\nSuccessfully built rosen\nInstalling collected packages: rosen\nSuccessfully installed rosen-0.0.2.dev1\n$ pip show rosen\nName: rosen\nVersion: 0.0.2.dev1\nSummary: Example package for demonstration\nHome-page: https://github.com/SoftwareDevEngResearch/packaging-examples\nAuthor: \nAuthor-email: Kyle Niemeyer &lt;kyle.niemeyer@oregonstate.edu&gt;\nLicense: BSD-3-Clause\nLocation: ***/.venv/lib/python3.13/site-packages\nRequires: numpy, scipy\nRequired-by:"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#simple-packaging-example-installing-your-code-1",
    "href": "packaging-distribution-revealjs.html#simple-packaging-example-installing-your-code-1",
    "title": "Getting Started",
    "section": "Simple packaging example: Installing your code",
    "text": "Simple packaging example: Installing your code\nand use it anywhere\n# example.py\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# We can now import our code\nfrom rosen.example import rosen, rosen_der\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\",\n                  jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\n# array([1.00000004, 1.0000001 , 1.00000021, 1.00000044, 1.00000092])"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#packaging-doesnt-slow-down-development",
    "href": "packaging-distribution-revealjs.html#packaging-doesnt-slow-down-development",
    "title": "Getting Started",
    "section": "Packaging doesn’t slow down development",
    "text": "Packaging doesn’t slow down development\nPEP 518 compliant build backends allow for “editable installs”\n$ python -m pip install --upgrade --editable .\n$ python -m pip show rosen | grep --ignore-case 'location'\nLocation: ***/lib/python3.12/site-packages\nEditable project location: ***/examples/simple_packaging\n\nEditable installs add the files in the development directory to Python’s import path. (Only need to re-installation if you change the project metadata.)\n\n\nCan develop your code under src/ and have immediate access to it."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#packaging-compiled-extensions",
    "href": "packaging-distribution-revealjs.html#packaging-compiled-extensions",
    "title": "Getting Started",
    "section": "Packaging compiled extensions",
    "text": "Packaging compiled extensions\nWith modern packaging infrastructure, packaging compiled extensions requires small extra work!\n$ tree compiled_packaging\ncompiled-packaging\n├── CMakeLists.txt\n├── LICENSE\n├── README.md\n├── pyproject.toml\n├── src\n│   ├── basic_math.cpp\n│   └── rosen_cpp\n│       ├── __init__.py\n│       └── example.py\n└── tests\n    └── test_example.py\n\n4 directories, 8 files"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#packaging-compiled-extensions-1",
    "href": "packaging-distribution-revealjs.html#packaging-compiled-extensions-1",
    "title": "Getting Started",
    "section": "Packaging compiled extensions",
    "text": "Packaging compiled extensions\nIn pyproject.toml:\nSwap build system to scikit-build-core + pybind11\n[build-system]\nrequires = [\n  \"scikit-build-core\",\n  \"pybind11\"\n  ]\nbuild-backend = \"scikit_build_core.build\"\n..."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#packaging-compiled-extensions-2",
    "href": "packaging-distribution-revealjs.html#packaging-compiled-extensions-2",
    "title": "Getting Started",
    "section": "Packaging compiled extensions",
    "text": "Packaging compiled extensions\nCMakeLists.txt:\n# Specify CMake version and project language\ncmake_minimum_required(VERSION 3.15...3.30)\nproject(${SKBUILD_PROJECT_NAME} LANGUAGES CXX)\n\n# Setup pybind11\nset(PYBIND11_FINDPYTHON ON)\nfind_package(pybind11 CONFIG REQUIRED)\n\n# Add the pybind11 module to build targets\npybind11_add_module(basic_math MODULE src/basic_math.cpp)\ninstall(TARGETS basic_math DESTINATION ${SKBUILD_PROJECT_NAME})"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#packaging-compiled-extensions-3",
    "href": "packaging-distribution-revealjs.html#packaging-compiled-extensions-3",
    "title": "Getting Started",
    "section": "Packaging compiled extensions",
    "text": "Packaging compiled extensions\nsrc/basic_math.cpp:\n#include &lt;pybind11/pybind11.h&gt;\n\nint add(int i, int j) { return i + j; }\n\nnamespace py = pybind11;\n\nPYBIND11_MODULE(basic_math, m) {\n  m.def(\"add\", &add, R\"pbdoc(\n      Add two numbers\n  )pbdoc\");\n...\n\n}"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#packaging-compiled-extensions-installing",
    "href": "packaging-distribution-revealjs.html#packaging-compiled-extensions-installing",
    "title": "Getting Started",
    "section": "Packaging compiled extensions: Installing",
    "text": "Packaging compiled extensions: Installing\nInstalling locally is the same as for the pure-Python example:\n$ cd simple_packaging\n$ pip install --upgrade pip wheel\n$ pip install .\nSuccessfully built rosen-cpp\nInstalling collected packages: rosen-cpp\nSuccessfully installed rosen-cpp-0.0.1\nModule name is that given in C++:\nfrom rosen_cpp import basic_math\nbasic_math.add(1, 2)\n# 3"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#going-further-distributing-packages",
    "href": "packaging-distribution-revealjs.html#going-further-distributing-packages",
    "title": "Getting Started",
    "section": "Going further: Distributing packages",
    "text": "Going further: Distributing packages\nIf your code is publicly available on the WWW in a Git repository, you’ve already done a version of distribution!\n# pip install \"git+https://example.com/repo/project.git@branch#subdirectory=path\"\n$ pip install \\\n  \"git+https://github.com/SoftwareDevEngResearch/packaging-examples.git#subdirectory=simple_packaging\"\n# Works for pure-Python packages\n$ pip install --upgrade \"git+https://github.com/scikit-hep/pyhf.git\"\n# as well as packages with compiled extensions\n$ pip install --upgrade \"git+https://github.com/scikit-hep/iminuit.git\""
  },
  {
    "objectID": "packaging-distribution-revealjs.html#going-further-distributing-packages-1",
    "href": "packaging-distribution-revealjs.html#going-further-distributing-packages-1",
    "title": "Getting Started",
    "section": "Going further: Distributing packages",
    "text": "Going further: Distributing packages\nIdeally, we’d prefer a more organized approach: distribution through a package index.\n\nFirst, we need to create distributions of our packaged code.\n\n\nDistributions that pip can install:\n\nsource distribution (sdist): A tarfile (.tar.gz) of the source files of our package (subset of all the files in the repository)\nwheel: A zipfile (.whl) of the file system structure and package metadata with any dependencies prebuilt. No arbitrary code execution, only decompressing and copying of files"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#going-further-distributing-packages-2",
    "href": "packaging-distribution-revealjs.html#going-further-distributing-packages-2",
    "title": "Getting Started",
    "section": "Going further: Distributing packages",
    "text": "Going further: Distributing packages\nTo create these distributions from source code, rely on our package build backend (e.g., hatchling) and build frontend tool like build\n$ pip install --upgrade build\n$ python -m build .\n* Creating venv isolated environment...\n* Installing packages in isolated environment... (hatch-vcs&gt;=0.3.0, hatchling&gt;=1.13.0)\n* Getting build dependencies for sdist...\n* Building sdist...\n* Building wheel from sdist\n* Creating venv isolated environment...\n* Installing packages in isolated environment... (hatch-vcs&gt;=0.3.0, hatchling&gt;=1.13.0)\n* Getting build dependencies for wheel...\n* Building wheel...\nSuccessfully built rosen-0.0.1.tar.gz and rosen-0.0.1-py3-none-any.whl\n$ ls dist\nrosen-0.0.1-py3-none-any.whl  rosen-0.0.1.tar.gz"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#going-further-distributing-packages-3",
    "href": "packaging-distribution-revealjs.html#going-further-distributing-packages-3",
    "title": "Getting Started",
    "section": "Going further: Distributing packages",
    "text": "Going further: Distributing packages\nWe can now securely upload the distributions under ./dist/ to any package index that understands how to use them.\n\nThe most common is the Python Package Index (PyPI), which serves as the default package index for pip."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#distributing-packages-conda-forge",
    "href": "packaging-distribution-revealjs.html#distributing-packages-conda-forge",
    "title": "Getting Started",
    "section": "Distributing packages: conda-forge",
    "text": "Distributing packages: conda-forge\nThe conda family of package managers (conda, mamba, micromamba, pixi) take an alternative approach from pip.\n\nInstead of installing Python packages, they act as general purpose package managers and install all dependencies (including Python) as OS and architecture specific built binaries (.conda files — zipfile containing compressed tar files) hosted on conda-forge.\n\n\nThis allows an additional level of runtime environment specification not possible with just pip, though getting environment solves right can become more complicated."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#distributing-packages-conda-forge-1",
    "href": "packaging-distribution-revealjs.html#distributing-packages-conda-forge-1",
    "title": "Getting Started",
    "section": "Distributing packages: conda-forge",
    "text": "Distributing packages: conda-forge\nPopular in scientific computing as arbitrary binaries can be hosted, including compilers (e.g., gcc, Fortran) and even the full NVIDIA CUDA stack!\n\nWith the change to full binaries only this also requires that specification of the environment being installed is important.\n\n\nWith sdists and wheels, if there is no compatible wheel available, pip will automatically fall back to trying to locally build from the sdist. Can’t do that if there is no matching .conda binary!"
  },
  {
    "objectID": "packaging-distribution-revealjs.html#semantic-versioning",
    "href": "packaging-distribution-revealjs.html#semantic-versioning",
    "title": "Getting Started",
    "section": "Semantic Versioning",
    "text": "Semantic Versioning\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\nMAJOR version when you make incompatible API changes,\nMINOR version when you add functionality in a backwards-compatible manner, and\nPATCH version when you make backwards-compatible bug fixes.\n\n\nTo start: initial development release starts at 0.0.1, and increment minor version for subsequent releases."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#versioning-with-hatch-git",
    "href": "packaging-distribution-revealjs.html#versioning-with-hatch-git",
    "title": "Getting Started",
    "section": "Versioning with hatch & git",
    "text": "Versioning with hatch & git\nWe actually already set up our hatch build system to automatically version our package based on git:\n[tool.hatch.version]\nsource = \"vcs\"\n\n[tool.hatch.version.raw-options]\nlocal_scheme = \"no-local-version\"\n# Need to give root as we aren't at the same level as the git repo\nroot = \"..\"\n\n[tool.hatch.build.hooks.vcs]\nversion-file = \"src/rosen/_version.py\"\n...\n\nThis tells hatch to look at the latest git tag and use that as the version number, stored in the automatically generated file src/rosen/_version.py."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#versioning-with-hatch-git-1",
    "href": "packaging-distribution-revealjs.html#versioning-with-hatch-git-1",
    "title": "Getting Started",
    "section": "Versioning with hatch & git",
    "text": "Versioning with hatch & git\nTo document a new version, simply create a new git tag:\n$ git tag v0.x.y -m \"version 0.x.y\"\n$ git push --tags\n\nThis will automatically update the version number in src/rosen/_version.py when next building the package."
  },
  {
    "objectID": "packaging-distribution-revealjs.html#good-idea-keep-a-changelog",
    "href": "packaging-distribution-revealjs.html#good-idea-keep-a-changelog",
    "title": "Getting Started",
    "section": "Good idea: keep a CHANGELOG",
    "text": "Good idea: keep a CHANGELOG\nUse a CHANGELOG file to document changes in your package over time.\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.0.2] - 2014-07-10\n### Added\n- Explanation of the recommended reverse chronological release ordering.\n\n## 0.0.1 - 2014-05-31\n### Added\n- This CHANGELOG file to hopefully serve as an evolving example of a\n  standardized open source project CHANGELOG.\n- CNAME file to enable GitHub Pages custom domain\n- README now contains answers to common questions about CHANGELOGs\n- Good examples and basic guidelines, including proper date formatting.\n- Counter-examples: \"What makes unicorns cry?\"\n\n[Unreleased]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.2...HEAD\n[0.0.2]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.1...v0.0.2"
  },
  {
    "objectID": "packaging-distribution.html",
    "href": "packaging-distribution.html",
    "title": "Getting Started",
    "section": "",
    "text": "Work on idea for paper with collaborators\nDo exploratory analysis in scripts and Jupyter ecosystem\nAs research progresses, need to write more-complicated functions and workflows\nCode begins to sprawl across multiple directories\nSoftware dependencies begin to become more complicated\nThe code “works on my machine”, but what about your collaborators?\n\n\nPeople heroically press forward, but this is painful, and not reusable\n\n\n\n\nImagine you start with a Jupyter notebook that looks like this:\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Rosenbrock function\ndef rosen(x):\n    \"\"\"The Rosenbrock function\"\"\"\n    return sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0)\n\ndef rosen_der(x):\n    \"\"\"Gradient of the Rosenbrock function\"\"\"\n    xm = x[1:-1]\n    xm_m1 = x[:-2]\n    xm_p1 = x[2:]\n    der = np.zeros_like(x)\n    der[1:-1] = 200 * (xm - xm_m1**2) - 400 * (xm_p1 - xm**2) * xm - 2 * (1 - xm)\n    der[0] = -400 * x[0] * (x[1] - x[0] ** 2) - 2 * (1 - x[0])\n    der[-1] = 200 * (x[-1] - x[-2] ** 2)\n    return der\n\n# Minimization of the Rosenbrock function with some initial guess\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)\n\n\n\nWe can convert our notebook code into a simple importable module an and example calling it:\n$ tree edit-sys-path \nedit-sys-path\n├── code\n│   └── utils.py\n└── example.py\n\n2 directories, 2 files\n\n\n\n# example.py\nimport sys\nfrom pathlib import Path\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Make ./code/utils.py visible to sys.path\n# sys.path position 1 should be after cwd and before activated virtual environment\nsys.path.insert(1, str(Path().cwd() / \"code\"))\nfrom utils import rosen, rosen_der\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)\n\n\n\n\nThis is already better than having everything in a single massive file!\nHowever, now things are tied to this relative path on your computer:\n\n# Make ./code/utils.py visible to sys.path\nsys.path.insert(1, str(Path(__file__).parent / \"code\"))\nfrom utils import rosen, rosen_der\n\nand are brittle to refactoring and change; plus, not very portable to others.\n\n\nBut we can do better!",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#hypothetical-workflow-for-a-researcher",
    "href": "packaging-distribution.html#hypothetical-workflow-for-a-researcher",
    "title": "Getting Started",
    "section": "",
    "text": "Work on idea for paper with collaborators\nDo exploratory analysis in scripts and Jupyter ecosystem\nAs research progresses, need to write more-complicated functions and workflows\nCode begins to sprawl across multiple directories\nSoftware dependencies begin to become more complicated\nThe code “works on my machine”, but what about your collaborators?\n\n\nPeople heroically press forward, but this is painful, and not reusable",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#section",
    "href": "packaging-distribution.html#section",
    "title": "Getting Started",
    "section": "",
    "text": "Imagine you start with a Jupyter notebook that looks like this:\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Rosenbrock function\ndef rosen(x):\n    \"\"\"The Rosenbrock function\"\"\"\n    return sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0)\n\ndef rosen_der(x):\n    \"\"\"Gradient of the Rosenbrock function\"\"\"\n    xm = x[1:-1]\n    xm_m1 = x[:-2]\n    xm_p1 = x[2:]\n    der = np.zeros_like(x)\n    der[1:-1] = 200 * (xm - xm_m1**2) - 400 * (xm_p1 - xm**2) * xm - 2 * (1 - xm)\n    der[0] = -400 * x[0] * (x[1] - x[0] ** 2) - 2 * (1 - x[0])\n    der[-1] = 200 * (x[-1] - x[-2] ** 2)\n    return der\n\n# Minimization of the Rosenbrock function with some initial guess\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#reusable-science-step-by-step",
    "href": "packaging-distribution.html#reusable-science-step-by-step",
    "title": "Getting Started",
    "section": "",
    "text": "We can convert our notebook code into a simple importable module an and example calling it:\n$ tree edit-sys-path \nedit-sys-path\n├── code\n│   └── utils.py\n└── example.py\n\n2 directories, 2 files",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#reusable-science-step-by-step-1",
    "href": "packaging-distribution.html#reusable-science-step-by-step-1",
    "title": "Getting Started",
    "section": "",
    "text": "# example.py\nimport sys\nfrom pathlib import Path\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Make ./code/utils.py visible to sys.path\n# sys.path position 1 should be after cwd and before activated virtual environment\nsys.path.insert(1, str(Path().cwd() / \"code\"))\nfrom utils import rosen, rosen_der\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#reusable-science-step-by-step-2",
    "href": "packaging-distribution.html#reusable-science-step-by-step-2",
    "title": "Getting Started",
    "section": "",
    "text": "This is already better than having everything in a single massive file!\nHowever, now things are tied to this relative path on your computer:\n\n# Make ./code/utils.py visible to sys.path\nsys.path.insert(1, str(Path(__file__).parent / \"code\"))\nfrom utils import rosen, rosen_der\n\nand are brittle to refactoring and change; plus, not very portable to others.\n\n\nBut we can do better!",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#what-is-a-python-package",
    "href": "packaging-distribution.html#what-is-a-python-package",
    "title": "Getting Started",
    "section": "What is a Python package?",
    "text": "What is a Python package?\n\nFirst, let’s define module.\n\n\nFrom https://docs.python.org/3/glossary.html#term-module:\n\n\nmodule\n\nAn object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects. Modules are loaded into Python by the process of importing.\n\n\nSee also package.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#what-is-a-python-package-1",
    "href": "packaging-distribution.html#what-is-a-python-package-1",
    "title": "Getting Started",
    "section": "What is a Python package?",
    "text": "What is a Python package?\nDeconstructing that definition:\n\nWhen I write import modulename I am loading a module\nBut we also talk about “importing a package”! This seems to imply a package is a kind of module.\nThe module can contain “arbitrary Python objects”, which could include other modules.\nIt’s almost like we need a special name for a “module that can contain other modules”…\nWhen loading a module, its name gets added to the namespace, a collection of currently defined names and objects they reference: numpy.random.default_rng",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#aside-why-does-python-have-modules",
    "href": "packaging-distribution.html#aside-why-does-python-have-modules",
    "title": "Getting Started",
    "section": "Aside: why does Python have modules?",
    "text": "Aside: why does Python have modules?\n\nBecause it’s good for your code to be modular.\n\n\n\nSource: https://realpython.com/python-modules-packages/",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#where-do-modules-come-from",
    "href": "packaging-distribution.html#where-do-modules-come-from",
    "title": "Getting Started",
    "section": "Where do modules come from?",
    "text": "Where do modules come from?\n\nThe standard library\n\nPython code\nCompiled C code\n\nA local file that ends in `.py (confusingly, also called a “module”)\nThird-party libraries that you pip install or conda install (i.e., packages)\nA local package",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#what-is-a-python-package-2",
    "href": "packaging-distribution.html#what-is-a-python-package-2",
    "title": "Getting Started",
    "section": "What is a Python package?",
    "text": "What is a Python package?\nWe spent all that time defining module, now we can define package:\n\nFrom https://docs.python.org/3/glossary.html#term-package:\n\n\npackage\n\nA Python module which can contain submodules or recursively, subpackages.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#package-can-have-multiple-meanings",
    "href": "packaging-distribution.html#package-can-have-multiple-meanings",
    "title": "Getting Started",
    "section": "“Package” can have multiple meanings!",
    "text": "“Package” can have multiple meanings!\nTwo main usages:\n\nimport package: the one we talked about, when you write import packagename. We’ll start by making this.\ndistribution package: the actual artifact that gets downloaded off the internet and stored somewhere, like when you run pip install package. We’ll make these too.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#when-should-i-turn-my-code-into-a-package",
    "href": "packaging-distribution.html#when-should-i-turn-my-code-into-a-package",
    "title": "Getting Started",
    "section": "When should I turn my code into a package?",
    "text": "When should I turn my code into a package?\nTwo common cases for research code:\n\nCode that goes with a research article; mainly used to reproduce the results, AKA a (computational) project or a research compendium.\nA generalized tool or library that other researchers can use\n\n\nNot all packages intended to reproduce a paper’s results need the full infrastructure we will discuss (documentation website, continuous integration, etc.).",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#hypothetical-workflow-for-a-researcher-1",
    "href": "packaging-distribution.html#hypothetical-workflow-for-a-researcher-1",
    "title": "Getting Started",
    "section": "Hypothetical workflow for a researcher",
    "text": "Hypothetical workflow for a researcher\n\nWork on idea for paper with collaborators\nDo exploratory analysis in scripts and Jupyter ecosystem\nAs research progresses, need to write more-complicated functions and workflows\nCode begins to sprawl across multiple directories\nSoftware dependencies begin to become more complicated\nThe code “works on my machine”, but what about your collaborators?\n\n\nPeople heroically press forward, but this is painful, and not reusable",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#section-1",
    "href": "packaging-distribution.html#section-1",
    "title": "Getting Started",
    "section": "",
    "text": "Imagine you start with a Jupyter notebook that looks like this:\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Rosenbrock function\ndef rosen(x):\n    \"\"\"The Rosenbrock function\"\"\"\n    return sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0)\n\ndef rosen_der(x):\n    \"\"\"Gradient of the Rosenbrock function\"\"\"\n    xm = x[1:-1]\n    xm_m1 = x[:-2]\n    xm_p1 = x[2:]\n    der = np.zeros_like(x)\n    der[1:-1] = 200 * (xm - xm_m1**2) - 400 * (xm_p1 - xm**2) * xm - 2 * (1 - xm)\n    der[0] = -400 * x[0] * (x[1] - x[0] ** 2) - 2 * (1 - x[0])\n    der[-1] = 200 * (x[-1] - x[-2] ** 2)\n    return der\n\n# Minimization of the Rosenbrock function with some initial guess\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#reusable-science-step-by-step-3",
    "href": "packaging-distribution.html#reusable-science-step-by-step-3",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\nWe can convert our notebook code into a simple importable module an and example calling it:\n$ tree edit-sys-path \nedit-sys-path\n├── code\n│   └── utils.py\n└── example.py\n\n2 directories, 2 files",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#reusable-science-step-by-step-4",
    "href": "packaging-distribution.html#reusable-science-step-by-step-4",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\n# example.py\nimport sys\nfrom pathlib import Path\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Make ./code/utils.py visible to sys.path\n# sys.path position 1 should be after cwd and before activated virtual environment\nsys.path.insert(1, str(Path().cwd() / \"code\"))\nfrom utils import rosen, rosen_der\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\", jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\nprint(optimized_params)",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#reusable-science-step-by-step-5",
    "href": "packaging-distribution.html#reusable-science-step-by-step-5",
    "title": "Getting Started",
    "section": "Reusable science, step by step",
    "text": "Reusable science, step by step\n\nThis is already better than having everything in a single massive file!\nHowever, now things are tied to this relative path on your computer:\n\n# Make ./code/utils.py visible to sys.path\nsys.path.insert(1, str(Path(__file__).parent / \"code\"))\nfrom utils import rosen, rosen_der\n\nand are brittle to refactoring and change; plus, not very portable to others.\n\n\nBut we can do better!",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#next-steps-packaging-your-code",
    "href": "packaging-distribution.html#next-steps-packaging-your-code",
    "title": "Getting Started",
    "section": "Next steps: packaging your code",
    "text": "Next steps: packaging your code\n\nThe goal is for your code to be installable, and distributable.\nPer the Zen of Python, this should be straightforward, right?\n\n$ python3 -c 'import this' | grep obvious\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#next-steps-packaging-your-code-1",
    "href": "packaging-distribution.html#next-steps-packaging-your-code-1",
    "title": "Getting Started",
    "section": "Next steps: packaging your code",
    "text": "Next steps: packaging your code\nUnfortunately, not so much. 😔\n\n\n\n\nYou might be asking: Why is there more than one thing?",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#next-steps-packaging-your-code-2",
    "href": "packaging-distribution.html#next-steps-packaging-your-code-2",
    "title": "Getting Started",
    "section": "Next steps: packaging your code",
    "text": "Next steps: packaging your code\nThe good news: Python packaging has improved dramatically in the last 5 years\n\nIt has never been easier to just point your package manager to some code locally, or on the internet, and get working Python code installed and running on your machine regardless of operating system or architecture\nThis is a small miracle!\n\n\nThe bad news: Python packaging has expanded dramatically in the last 5 years\n\n\n\nBy creating standards the PyPA allowed for an ecosystem of packaging backends to be created to tackle various problems (this is good!)\nThis means that our The Zen of Python expectations are violated and we need to make design choices (hard for beginners)",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#next-steps-packaging-your-code-3",
    "href": "packaging-distribution.html#next-steps-packaging-your-code-3",
    "title": "Getting Started",
    "section": "Next steps: packaging your code",
    "text": "Next steps: packaging your code\nThe okay news: You can probably default to the simplest thing.\n\npure Python: Probably hatch\ncompiled extensions: Probably setuptools + pybind11 or scikit-build-core + pybind11\n\n\n\n\n\n\nPython Packaging User Guide, Packaging Python Projects Tutorial\n\n\n\n\n\n\nScientific Python Library Development Guide",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#simple-packaging-example",
    "href": "packaging-distribution.html#simple-packaging-example",
    "title": "Getting Started",
    "section": "Simple packaging example",
    "text": "Simple packaging example\nModern PEP 518 compliant build backends just need a single file: pyproject.toml\n$ tree simple_packaging\nsimple-packaging\n├── LICENSE\n├── README.md\n├── pyproject.toml\n├── src\n│   └── rosen\n│       ├── __init__.py\n│       ├── _version.py\n│       └── example.py\n└── tests\n    └── test_example.py\n\n4 directories, 7 files",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#simple-packaging-example-pyproject.toml",
    "href": "packaging-distribution.html#simple-packaging-example-pyproject.toml",
    "title": "Getting Started",
    "section": "Simple packaging example: pyproject.toml",
    "text": "Simple packaging example: pyproject.toml\nWhat is .toml?\n\n“TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. TOML is designed to map unambiguously to a hash table. TOML should be easy to parse into data structures in a wide variety of languages.” — https://toml.io/ (emphasis mine)\n\nIn recent years TOML has seen a rise in popularity for configuration files and lock files. Things that need to be easy to read (humans) and easy to parse (machines).",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#simple-packaging-example-pyproject.toml-1",
    "href": "packaging-distribution.html#simple-packaging-example-pyproject.toml-1",
    "title": "Getting Started",
    "section": "Simple packaging example: pyproject.toml",
    "text": "Simple packaging example: pyproject.toml\nDefining how your project should get built:\n[build-system]\nrequires = [\n    \"hatchling&gt;=1.13.0\",\n    \"hatch-vcs&gt;=0.3.0\",\n]\nbuild-backend = \"hatchling.build\"\n...",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#simple-packaging-example-pyproject.toml-2",
    "href": "packaging-distribution.html#simple-packaging-example-pyproject.toml-2",
    "title": "Getting Started",
    "section": "Simple packaging example: pyproject.toml",
    "text": "Simple packaging example: pyproject.toml\nDefining project metadata and requirements/dependencies:\n[project]\nname = \"rosen\"\ndynamic = [\"version\"]\ndescription = \"Example package for demonstration\"\nreadme = \"README.md\"\nlicense = { text = \"BSD-3-Clause\" }  # SPDX short identifier\nauthors = [\n  { name = \"Kyle Niemeyer\", email = \"kyle.niemeyer@oregonstate.edu\" },\n]\nrequires-python = \"&gt;=3.8\"\n\ndependencies = [\n    \"scipy&gt;=1.6.0\",\n    \"numpy\",  # compatible versions controlled through scipy\n]\n...",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#simple-packaging-example-pyproject.toml-3",
    "href": "packaging-distribution.html#simple-packaging-example-pyproject.toml-3",
    "title": "Getting Started",
    "section": "Simple packaging example: pyproject.toml",
    "text": "Simple packaging example: pyproject.toml\nConfiguring tooling options and interactions with other tools:\n[tool.hatch.version]\nsource = \"vcs\"\n\n[tool.hatch.version.raw-options]\nlocal_scheme = \"no-local-version\"\n# Need to give root as we aren't at the same level as the git repo\nroot = \"..\"\n\n[tool.hatch.build.hooks.vcs]\nversion-file = \"src/rosen/_version.py\"\n...",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#simple-packaging-example-installing-your-code",
    "href": "packaging-distribution.html#simple-packaging-example-installing-your-code",
    "title": "Getting Started",
    "section": "Simple packaging example: Installing your code",
    "text": "Simple packaging example: Installing your code\nYou can now locally install your package into your Python virtual environment!\n$ cd simple_packaging\n$ pip install --upgrade pip wheel\n$ pip install .\nSuccessfully built rosen\nInstalling collected packages: rosen\nSuccessfully installed rosen-0.0.2.dev1\n$ pip show rosen\nName: rosen\nVersion: 0.0.2.dev1\nSummary: Example package for demonstration\nHome-page: https://github.com/SoftwareDevEngResearch/packaging-examples\nAuthor: \nAuthor-email: Kyle Niemeyer &lt;kyle.niemeyer@oregonstate.edu&gt;\nLicense: BSD-3-Clause\nLocation: ***/.venv/lib/python3.13/site-packages\nRequires: numpy, scipy\nRequired-by:",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#simple-packaging-example-installing-your-code-1",
    "href": "packaging-distribution.html#simple-packaging-example-installing-your-code-1",
    "title": "Getting Started",
    "section": "Simple packaging example: Installing your code",
    "text": "Simple packaging example: Installing your code\nand use it anywhere\n# example.py\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# We can now import our code\nfrom rosen.example import rosen, rosen_der\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nresult = minimize(rosen, x0, method=\"BFGS\",\n                  jac=rosen_der, options={\"disp\": True})\noptimized_params = result.x\n# array([1.00000004, 1.0000001 , 1.00000021, 1.00000044, 1.00000092])",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#packaging-doesnt-slow-down-development",
    "href": "packaging-distribution.html#packaging-doesnt-slow-down-development",
    "title": "Getting Started",
    "section": "Packaging doesn’t slow down development",
    "text": "Packaging doesn’t slow down development\nPEP 518 compliant build backends allow for “editable installs”\n$ python -m pip install --upgrade --editable .\n$ python -m pip show rosen | grep --ignore-case 'location'\nLocation: ***/lib/python3.12/site-packages\nEditable project location: ***/examples/simple_packaging\n\nEditable installs add the files in the development directory to Python’s import path. (Only need to re-installation if you change the project metadata.)\n\n\nCan develop your code under src/ and have immediate access to it.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#packaging-compiled-extensions",
    "href": "packaging-distribution.html#packaging-compiled-extensions",
    "title": "Getting Started",
    "section": "Packaging compiled extensions",
    "text": "Packaging compiled extensions\nWith modern packaging infrastructure, packaging compiled extensions requires small extra work!\n$ tree compiled_packaging\ncompiled-packaging\n├── CMakeLists.txt\n├── LICENSE\n├── README.md\n├── pyproject.toml\n├── src\n│   ├── basic_math.cpp\n│   └── rosen_cpp\n│       ├── __init__.py\n│       └── example.py\n└── tests\n    └── test_example.py\n\n4 directories, 8 files",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#packaging-compiled-extensions-1",
    "href": "packaging-distribution.html#packaging-compiled-extensions-1",
    "title": "Getting Started",
    "section": "Packaging compiled extensions",
    "text": "Packaging compiled extensions\nIn pyproject.toml:\nSwap build system to scikit-build-core + pybind11\n[build-system]\nrequires = [\n  \"scikit-build-core\",\n  \"pybind11\"\n  ]\nbuild-backend = \"scikit_build_core.build\"\n...",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#packaging-compiled-extensions-2",
    "href": "packaging-distribution.html#packaging-compiled-extensions-2",
    "title": "Getting Started",
    "section": "Packaging compiled extensions",
    "text": "Packaging compiled extensions\nCMakeLists.txt:\n# Specify CMake version and project language\ncmake_minimum_required(VERSION 3.15...3.30)\nproject(${SKBUILD_PROJECT_NAME} LANGUAGES CXX)\n\n# Setup pybind11\nset(PYBIND11_FINDPYTHON ON)\nfind_package(pybind11 CONFIG REQUIRED)\n\n# Add the pybind11 module to build targets\npybind11_add_module(basic_math MODULE src/basic_math.cpp)\ninstall(TARGETS basic_math DESTINATION ${SKBUILD_PROJECT_NAME})",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#packaging-compiled-extensions-3",
    "href": "packaging-distribution.html#packaging-compiled-extensions-3",
    "title": "Getting Started",
    "section": "Packaging compiled extensions",
    "text": "Packaging compiled extensions\nsrc/basic_math.cpp:\n#include &lt;pybind11/pybind11.h&gt;\n\nint add(int i, int j) { return i + j; }\n\nnamespace py = pybind11;\n\nPYBIND11_MODULE(basic_math, m) {\n  m.def(\"add\", &add, R\"pbdoc(\n      Add two numbers\n  )pbdoc\");\n...\n\n}",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#packaging-compiled-extensions-installing",
    "href": "packaging-distribution.html#packaging-compiled-extensions-installing",
    "title": "Getting Started",
    "section": "Packaging compiled extensions: Installing",
    "text": "Packaging compiled extensions: Installing\nInstalling locally is the same as for the pure-Python example:\n$ cd simple_packaging\n$ pip install --upgrade pip wheel\n$ pip install .\nSuccessfully built rosen-cpp\nInstalling collected packages: rosen-cpp\nSuccessfully installed rosen-cpp-0.0.1\nModule name is that given in C++:\nfrom rosen_cpp import basic_math\nbasic_math.add(1, 2)\n# 3",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#going-further-distributing-packages",
    "href": "packaging-distribution.html#going-further-distributing-packages",
    "title": "Getting Started",
    "section": "Going further: Distributing packages",
    "text": "Going further: Distributing packages\nIf your code is publicly available on the WWW in a Git repository, you’ve already done a version of distribution!\n# pip install \"git+https://example.com/repo/project.git@branch#subdirectory=path\"\n$ pip install \\\n  \"git+https://github.com/SoftwareDevEngResearch/packaging-examples.git#subdirectory=simple_packaging\"\n# Works for pure-Python packages\n$ pip install --upgrade \"git+https://github.com/scikit-hep/pyhf.git\"\n# as well as packages with compiled extensions\n$ pip install --upgrade \"git+https://github.com/scikit-hep/iminuit.git\"",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#going-further-distributing-packages-1",
    "href": "packaging-distribution.html#going-further-distributing-packages-1",
    "title": "Getting Started",
    "section": "Going further: Distributing packages",
    "text": "Going further: Distributing packages\nIdeally, we’d prefer a more organized approach: distribution through a package index.\n\nFirst, we need to create distributions of our packaged code.\n\n\nDistributions that pip can install:\n\nsource distribution (sdist): A tarfile (.tar.gz) of the source files of our package (subset of all the files in the repository)\nwheel: A zipfile (.whl) of the file system structure and package metadata with any dependencies prebuilt. No arbitrary code execution, only decompressing and copying of files",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#going-further-distributing-packages-2",
    "href": "packaging-distribution.html#going-further-distributing-packages-2",
    "title": "Getting Started",
    "section": "Going further: Distributing packages",
    "text": "Going further: Distributing packages\nTo create these distributions from source code, rely on our package build backend (e.g., hatchling) and build frontend tool like build\n$ pip install --upgrade build\n$ python -m build .\n* Creating venv isolated environment...\n* Installing packages in isolated environment... (hatch-vcs&gt;=0.3.0, hatchling&gt;=1.13.0)\n* Getting build dependencies for sdist...\n* Building sdist...\n* Building wheel from sdist\n* Creating venv isolated environment...\n* Installing packages in isolated environment... (hatch-vcs&gt;=0.3.0, hatchling&gt;=1.13.0)\n* Getting build dependencies for wheel...\n* Building wheel...\nSuccessfully built rosen-0.0.1.tar.gz and rosen-0.0.1-py3-none-any.whl\n$ ls dist\nrosen-0.0.1-py3-none-any.whl  rosen-0.0.1.tar.gz",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#going-further-distributing-packages-3",
    "href": "packaging-distribution.html#going-further-distributing-packages-3",
    "title": "Getting Started",
    "section": "Going further: Distributing packages",
    "text": "Going further: Distributing packages\nWe can now securely upload the distributions under ./dist/ to any package index that understands how to use them.\n\nThe most common is the Python Package Index (PyPI), which serves as the default package index for pip.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#distributing-packages-conda-forge",
    "href": "packaging-distribution.html#distributing-packages-conda-forge",
    "title": "Getting Started",
    "section": "Distributing packages: conda-forge",
    "text": "Distributing packages: conda-forge\nThe conda family of package managers (conda, mamba, micromamba, pixi) take an alternative approach from pip.\n\nInstead of installing Python packages, they act as general purpose package managers and install all dependencies (including Python) as OS and architecture specific built binaries (.conda files — zipfile containing compressed tar files) hosted on conda-forge.\n\n\nThis allows an additional level of runtime environment specification not possible with just pip, though getting environment solves right can become more complicated.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#distributing-packages-conda-forge-1",
    "href": "packaging-distribution.html#distributing-packages-conda-forge-1",
    "title": "Getting Started",
    "section": "Distributing packages: conda-forge",
    "text": "Distributing packages: conda-forge\nPopular in scientific computing as arbitrary binaries can be hosted, including compilers (e.g., gcc, Fortran) and even the full NVIDIA CUDA stack!\n\nWith the change to full binaries only this also requires that specification of the environment being installed is important.\n\n\nWith sdists and wheels, if there is no compatible wheel available, pip will automatically fall back to trying to locally build from the sdist. Can’t do that if there is no matching .conda binary!",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#semantic-versioning",
    "href": "packaging-distribution.html#semantic-versioning",
    "title": "Getting Started",
    "section": "Semantic Versioning",
    "text": "Semantic Versioning\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\nMAJOR version when you make incompatible API changes,\nMINOR version when you add functionality in a backwards-compatible manner, and\nPATCH version when you make backwards-compatible bug fixes.\n\n\nTo start: initial development release starts at 0.0.1, and increment minor version for subsequent releases.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#versioning-with-hatch-git",
    "href": "packaging-distribution.html#versioning-with-hatch-git",
    "title": "Getting Started",
    "section": "Versioning with hatch & git",
    "text": "Versioning with hatch & git\nWe actually already set up our hatch build system to automatically version our package based on git:\n[tool.hatch.version]\nsource = \"vcs\"\n\n[tool.hatch.version.raw-options]\nlocal_scheme = \"no-local-version\"\n# Need to give root as we aren't at the same level as the git repo\nroot = \"..\"\n\n[tool.hatch.build.hooks.vcs]\nversion-file = \"src/rosen/_version.py\"\n...\n\nThis tells hatch to look at the latest git tag and use that as the version number, stored in the automatically generated file src/rosen/_version.py.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#versioning-with-hatch-git-1",
    "href": "packaging-distribution.html#versioning-with-hatch-git-1",
    "title": "Getting Started",
    "section": "Versioning with hatch & git",
    "text": "Versioning with hatch & git\nTo document a new version, simply create a new git tag:\n$ git tag v0.x.y -m \"version 0.x.y\"\n$ git push --tags\n\nThis will automatically update the version number in src/rosen/_version.py when next building the package.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "packaging-distribution.html#good-idea-keep-a-changelog",
    "href": "packaging-distribution.html#good-idea-keep-a-changelog",
    "title": "Getting Started",
    "section": "Good idea: keep a CHANGELOG",
    "text": "Good idea: keep a CHANGELOG\nUse a CHANGELOG file to document changes in your package over time.\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.0.2] - 2014-07-10\n### Added\n- Explanation of the recommended reverse chronological release ordering.\n\n## 0.0.1 - 2014-05-31\n### Added\n- This CHANGELOG file to hopefully serve as an evolving example of a\n  standardized open source project CHANGELOG.\n- CNAME file to enable GitHub Pages custom domain\n- README now contains answers to common questions about CHANGELOGs\n- Good examples and basic guidelines, including proper date formatting.\n- Counter-examples: \"What makes unicorns cry?\"\n\n[Unreleased]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.2...HEAD\n[0.0.2]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.1...v0.0.2",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Software Development for Research",
    "section": "",
    "text": "This online resource contains lecture materials from the Oregon State University course ENGR 570 “Software Development for Research”, created by Prof. Kyle Niemeyer.\nThis material is shared openly via the CC BY 4.0 license, and was develoepd using Quarto.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "managing-environment-revealjs.html#power-of-python-for-research-comes-from-rich-ecosystem-of-third-party-packages",
    "href": "managing-environment-revealjs.html#power-of-python-for-research-comes-from-rich-ecosystem-of-third-party-packages",
    "title": "Managing your computational environment",
    "section": "Power of Python for research comes from rich ecosystem of third-party packages",
    "text": "Power of Python for research comes from rich ecosystem of third-party packages\n\nThese include general numerical and scientific tools like NumPy, SciPy, and Pandas, and domain-specific software like Cantera. You should rely on mature packages that provide useful features when possible—don’t reinvent the wheel!\n\n\nBut, each software package has its own set of dependencies, and might require a specific version of some other package (like when a newer version breaks or changes some functionality)."
  },
  {
    "objectID": "managing-environment-revealjs.html#your-results-may-depend-on-the-specific-versions-and-combination-of-packages-you-have-installed.",
    "href": "managing-environment-revealjs.html#your-results-may-depend-on-the-specific-versions-and-combination-of-packages-you-have-installed.",
    "title": "Managing your computational environment",
    "section": "Your results may depend on the specific versions and combination of packages you have installed.",
    "text": "Your results may depend on the specific versions and combination of packages you have installed.\n\nThis is particularly important for research analysis."
  },
  {
    "objectID": "managing-environment-revealjs.html#as-a-rule-dont-install-packages-into-your-global-environment",
    "href": "managing-environment-revealjs.html#as-a-rule-dont-install-packages-into-your-global-environment",
    "title": "Managing your computational environment",
    "section": "🚨 As a rule, don’t install packages into your global environment!",
    "text": "🚨 As a rule, don’t install packages into your global environment!\n\n… even if the documentation says pip install x"
  },
  {
    "objectID": "managing-environment-revealjs.html#best-practice-use-virtual-environments",
    "href": "managing-environment-revealjs.html#best-practice-use-virtual-environments",
    "title": "Managing your computational environment",
    "section": "Best practice: use virtual environments",
    "text": "Best practice: use virtual environments\n\nVirtual environments are lightweight installations of packages in a particular location (like in your working directory or project project) that build on top of your system Python installation.\nVirtual environments isolate the set of dependencies for a project or package from each other, and from your system configuration.\nThese are intended to be easy to set up, disposable, and replaceable."
  },
  {
    "objectID": "managing-environment-revealjs.html#creating-and-activating-a-virtual-environment",
    "href": "managing-environment-revealjs.html#creating-and-activating-a-virtual-environment",
    "title": "Managing your computational environment",
    "section": "Creating and activating a virtual environment",
    "text": "Creating and activating a virtual environment\npython3 -m venv .venv\n\nThis creates a new directory .venv with:\n\n\n.venv/bin with link to Python, pip, and activation scripts; and\n.venv/lib/site-packages where packages will be installed."
  },
  {
    "objectID": "managing-environment-revealjs.html#installing-packages",
    "href": "managing-environment-revealjs.html#installing-packages",
    "title": "Managing your computational environment",
    "section": "Installing packages",
    "text": "Installing packages\npip install &lt;package&gt;"
  },
  {
    "objectID": "managing-environment-revealjs.html#pip-family",
    "href": "managing-environment-revealjs.html#pip-family",
    "title": "Managing your computational environment",
    "section": "pip family",
    "text": "pip family\nTools that all work similarly to venv:\n\nvenv: comes with Python, simple\nvirtualenv: installable package with same interface as venv, but faster and with more options\nuv: written in Rust and extremely fast"
  },
  {
    "objectID": "managing-environment-revealjs.html#conda-family",
    "href": "managing-environment-revealjs.html#conda-family",
    "title": "Managing your computational environment",
    "section": "Conda family",
    "text": "Conda family\n\nConda is an open-source tool for managing virtual environments across your system, originally designed for Python package management but now supports a wide range of software (e.g., compiled C++ dependencies).\n\n\nVirtual environments created with Conda are not location-dependent like venv, but the same approach applies: do not install in the base/default environment.\n\n\nConda is recommended if you expect to need non-Python dependencies."
  },
  {
    "objectID": "managing-environment-revealjs.html#section",
    "href": "managing-environment-revealjs.html#section",
    "title": "Managing your computational environment",
    "section": "",
    "text": "conda config --set auto_activate_base false  # turn off the default environment\nconda env create -n some_name  # or use paths with `-p`\nconda activate some_name\nconda deactivate"
  },
  {
    "objectID": "managing-environment-revealjs.html#conda-based-package-managers",
    "href": "managing-environment-revealjs.html#conda-based-package-managers",
    "title": "Managing your computational environment",
    "section": "Conda-based package managers",
    "text": "Conda-based package managers\nSome alternatives to conda exist and offer some advantages, including speed:\n\nMiniconda: minimal Conda installation without all the packages that come with the full Anaconda distribution\nPixi: fast, Rust-based package manager and workflow tool Some other\nMicromamba: tiny version of Mamba, statically linked C++ binary"
  },
  {
    "objectID": "managing-environment.html",
    "href": "managing-environment.html",
    "title": "Managing your computational environment",
    "section": "",
    "text": "These include general numerical and scientific tools like NumPy, SciPy, and Pandas, and domain-specific software like Cantera. You should rely on mature packages that provide useful features when possible—don’t reinvent the wheel!\n\n\nBut, each software package has its own set of dependencies, and might require a specific version of some other package (like when a newer version breaks or changes some functionality).\n\n\n\n\n\nThis is particularly important for research analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\nVirtual environments are lightweight installations of packages in a particular location (like in your working directory or project project) that build on top of your system Python installation.\nVirtual environments isolate the set of dependencies for a project or package from each other, and from your system configuration.\nThese are intended to be easy to set up, disposable, and replaceable.\n\n\n\nOn a Mac or Linux machine, I recommend using the built-in venv module to create a virtual environment for your work, then install inside that using the pip installer.\nOn Windows, your best bet is probably the Anaconda Distribution. Anaconda comes with hundreds of scientific packages already, and also lets you set up system-wide virtual environments.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#power-of-python-for-research-comes-from-rich-ecosystem-of-third-party-packages",
    "href": "managing-environment.html#power-of-python-for-research-comes-from-rich-ecosystem-of-third-party-packages",
    "title": "Managing your computational environment",
    "section": "",
    "text": "These include general numerical and scientific tools like NumPy, SciPy, and Pandas, and domain-specific software like Cantera. You should rely on mature packages that provide useful features when possible—don’t reinvent the wheel!\n\n\nBut, each software package has its own set of dependencies, and might require a specific version of some other package (like when a newer version breaks or changes some functionality).",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#your-results-may-depend-on-the-specific-versions-and-combination-of-packages-you-have-installed.",
    "href": "managing-environment.html#your-results-may-depend-on-the-specific-versions-and-combination-of-packages-you-have-installed.",
    "title": "Managing your computational environment",
    "section": "",
    "text": "This is particularly important for research analysis.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#best-practice-use-virtual-environments",
    "href": "managing-environment.html#best-practice-use-virtual-environments",
    "title": "Managing your computational environment",
    "section": "",
    "text": "Virtual environments are lightweight installations of packages in a particular location (like in your working directory or project project) that build on top of your system Python installation.\nVirtual environments isolate the set of dependencies for a project or package from each other, and from your system configuration.\nThese are intended to be easy to set up, disposable, and replaceable.\n\n\n\nOn a Mac or Linux machine, I recommend using the built-in venv module to create a virtual environment for your work, then install inside that using the pip installer.\nOn Windows, your best bet is probably the Anaconda Distribution. Anaconda comes with hundreds of scientific packages already, and also lets you set up system-wide virtual environments.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#creating-and-activating-a-virtual-environment",
    "href": "managing-environment.html#creating-and-activating-a-virtual-environment",
    "title": "Managing your computational environment",
    "section": "Creating and activating a virtual environment",
    "text": "Creating and activating a virtual environment\npython3 -m venv .venv\n\nThis creates a new directory .venv with:\n\n\n.venv/bin with link to Python, pip, and activation scripts; and\n.venv/lib/site-packages where packages will be installed.\n\n\n\nTo activate the environment, source the activation script:\n\nsource .venv/bin/activate\n\n\n\n\n\n\nTip\n\n\n\nTry this yourself. .venv/bin will be added to your PATH, and your shell will usually indicate you are “in” a virtual environment.\n\n\n\nTo leave the virtual environment, run the deactivate function:\n\ndeactivate\n\n\n\n\n\n\nNote\n\n\n\nClosing/terminating your shell will automatically deactivate the virtual environment, and you’ll need to manually activate whenever you start a new session.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#installing-packages",
    "href": "managing-environment.html#installing-packages",
    "title": "Managing your computational environment",
    "section": "Installing packages",
    "text": "Installing packages\npip install &lt;package&gt;",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#pip-family",
    "href": "managing-environment.html#pip-family",
    "title": "Managing your computational environment",
    "section": "pip family",
    "text": "pip family\nTools that all work similarly to venv:\n\nvenv: comes with Python, simple\nvirtualenv: installable package with same interface as venv, but faster and with more options\nuv: written in Rust and extremely fast\n\n\nIn addition, there are project management tools that both handle environments, packaging, production, etc.:\n\nHatch\nPoetry\nPipenv\n\n\nThese work a bit differently, but can be quite powerful particularly for locking specific versions of dependencies. Consider returning to these when we are thinking about packaging and distribution.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#conda-family",
    "href": "managing-environment.html#conda-family",
    "title": "Managing your computational environment",
    "section": "Conda family",
    "text": "Conda family\n\nConda is an open-source tool for managing virtual environments across your system, originally designed for Python package management but now supports a wide range of software (e.g., compiled C++ dependencies).\n\n\nVirtual environments created with Conda are not location-dependent like venv, but the same approach applies: do not install in the base/default environment.\n\n\nConda is recommended if you expect to need non-Python dependencies.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#section",
    "href": "managing-environment.html#section",
    "title": "Managing your computational environment",
    "section": "",
    "text": "conda config --set auto_activate_base false  # turn off the default environment\nconda env create -n some_name  # or use paths with `-p`\nconda activate some_name\nconda deactivate",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#conda-based-package-managers",
    "href": "managing-environment.html#conda-based-package-managers",
    "title": "Managing your computational environment",
    "section": "Conda-based package managers",
    "text": "Conda-based package managers\nSome alternatives to conda exist and offer some advantages, including speed:\n\nMiniconda: minimal Conda installation without all the packages that come with the full Anaconda distribution\nPixi: fast, Rust-based package manager and workflow tool Some other\nMicromamba: tiny version of Mamba, statically linked C++ binary",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "classes-objects.html",
    "href": "classes-objects.html",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Classes: organize data, methods, and functions\n\n\nObjects: manifestations of classes\n\n\nWe can use object-oriented programming to cleanly organize behaviors and data in our code.\n\n\n\n\n\nIt provides a framework for classifying distinct concepts into comprehensible sizes. These smaller conceptual units facilitate cleaner, more scalable modeling.\n\n\n\n\n\nClasses and objects combine functions with data to make both easier to manage.\nA class defines the behaviors of a new kind of thing, while an object is a particular thing.\nClasses have constructors that describe how to create a new object of a particular kind.\nAn interface describes what an object can do; an implementation defines how.\nOne class can inherit from another and override just those things that it wants to change.\n\n\n\n\n\nEncapsulation is the property of owning data\nInheritance establishes a relationship hierarchy between models\nPolymorphism allows for models to customize their own behavior even when they are based on other models",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#brief-intro-to-object-oriented-programming",
    "href": "classes-objects.html#brief-intro-to-object-oriented-programming",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Classes: organize data, methods, and functions\n\n\nObjects: manifestations of classes\n\n\nWe can use object-oriented programming to cleanly organize behaviors and data in our code.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-orientation",
    "href": "classes-objects.html#object-orientation",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "It provides a framework for classifying distinct concepts into comprehensible sizes. These smaller conceptual units facilitate cleaner, more scalable modeling.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-orientation-1",
    "href": "classes-objects.html#object-orientation-1",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Classes and objects combine functions with data to make both easier to manage.\nA class defines the behaviors of a new kind of thing, while an object is a particular thing.\nClasses have constructors that describe how to create a new object of a particular kind.\nAn interface describes what an object can do; an implementation defines how.\nOne class can inherit from another and override just those things that it wants to change.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-orientation-2",
    "href": "classes-objects.html#object-orientation-2",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Encapsulation is the property of owning data\nInheritance establishes a relationship hierarchy between models\nPolymorphism allows for models to customize their own behavior even when they are based on other models",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-example-integers",
    "href": "classes-objects.html#object-example-integers",
    "title": "Brief intro to object-oriented programming",
    "section": "Object example: integers",
    "text": "Object example: integers\na = 1\nhelp(a) # gives info about the object\ndir(a) # gives list of data and behaviors associated with class",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-example-integers-1",
    "href": "classes-objects.html#object-example-integers-1",
    "title": "Brief intro to object-oriented programming",
    "section": "Object example: integers",
    "text": "Object example: integers\na = 1\nhelp(a) # gives info about the object\ndir(a) # gives list of data and behaviors associated with class\n\n\nWhat do double underscores around __abs__ mean?\n\nFrom PEP8: “magic objects or attributes that live in user-controlled namespaces. E.g., __init__, __import__, or __file__. Never invent such names; only use them as documented.”\n\nGenerally don’t call dunder methods directly; instead, use built-in functions.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#what-about-functions",
    "href": "classes-objects.html#what-about-functions",
    "title": "Brief intro to object-oriented programming",
    "section": "… what about functions?",
    "text": "… what about functions?\nimport math\ndir(math.sin)\n\nEven functions are objects!",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#what-about-classes",
    "href": "classes-objects.html#what-about-classes",
    "title": "Brief intro to object-oriented programming",
    "section": "What about classes?",
    "text": "What about classes?\n\nClasses define logical collections of attributes and methods describing a kind of object, and how to create objects of that kind.\n\n\nChoose classes to encapsulate internal data and functions for different types of objects.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#example-particle-physics",
    "href": "classes-objects.html#example-particle-physics",
    "title": "Brief intro to object-oriented programming",
    "section": "Example: particle physics",
    "text": "Example: particle physics\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\"\"\"\n    # class body definition here\n\nWhat else do classes include?\n\n\nClass variables\nConstructors\nMethods",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#elementary-particles",
    "href": "classes-objects.html#elementary-particles",
    "title": "Brief intro to object-oriented programming",
    "section": "Elementary particles",
    "text": "Elementary particles",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#class-variables",
    "href": "classes-objects.html#class-variables",
    "title": "Brief intro to object-oriented programming",
    "section": "Class variables",
    "text": "Class variables\n\nData universally applicable to all objects of the class\n\n# contents of particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\"\"\"\n    # class body definition here\n    roar = \"I am a particle!\"\n# import particle module\nimport particle as p\nprint(p.Particle.roar)\n# create instance of Particle\nimport particle as p\nhiggs = p.Particle()\nprint(higgs.roar)\nClass variables can get a bit confusing; if you modify the variable associated with an object, it becomes an instance variable. For example:\nclass Particle(object):\n    spin = 0\n\n    def init(self, charge, mass):\n        self.charge = charge\n        self.mass = mass\nHere, spin is a class variable while charge and mass are instance variables. Creating two particles:\np1 = Particle(1, 1)\np2 = Particle(-1, 1)\n\nprint(p1.spin)\nprint(p2.spin)\nwe’ll get\n0\n0\nIf we change spin for p1 only, it modifies the value just for that instance:\np1.spin = 0.5\nprint(p1.spin)\nprint(p2.spin)\ngiving\n0.5\n0\nHowever, in general spin is still a class variable, and we can modify it for the whole class:\nParticle.spin = -0.5\nprint(p1.spin)\nprint(p2.spin)\nwhich gives\n0.5\n-0.5\nSo, for p1, spin has become an instance variable, but p2 still points to the class variable.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#instance-variables",
    "href": "classes-objects.html#instance-variables",
    "title": "Brief intro to object-oriented programming",
    "section": "Instance variables",
    "text": "Instance variables\n\nData with different values for each instance of the class\n\n\nExample: particle position.\n\nimport particle as p\n# create empty list to hold observed particle data\nobs = []\n# append first particle\nobs.append(p.Particle())\n# assign its position\nobs[0].r = {'x': 100.0, 'y': 38.0, 'z': -42.0}\n# append second particle and assign its position\nobs.append(p.Particle())\nobs[1].r = {'x': 0.01, 'y': 99.0, 'z': 32.0}\n# print positions of each particle\nprint(obs[0].r)\nprint(obs[1].r)",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#instance-variables-1",
    "href": "classes-objects.html#instance-variables-1",
    "title": "Brief intro to object-oriented programming",
    "section": "Instance variables",
    "text": "Instance variables\n\nUsing instance variables, we can store all data associated with a particle observation (position, mass, charge, spin, etc.) without much more complexity\n\n\n(Hopefully the value of this reduced complexity is obvious.)\n\n\nHow to accomplish in class definition? Constructor: __init()__ function.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#constructors",
    "href": "classes-objects.html#constructors",
    "title": "Brief intro to object-oriented programming",
    "section": "Constructors",
    "text": "Constructors\n\nConstructor: __init__() function, executed upon instantiation of object.\n\n\nConstructor not required; every class inherits default constructor from object.\n\n\nTip: good to initialize all instance variables in constructor, to ensure they are initialized when you need them.\n\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self):\n        \"\"\"Initializes the particle with default values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = 0\n        self.m = 0\n        self.r = {'x': 0, 'y': 0, 'z': 0}\n\nself argument required since function is method; binds to specific instance of the class.\n\n\n\nMore efficient: specify data values upon initialization:\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#methods",
    "href": "classes-objects.html#methods",
    "title": "Brief intro to object-oriented programming",
    "section": "Methods",
    "text": "Methods\n\nMethods: functions tied to a class definition; may operate on data contained by object.\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n\n\nExample: proton\n\nfrom scipy import constants\nimport particle as p\n\nm_p = constants.m_p\nr_p = {'x': 1, 'y': 1, 'z': 53}\na_p = p.Particle(1, m_p, r_p)\na_p.hear_me()\n\n\nMethods can alter instance variables. Example: Quark class with instance variable flavor.\n\ndef flip(self):\n    \"\"\"Flip quark's flavor to complementary flavor.\n    \"\"\"\n    if self.flavor == \"up\":\n        self.flavor = \"down\"\n    elif self.flavor == \"down\":\n        self.flavor = \"up\"\n    elif self.flavor == \"top\":\n        self.flavor = \"bottom\"\n    elif self.flavor == \"bottom\":\n        self.flavor = \"top\"\n    elif self.flavor == \"strange\":\n        self.flavor = \"charm\"\n    elif self.flavor == \"charm\":\n        self.flavor = \"strange\"\n    else:\n        raise AttributeError(\"The quark cannot be flipped, because the flavor is invalid.\")\n\nfrom quark import Quark\n\nt = Quark()\nt.flavor = \"top\"\nt.flip()\nprint(t.flavor)\n\n\nParticle capture relationship between uncertainty in momentum and uncertainty in position:\n\\[ \\Delta x \\Delta p_x \\geq \\frac{\\hbar}{2} \\]\n\nfrom scipy import constants\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...\n\n    def delta_x_min(self, delta_p_x):\n        \"\"\"Returns minimum possible value of Δx\n        \"\"\"\n        hbar = constants.hbar\n        delx_min = hbar / (2.0 * delta_p_x)\n        return delx_min",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#static-methods",
    "href": "classes-objects.html#static-methods",
    "title": "Brief intro to object-oriented programming",
    "section": "Static methods",
    "text": "Static methods\n\nExample: Quark class can include function that lists all possible values of flavor; possible values are static irrespective of specific instance.\n\ndef possible_flavors():\n    return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]\n\nUse @staticmethod decorator to define a method not bound to object.\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n\n    # ... other parts of class definition ...\n\n    @staticmethod\n    def possible_flavors():\n        return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#duck-typing",
    "href": "classes-objects.html#duck-typing",
    "title": "Brief intro to object-oriented programming",
    "section": "Duck typing",
    "text": "Duck typing\n\n“When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”\n\n\nMeaning: Python does not explicitly check for object types like other languages. It only checks for behavior when a method is called or attribute accessed.\n\n\nIf different object types both “quack like a duck”, then it treats them like a duck. An object does not need to be of a certain type in order for its methods to be invoked; must merely possess those method.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#section",
    "href": "classes-objects.html#section",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Example: all particles with a valid c attribute for charge can be used identically.\n\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        tot += p.c\n    return tot\np = Proton()\ne1 = Electron()\ne2 = Electrion()\nparticles = [p, e1, e2]\ntotal_charge(particles)\n# overrule duck typing when inconvenient\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        if isinstance(p, Particle):\n            tot += p.c\n    return tot",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#polymorphism",
    "href": "classes-objects.html#polymorphism",
    "title": "Brief intro to object-oriented programming",
    "section": "Polymorphism",
    "text": "Polymorphism\n\nWhen class inherits attributes of a parent class. General rule: what works for parent class should work for subclass (plus specialized behavior).\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\n# composite.py\nclass CompositeParticle(Particle):\n    \"\"\"Particles like protons and neutrons, composed of elementary particles\n    but don't share attributes.\n    \"\"\"\n\n    def __init__(self, parts):\n        self.constituents = parts",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#subclasses",
    "href": "classes-objects.html#subclasses",
    "title": "Brief intro to object-oriented programming",
    "section": "Subclasses",
    "text": "Subclasses\n\nElementaryParticle and CompositeParticle are Particle objects, and thus have (inherit) all of the functions and data of the original class.\n\n\nWe can override that data and those behaviors if desired.\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\nfrom elementary import ElementaryParticle\np = ElementaryParticle(1.5)\np.s\np.hear_me()",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#superclasses",
    "href": "classes-objects.html#superclasses",
    "title": "Brief intro to object-oriented programming",
    "section": "Superclasses",
    "text": "Superclasses\n\nAny class, including a subclass, can be a superclass or parent class; the subclass inherits from its parent.\n\n\nElementaryParticle can also be a superclass:\n\nclass Quark(ElementaryParticle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, color, charge, color_charge, spin, flavor):\n        self.color = color\n        self.charge = charge\n        self.color_charge = color_charge\n        self.spin = spin\n        self.flavor = flavor",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#inheritance-of-class-contructors",
    "href": "classes-objects.html#inheritance-of-class-contructors",
    "title": "Brief intro to object-oriented programming",
    "section": "Inheritance of class contructors",
    "text": "Inheritance of class contructors\n\nBest/most Pythonic way of handling inherited + additional constructor arguments: be explicit.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#section-1",
    "href": "classes-objects.html#section-1",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, charge, mass, position, spin):\n        super().__init__(charge, mass, position)\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#metaprogramming",
    "href": "classes-objects.html#metaprogramming",
    "title": "Brief intro to object-oriented programming",
    "section": "Metaprogramming",
    "text": "Metaprogramming\n\nWhen definition of a class or function is specified (in part or in full) by code outside the definition itself.\n\n\nExample: add an is_particle class attribute to Particle class:\n\ndef add_is_particle(cls):\n    cls.is_particle = True\n    return cls\n\n@add_is_particle\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#practical-example",
    "href": "classes-objects.html#practical-example",
    "title": "Brief intro to object-oriented programming",
    "section": "Practical example",
    "text": "Practical example\nTake a look at my code PyTeCK, which uses classes to hide lots of details of performing simulations: https://github.com/kyleniemeyer/PyTeCK",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects-revealjs.html#brief-intro-to-object-oriented-programming",
    "href": "classes-objects-revealjs.html#brief-intro-to-object-oriented-programming",
    "title": "Brief intro to object-oriented programming",
    "section": "Brief intro to object-oriented programming",
    "text": "Brief intro to object-oriented programming\n\nClasses: organize data, methods, and functions\n\n\nObjects: manifestations of classes\n\n\nWe can use object-oriented programming to cleanly organize behaviors and data in our code."
  },
  {
    "objectID": "classes-objects-revealjs.html#object-orientation",
    "href": "classes-objects-revealjs.html#object-orientation",
    "title": "Brief intro to object-oriented programming",
    "section": "Object Orientation",
    "text": "Object Orientation\n\nIt provides a framework for classifying distinct concepts into comprehensible sizes. These smaller conceptual units facilitate cleaner, more scalable modeling."
  },
  {
    "objectID": "classes-objects-revealjs.html#object-orientation-1",
    "href": "classes-objects-revealjs.html#object-orientation-1",
    "title": "Brief intro to object-oriented programming",
    "section": "Object Orientation",
    "text": "Object Orientation\n\nClasses and objects combine functions with data to make both easier to manage.\nA class defines the behaviors of a new kind of thing, while an object is a particular thing.\nClasses have constructors that describe how to create a new object of a particular kind.\nAn interface describes what an object can do; an implementation defines how.\nOne class can inherit from another and override just those things that it wants to change."
  },
  {
    "objectID": "classes-objects-revealjs.html#object-orientation-2",
    "href": "classes-objects-revealjs.html#object-orientation-2",
    "title": "Brief intro to object-oriented programming",
    "section": "Object Orientation",
    "text": "Object Orientation\n\nEncapsulation is the property of owning data\nInheritance establishes a relationship hierarchy between models\nPolymorphism allows for models to customize their own behavior even when they are based on other models"
  },
  {
    "objectID": "classes-objects-revealjs.html#object-example-integers",
    "href": "classes-objects-revealjs.html#object-example-integers",
    "title": "Brief intro to object-oriented programming",
    "section": "Object example: integers",
    "text": "Object example: integers\na = 1\nhelp(a) # gives info about the object\ndir(a) # gives list of data and behaviors associated with class"
  },
  {
    "objectID": "classes-objects-revealjs.html#object-example-integers-1",
    "href": "classes-objects-revealjs.html#object-example-integers-1",
    "title": "Brief intro to object-oriented programming",
    "section": "Object example: integers",
    "text": "Object example: integers\na = 1\nhelp(a) # gives info about the object\ndir(a) # gives list of data and behaviors associated with class\n\n\n\n\nWhat do double underscores around __abs__ mean?\n\nFrom PEP8: “magic objects or attributes that live in user-controlled namespaces. E.g., __init__, __import__, or __file__. Never invent such names; only use them as documented.”\n\nGenerally don’t call dunder methods directly; instead, use built-in functions."
  },
  {
    "objectID": "classes-objects-revealjs.html#what-about-functions",
    "href": "classes-objects-revealjs.html#what-about-functions",
    "title": "Brief intro to object-oriented programming",
    "section": "… what about functions?",
    "text": "… what about functions?\nimport math\ndir(math.sin)\n\nEven functions are objects!"
  },
  {
    "objectID": "classes-objects-revealjs.html#what-about-classes",
    "href": "classes-objects-revealjs.html#what-about-classes",
    "title": "Brief intro to object-oriented programming",
    "section": "What about classes?",
    "text": "What about classes?\n\nClasses define logical collections of attributes and methods describing a kind of object, and how to create objects of that kind.\n\n\nChoose classes to encapsulate internal data and functions for different types of objects."
  },
  {
    "objectID": "classes-objects-revealjs.html#example-particle-physics",
    "href": "classes-objects-revealjs.html#example-particle-physics",
    "title": "Brief intro to object-oriented programming",
    "section": "Example: particle physics",
    "text": "Example: particle physics\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\"\"\"\n    # class body definition here\n\nWhat else do classes include?\n\n\nClass variables\nConstructors\nMethods"
  },
  {
    "objectID": "classes-objects-revealjs.html#elementary-particles",
    "href": "classes-objects-revealjs.html#elementary-particles",
    "title": "Brief intro to object-oriented programming",
    "section": "Elementary particles",
    "text": "Elementary particles"
  },
  {
    "objectID": "classes-objects-revealjs.html#class-variables",
    "href": "classes-objects-revealjs.html#class-variables",
    "title": "Brief intro to object-oriented programming",
    "section": "Class variables",
    "text": "Class variables\n\nData universally applicable to all objects of the class\n\n# contents of particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\"\"\"\n    # class body definition here\n    roar = \"I am a particle!\"\n# import particle module\nimport particle as p\nprint(p.Particle.roar)\n# create instance of Particle\nimport particle as p\nhiggs = p.Particle()\nprint(higgs.roar)\nClass variables can get a bit confusing; if you modify the variable associated with an object, it becomes an instance variable. For example:\nclass Particle(object):\n    spin = 0\n\n    def init(self, charge, mass):\n        self.charge = charge\n        self.mass = mass\nHere, spin is a class variable while charge and mass are instance variables. Creating two particles:\np1 = Particle(1, 1)\np2 = Particle(-1, 1)\n\nprint(p1.spin)\nprint(p2.spin)\nwe’ll get\n0\n0\nIf we change spin for p1 only, it modifies the value just for that instance:\np1.spin = 0.5\nprint(p1.spin)\nprint(p2.spin)\ngiving\n0.5\n0\nHowever, in general spin is still a class variable, and we can modify it for the whole class:\nParticle.spin = -0.5\nprint(p1.spin)\nprint(p2.spin)\nwhich gives\n0.5\n-0.5\nSo, for p1, spin has become an instance variable, but p2 still points to the class variable."
  },
  {
    "objectID": "classes-objects-revealjs.html#instance-variables",
    "href": "classes-objects-revealjs.html#instance-variables",
    "title": "Brief intro to object-oriented programming",
    "section": "Instance variables",
    "text": "Instance variables\n\nData with different values for each instance of the class\n\n\nExample: particle position.\n\nimport particle as p\n# create empty list to hold observed particle data\nobs = []\n# append first particle\nobs.append(p.Particle())\n# assign its position\nobs[0].r = {'x': 100.0, 'y': 38.0, 'z': -42.0}\n# append second particle and assign its position\nobs.append(p.Particle())\nobs[1].r = {'x': 0.01, 'y': 99.0, 'z': 32.0}\n# print positions of each particle\nprint(obs[0].r)\nprint(obs[1].r)"
  },
  {
    "objectID": "classes-objects-revealjs.html#instance-variables-1",
    "href": "classes-objects-revealjs.html#instance-variables-1",
    "title": "Brief intro to object-oriented programming",
    "section": "Instance variables",
    "text": "Instance variables\n\nUsing instance variables, we can store all data associated with a particle observation (position, mass, charge, spin, etc.) without much more complexity\n\n\n(Hopefully the value of this reduced complexity is obvious.)\n\n\nHow to accomplish in class definition? Constructor: __init()__ function."
  },
  {
    "objectID": "classes-objects-revealjs.html#constructors",
    "href": "classes-objects-revealjs.html#constructors",
    "title": "Brief intro to object-oriented programming",
    "section": "Constructors",
    "text": "Constructors\n\nConstructor: __init__() function, executed upon instantiation of object.\n\n\nConstructor not required; every class inherits default constructor from object.\n\n\nTip: good to initialize all instance variables in constructor, to ensure they are initialized when you need them."
  },
  {
    "objectID": "classes-objects-revealjs.html#methods",
    "href": "classes-objects-revealjs.html#methods",
    "title": "Brief intro to object-oriented programming",
    "section": "Methods",
    "text": "Methods\n\nMethods: functions tied to a class definition; may operate on data contained by object.\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)"
  },
  {
    "objectID": "classes-objects-revealjs.html#static-methods",
    "href": "classes-objects-revealjs.html#static-methods",
    "title": "Brief intro to object-oriented programming",
    "section": "Static methods",
    "text": "Static methods\n\nExample: Quark class can include function that lists all possible values of flavor; possible values are static irrespective of specific instance.\n\ndef possible_flavors():\n    return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]\n\nUse @staticmethod decorator to define a method not bound to object.\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n\n    # ... other parts of class definition ...\n\n    @staticmethod\n    def possible_flavors():\n        return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]"
  },
  {
    "objectID": "classes-objects-revealjs.html#duck-typing",
    "href": "classes-objects-revealjs.html#duck-typing",
    "title": "Brief intro to object-oriented programming",
    "section": "Duck typing",
    "text": "Duck typing\n\n“When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”\n\n\nMeaning: Python does not explicitly check for object types like other languages. It only checks for behavior when a method is called or attribute accessed.\n\n\nIf different object types both “quack like a duck”, then it treats them like a duck. An object does not need to be of a certain type in order for its methods to be invoked; must merely possess those method."
  },
  {
    "objectID": "classes-objects-revealjs.html#section",
    "href": "classes-objects-revealjs.html#section",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Example: all particles with a valid c attribute for charge can be used identically.\n\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        tot += p.c\n    return tot\np = Proton()\ne1 = Electron()\ne2 = Electrion()\nparticles = [p, e1, e2]\ntotal_charge(particles)\n# overrule duck typing when inconvenient\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        if isinstance(p, Particle):\n            tot += p.c\n    return tot"
  },
  {
    "objectID": "classes-objects-revealjs.html#polymorphism",
    "href": "classes-objects-revealjs.html#polymorphism",
    "title": "Brief intro to object-oriented programming",
    "section": "Polymorphism",
    "text": "Polymorphism\n\nWhen class inherits attributes of a parent class. General rule: what works for parent class should work for subclass (plus specialized behavior).\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\n# composite.py\nclass CompositeParticle(Particle):\n    \"\"\"Particles like protons and neutrons, composed of elementary particles\n    but don't share attributes.\n    \"\"\"\n\n    def __init__(self, parts):\n        self.constituents = parts"
  },
  {
    "objectID": "classes-objects-revealjs.html#subclasses",
    "href": "classes-objects-revealjs.html#subclasses",
    "title": "Brief intro to object-oriented programming",
    "section": "Subclasses",
    "text": "Subclasses\n\nElementaryParticle and CompositeParticle are Particle objects, and thus have (inherit) all of the functions and data of the original class.\n\n\nWe can override that data and those behaviors if desired.\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\nfrom elementary import ElementaryParticle\np = ElementaryParticle(1.5)\np.s\np.hear_me()"
  },
  {
    "objectID": "classes-objects-revealjs.html#superclasses",
    "href": "classes-objects-revealjs.html#superclasses",
    "title": "Brief intro to object-oriented programming",
    "section": "Superclasses",
    "text": "Superclasses\n\nAny class, including a subclass, can be a superclass or parent class; the subclass inherits from its parent.\n\n\nElementaryParticle can also be a superclass:\n\nclass Quark(ElementaryParticle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, color, charge, color_charge, spin, flavor):\n        self.color = color\n        self.charge = charge\n        self.color_charge = color_charge\n        self.spin = spin\n        self.flavor = flavor"
  },
  {
    "objectID": "classes-objects-revealjs.html#inheritance-of-class-contructors",
    "href": "classes-objects-revealjs.html#inheritance-of-class-contructors",
    "title": "Brief intro to object-oriented programming",
    "section": "Inheritance of class contructors",
    "text": "Inheritance of class contructors\n\nBest/most Pythonic way of handling inherited + additional constructor arguments: be explicit."
  },
  {
    "objectID": "classes-objects-revealjs.html#section-1",
    "href": "classes-objects-revealjs.html#section-1",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, charge, mass, position, spin):\n        super().__init__(charge, mass, position)\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion"
  },
  {
    "objectID": "classes-objects-revealjs.html#metaprogramming",
    "href": "classes-objects-revealjs.html#metaprogramming",
    "title": "Brief intro to object-oriented programming",
    "section": "Metaprogramming",
    "text": "Metaprogramming\n\nWhen definition of a class or function is specified (in part or in full) by code outside the definition itself.\n\n\nExample: add an is_particle class attribute to Particle class:\n\ndef add_is_particle(cls):\n    cls.is_particle = True\n    return cls\n\n@add_is_particle\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ..."
  },
  {
    "objectID": "classes-objects-revealjs.html#practical-example",
    "href": "classes-objects-revealjs.html#practical-example",
    "title": "Brief intro to object-oriented programming",
    "section": "Practical example",
    "text": "Practical example\nTake a look at my code PyTeCK, which uses classes to hide lots of details of performing simulations: https://github.com/kyleniemeyer/PyTeCK"
  },
  {
    "objectID": "remote-version-control.html",
    "href": "remote-version-control.html",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Backup up code (and any files) online\nCloning and forking remote repositories\nManaging files in a collaboration\nMerging simultaneous changes\nDownloading open source code\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\nNice landing page—renders README automatically\nGrabs information about LICENSE, programming language\nSupports issue tracking and wiki\nNetwork graphs, time history of commits\nUser downloads\nVarying permissions (read, write, etc.)\nNice web interface to browse, view, and edit code\n\n\n\n\n\nCreate space for repo on GitHub account\nPoint to that remote repo from local copy\nPush repository to the remote location\nContinue working!\n\n\n\n\n\nCreate a new repo on account\nCopy (clone) empty repo to local computer\nProsper!",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#topics-for-today",
    "href": "remote-version-control.html#topics-for-today",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Backup up code (and any files) online\nCloning and forking remote repositories\nManaging files in a collaboration\nMerging simultaneous changes\nDownloading open source code",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#why-github",
    "href": "remote-version-control.html#why-github",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Nice landing page—renders README automatically\nGrabs information about LICENSE, programming language\nSupports issue tracking and wiki\nNetwork graphs, time history of commits\nUser downloads\nVarying permissions (read, write, etc.)\nNice web interface to browse, view, and edit code",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#workflow-with-account",
    "href": "remote-version-control.html#workflow-with-account",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Create space for repo on GitHub account\nPoint to that remote repo from local copy\nPush repository to the remote location\nContinue working!",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#alternatively-if-starting-new-project-you-can",
    "href": "remote-version-control.html#alternatively-if-starting-new-project-you-can",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Create a new repo on account\nCopy (clone) empty repo to local computer\nProsper!",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#lets-work-through-creating-a-repo",
    "href": "remote-version-control.html#lets-work-through-creating-a-repo",
    "title": "Remote version control with Git",
    "section": "Let’s work through creating a repo",
    "text": "Let’s work through creating a repo",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#create-and-push-new-repo",
    "href": "remote-version-control.html#create-and-push-new-repo",
    "title": "Remote version control with Git",
    "section": "Create and push new repo",
    "text": "Create and push new repo",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#cloning-a-repo",
    "href": "remote-version-control.html#cloning-a-repo",
    "title": "Remote version control with Git",
    "section": "Cloning a repo",
    "text": "Cloning a repo",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#terminology",
    "href": "remote-version-control.html#terminology",
    "title": "Remote version control with Git",
    "section": "Terminology",
    "text": "Terminology\n\nClone: make local copy of any repository (Git)\n\n\nFork: Remote repository connected to/aware of the “upstream” repo it was cloned from (GitHub)",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#forking-a-repo",
    "href": "remote-version-control.html#forking-a-repo",
    "title": "Remote version control with Git",
    "section": "Forking a repo",
    "text": "Forking a repo",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#collaborative-work-using-github",
    "href": "remote-version-control.html#collaborative-work-using-github",
    "title": "Remote version control with Git",
    "section": "Collaborative work using GitHub",
    "text": "Collaborative work using GitHub\n\n\n\n\nHow does Fran keep local repo up to date with the original?",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#do-this-yourself",
    "href": "remote-version-control.html#do-this-yourself",
    "title": "Remote version control with Git",
    "section": "Do this yourself:",
    "text": "Do this yourself:\n\nFork it: click “Fork” at SoftwareDevEngResearch/analysis_code\nClone your fork: $ git clone https://github.com/[you]/analysis_code.git\nCreate alias upstream for the remote repo:\n\n$ git remote add upstream \\\nhttps://github.com/SoftwareDevEngResearch/analysis_code.git\n$ git remote -v",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#fetching-and-merging-remote-content",
    "href": "remote-version-control.html#fetching-and-merging-remote-content",
    "title": "Remote version control with Git",
    "section": "Fetching and merging remote content",
    "text": "Fetching and merging remote content\n\nIn your cloned local repo, fetch the upstream repo history\nThen merge the upstream main branch into your main branch\nLook at the changes!\n\n$ git fetch upstream\n$ git merge upstream/main",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#update-your-fork",
    "href": "remote-version-control.html#update-your-fork",
    "title": "Remote version control with Git",
    "section": "Update your fork",
    "text": "Update your fork\n\nAfter merging upstream history, push your work to origin main:\n$ git push\n\n\nWhat if you (or someone else) made a change in your fork?\n\n$ git pull\n\npull = fetch & merge for origin main",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#alternatively-use-github",
    "href": "remote-version-control.html#alternatively-use-github",
    "title": "Remote version control with Git",
    "section": "Alternatively, use GitHub",
    "text": "Alternatively, use GitHub",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#what-about-conflicts",
    "href": "remote-version-control.html#what-about-conflicts",
    "title": "Remote version control with Git",
    "section": "What about conflicts?",
    "text": "What about conflicts?\n\nWhen fetching, merging, and/or pulling remote changes, you may encounter conflicts.\n\n\nTo solve: just follow the directions!\n\n\n(In-class example)",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#best-practices-for-collaborating",
    "href": "remote-version-control.html#best-practices-for-collaborating",
    "title": "Remote version control with Git",
    "section": "Best practices for collaborating",
    "text": "Best practices for collaborating\n\nFor solo projects:\n\n\npush and pull (to/from origin\nuse branches, merge into main\n\n\nFor multi-person projects:\n\n\nFork into a personal repo\nUse git fetch/merge to keep updated with upstream\nPush (and pull) to/from origin (your fork on GitHub)\nContribute changes via pull requests on GitHub",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#pull-requests",
    "href": "remote-version-control.html#pull-requests",
    "title": "Remote version control with Git",
    "section": "Pull Requests",
    "text": "Pull Requests\n\nModern, GitHub-based version of emailing someone a patch\n\n\nPull Requests (or PRs) consist of sequences of patches, based on a history of Git commits",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#example-pull-request-on-github",
    "href": "remote-version-control.html#example-pull-request-on-github",
    "title": "Remote version control with Git",
    "section": "Example Pull Request on GitHub",
    "text": "Example Pull Request on GitHub",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#how-to-contribute-a-change-to-someone-elses-repository",
    "href": "remote-version-control.html#how-to-contribute-a-change-to-someone-elses-repository",
    "title": "Remote version control with Git",
    "section": "How to contribute a change to someone else’s repository",
    "text": "How to contribute a change to someone else’s repository\n\nFork the repo\nClone your fork locally\nCreate a new branch for your changes/fix\nCommit and push your changes\nSubmit a Pull Request via GitHub\n\n$ git clone ...\n$ git checkout -b newfix\n\n$ git commit -am \"fixes problem in upstream project\"\n$ git push origin newfix",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#create-pull-request",
    "href": "remote-version-control.html#create-pull-request",
    "title": "Remote version control with Git",
    "section": "Create Pull Request",
    "text": "Create Pull Request",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#submitting-pull-requests",
    "href": "remote-version-control.html#submitting-pull-requests",
    "title": "Remote version control with Git",
    "section": "Submitting Pull Requests",
    "text": "Submitting Pull Requests\n\nTry to submit shorter Pull Requests when possible, as they are easier to review and merge\n\n\nIf the project uses testing, make sure to add a new test (or modify an existing one) to reflect your change. More on tests later!",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#important-notice",
    "href": "remote-version-control.html#important-notice",
    "title": "Remote version control with Git",
    "section": "Important notice",
    "text": "Important notice\n\nI AM NOT A LAWYER!\n\n\nAKA: IANAL",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#copyright",
    "href": "remote-version-control.html#copyright",
    "title": "Remote version control with Git",
    "section": "Copyright",
    "text": "Copyright\n\nFacts and ideas are not copyrightable.\n\n\nExpressions of ideas are copyrightable.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#copyright-examples",
    "href": "remote-version-control.html#copyright-examples",
    "title": "Remote version control with Git",
    "section": "Copyright Examples",
    "text": "Copyright Examples\n\nGame rules are not copyrightable (chess, Go, football, Dungeons & Dragons)\n\n\nExpressions of game rules are copyrightable.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#basic-copyright",
    "href": "remote-version-control.html#basic-copyright",
    "title": "Remote version control with Git",
    "section": "Basic Copyright",
    "text": "Basic Copyright\n\n“Right of First Publication”: copyright automatically goes to the first creator of any creative work\n\n\n(Even if not explicitly specified)\n\n\nConsequence: if you post software to GitHub without an explicit license, then you own the copyright—even if openly and publicly visible.\n\n\nBy default, no one else is legally allowed to use or modify your work.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#software-licenses",
    "href": "remote-version-control.html#software-licenses",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\nAll software codes you make publicly available should be accompanied by a software license describing the terms by which others may use and/or modify your code.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#public-domain",
    "href": "remote-version-control.html#public-domain",
    "title": "Remote version control with Git",
    "section": "Public Domain",
    "text": "Public Domain\n\nAlternatively, you can put work into the public domain: “This work has been placed in the public domain.”\n\n\nFree for anyone and everyone to use and modify.\n\n\nLiterature examples: Sherlock Holmes, Frankenstein\n\n\n(There are some tricky issues internationally, however.)",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#software-licenses-1",
    "href": "remote-version-control.html#software-licenses-1",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\n\nKinds of software licenses: proprietary, and free/open source (FOSS, FLOSS, OSS).\n\n\nPick an existing license. Do not create your own.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#software-licenses-2",
    "href": "remote-version-control.html#software-licenses-2",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\n\nFOSS categories: permissive, and “copyleft”\n\n\nPermissive licenses: BSD 3-clause, MIT; allow further distribution under any license\n\n\nCopyleft licenses: GPL; require modifications to be shared under the same license (“viral”)",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#httpschoosealicense.com",
    "href": "remote-version-control.html#httpschoosealicense.com",
    "title": "Remote version control with Git",
    "section": "https://choosealicense.com",
    "text": "https://choosealicense.com",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#open-source-initiative-licenses",
    "href": "remote-version-control.html#open-source-initiative-licenses",
    "title": "Remote version control with Git",
    "section": "Open Source Initiative licenses",
    "text": "Open Source Initiative licenses",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#which-license-to-use",
    "href": "remote-version-control.html#which-license-to-use",
    "title": "Remote version control with Git",
    "section": "Which license to use?",
    "text": "Which license to use?\n\nWhen in doubt, use a permissive license like the BSD 3-clause or MIT licenses.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#copyrighting-other-creative-works-creative-commons",
    "href": "remote-version-control.html#copyrighting-other-creative-works-creative-commons",
    "title": "Remote version control with Git",
    "section": "Copyrighting other creative works: Creative Commons",
    "text": "Copyrighting other creative works: Creative Commons\n\nBY: Attribution\nSA: ShareAlike\nND: NoDerivatives\nNC: NonCommercial\n\n\nLicenses: CC BY, CC BY-SA, CC BY-NC, CC BY-NC-NC\n\n\nChoose a license",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#beyond-copyright-licenses",
    "href": "remote-version-control.html#beyond-copyright-licenses",
    "title": "Remote version control with Git",
    "section": "Beyond copyright & licenses",
    "text": "Beyond copyright & licenses\n\nPatents: cover ideas and concepts; modern issues with “patent trolls”\n\n\nTrademarks: symbols that represent a business or organization\n\n\nExport control: government may forbid the transfer of source code (and data, ideas) to another country or foreign national without permission\n\n\nHIPAA compliance: software that deals with human patients must be anonymized",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control-revealjs.html#topics-for-today",
    "href": "remote-version-control-revealjs.html#topics-for-today",
    "title": "Remote version control with Git",
    "section": "Topics for today:",
    "text": "Topics for today:\n\nBackup up code (and any files) online\nCloning and forking remote repositories\nManaging files in a collaboration\nMerging simultaneous changes\nDownloading open source code"
  },
  {
    "objectID": "remote-version-control-revealjs.html#repositories",
    "href": "remote-version-control-revealjs.html#repositories",
    "title": "Remote version control with Git",
    "section": "Repositories",
    "text": "Repositories\n   \n\nWe’ll focus on GitHub."
  },
  {
    "objectID": "remote-version-control-revealjs.html#why-github",
    "href": "remote-version-control-revealjs.html#why-github",
    "title": "Remote version control with Git",
    "section": "Why GitHub?",
    "text": "Why GitHub?\n\nNice landing page—renders README automatically\nGrabs information about LICENSE, programming language\nSupports issue tracking and wiki\nNetwork graphs, time history of commits\nUser downloads\nVarying permissions (read, write, etc.)\nNice web interface to browse, view, and edit code"
  },
  {
    "objectID": "remote-version-control-revealjs.html#workflow-with-account",
    "href": "remote-version-control-revealjs.html#workflow-with-account",
    "title": "Remote version control with Git",
    "section": "Workflow (with account)",
    "text": "Workflow (with account)\n\nCreate space for repo on GitHub account\nPoint to that remote repo from local copy\nPush repository to the remote location\nContinue working!"
  },
  {
    "objectID": "remote-version-control-revealjs.html#alternatively-if-starting-new-project-you-can",
    "href": "remote-version-control-revealjs.html#alternatively-if-starting-new-project-you-can",
    "title": "Remote version control with Git",
    "section": "Alternatively, if starting new project, you can:",
    "text": "Alternatively, if starting new project, you can:\n\nCreate a new repo on account\nCopy (clone) empty repo to local computer\nProsper!"
  },
  {
    "objectID": "remote-version-control-revealjs.html#lets-work-through-creating-a-repo",
    "href": "remote-version-control-revealjs.html#lets-work-through-creating-a-repo",
    "title": "Remote version control with Git",
    "section": "Let’s work through creating a repo",
    "text": "Let’s work through creating a repo"
  },
  {
    "objectID": "remote-version-control-revealjs.html#create-and-push-new-repo",
    "href": "remote-version-control-revealjs.html#create-and-push-new-repo",
    "title": "Remote version control with Git",
    "section": "Create and push new repo",
    "text": "Create and push new repo"
  },
  {
    "objectID": "remote-version-control-revealjs.html#cloning-a-repo",
    "href": "remote-version-control-revealjs.html#cloning-a-repo",
    "title": "Remote version control with Git",
    "section": "Cloning a repo",
    "text": "Cloning a repo"
  },
  {
    "objectID": "remote-version-control-revealjs.html#terminology",
    "href": "remote-version-control-revealjs.html#terminology",
    "title": "Remote version control with Git",
    "section": "Terminology",
    "text": "Terminology\n\nClone: make local copy of any repository (Git)\n\n\nFork: Remote repository connected to/aware of the “upstream” repo it was cloned from (GitHub)"
  },
  {
    "objectID": "remote-version-control-revealjs.html#forking-a-repo",
    "href": "remote-version-control-revealjs.html#forking-a-repo",
    "title": "Remote version control with Git",
    "section": "Forking a repo",
    "text": "Forking a repo"
  },
  {
    "objectID": "remote-version-control-revealjs.html#collaborative-work-using-github",
    "href": "remote-version-control-revealjs.html#collaborative-work-using-github",
    "title": "Remote version control with Git",
    "section": "Collaborative work using GitHub",
    "text": "Collaborative work using GitHub"
  },
  {
    "objectID": "remote-version-control-revealjs.html#do-this-yourself",
    "href": "remote-version-control-revealjs.html#do-this-yourself",
    "title": "Remote version control with Git",
    "section": "Do this yourself:",
    "text": "Do this yourself:\n\nFork it: click “Fork” at SoftwareDevEngResearch/analysis_code\nClone your fork: $ git clone https://github.com/[you]/analysis_code.git\nCreate alias upstream for the remote repo:\n\n$ git remote add upstream \\\nhttps://github.com/SoftwareDevEngResearch/analysis_code.git\n$ git remote -v"
  },
  {
    "objectID": "remote-version-control-revealjs.html#fetching-and-merging-remote-content",
    "href": "remote-version-control-revealjs.html#fetching-and-merging-remote-content",
    "title": "Remote version control with Git",
    "section": "Fetching and merging remote content",
    "text": "Fetching and merging remote content\n\nIn your cloned local repo, fetch the upstream repo history\nThen merge the upstream main branch into your main branch\nLook at the changes!\n\n$ git fetch upstream\n$ git merge upstream/main"
  },
  {
    "objectID": "remote-version-control-revealjs.html#update-your-fork",
    "href": "remote-version-control-revealjs.html#update-your-fork",
    "title": "Remote version control with Git",
    "section": "Update your fork",
    "text": "Update your fork\n\nAfter merging upstream history, push your work to origin main:\n$ git push\n\n\nWhat if you (or someone else) made a change in your fork?\n\n$ git pull\n\npull = fetch & merge for origin main"
  },
  {
    "objectID": "remote-version-control-revealjs.html#alternatively-use-github",
    "href": "remote-version-control-revealjs.html#alternatively-use-github",
    "title": "Remote version control with Git",
    "section": "Alternatively, use GitHub",
    "text": "Alternatively, use GitHub"
  },
  {
    "objectID": "remote-version-control-revealjs.html#what-about-conflicts",
    "href": "remote-version-control-revealjs.html#what-about-conflicts",
    "title": "Remote version control with Git",
    "section": "What about conflicts?",
    "text": "What about conflicts?\n\nWhen fetching, merging, and/or pulling remote changes, you may encounter conflicts.\n\n\nTo solve: just follow the directions!\n\n\n(In-class example)"
  },
  {
    "objectID": "remote-version-control-revealjs.html#best-practices-for-collaborating",
    "href": "remote-version-control-revealjs.html#best-practices-for-collaborating",
    "title": "Remote version control with Git",
    "section": "Best practices for collaborating",
    "text": "Best practices for collaborating\n\nFor solo projects:\n\n\npush and pull (to/from origin\nuse branches, merge into main\n\n\nFor multi-person projects:\n\n\nFork into a personal repo\nUse git fetch/merge to keep updated with upstream\nPush (and pull) to/from origin (your fork on GitHub)\nContribute changes via pull requests on GitHub"
  },
  {
    "objectID": "remote-version-control-revealjs.html#pull-requests",
    "href": "remote-version-control-revealjs.html#pull-requests",
    "title": "Remote version control with Git",
    "section": "Pull Requests",
    "text": "Pull Requests\n\nModern, GitHub-based version of emailing someone a patch\n\n\nPull Requests (or PRs) consist of sequences of patches, based on a history of Git commits"
  },
  {
    "objectID": "remote-version-control-revealjs.html#example-pull-request-on-github",
    "href": "remote-version-control-revealjs.html#example-pull-request-on-github",
    "title": "Remote version control with Git",
    "section": "Example Pull Request on GitHub",
    "text": "Example Pull Request on GitHub"
  },
  {
    "objectID": "remote-version-control-revealjs.html#how-to-contribute-a-change-to-someone-elses-repository",
    "href": "remote-version-control-revealjs.html#how-to-contribute-a-change-to-someone-elses-repository",
    "title": "Remote version control with Git",
    "section": "How to contribute a change to someone else’s repository",
    "text": "How to contribute a change to someone else’s repository\n\nFork the repo\nClone your fork locally\nCreate a new branch for your changes/fix\nCommit and push your changes\nSubmit a Pull Request via GitHub\n\n$ git clone ...\n$ git checkout -b newfix\n\n$ git commit -am \"fixes problem in upstream project\"\n$ git push origin newfix"
  },
  {
    "objectID": "remote-version-control-revealjs.html#create-pull-request",
    "href": "remote-version-control-revealjs.html#create-pull-request",
    "title": "Remote version control with Git",
    "section": "Create Pull Request",
    "text": "Create Pull Request"
  },
  {
    "objectID": "remote-version-control-revealjs.html#submitting-pull-requests",
    "href": "remote-version-control-revealjs.html#submitting-pull-requests",
    "title": "Remote version control with Git",
    "section": "Submitting Pull Requests",
    "text": "Submitting Pull Requests\n\nTry to submit shorter Pull Requests when possible, as they are easier to review and merge\n\n\nIf the project uses testing, make sure to add a new test (or modify an existing one) to reflect your change. More on tests later!"
  },
  {
    "objectID": "remote-version-control-revealjs.html#important-notice",
    "href": "remote-version-control-revealjs.html#important-notice",
    "title": "Remote version control with Git",
    "section": "Important notice",
    "text": "Important notice\nI AM NOT A LAWYER!\nAKA: IANAL"
  },
  {
    "objectID": "remote-version-control-revealjs.html#copyright",
    "href": "remote-version-control-revealjs.html#copyright",
    "title": "Remote version control with Git",
    "section": "Copyright",
    "text": "Copyright\n\nFacts and ideas are not copyrightable.\n\n\nExpressions of ideas are copyrightable."
  },
  {
    "objectID": "remote-version-control-revealjs.html#copyright-examples",
    "href": "remote-version-control-revealjs.html#copyright-examples",
    "title": "Remote version control with Git",
    "section": "Copyright Examples",
    "text": "Copyright Examples\n\nGame rules are not copyrightable (chess, Go, football, Dungeons & Dragons)\n\n\nExpressions of game rules are copyrightable."
  },
  {
    "objectID": "remote-version-control-revealjs.html#basic-copyright",
    "href": "remote-version-control-revealjs.html#basic-copyright",
    "title": "Remote version control with Git",
    "section": "Basic Copyright",
    "text": "Basic Copyright\n\n“Right of First Publication”: copyright automatically goes to the first creator of any creative work\n\n\n(Even if not explicitly specified)\n\n\nConsequence: if you post software to GitHub without an explicit license, then you own the copyright—even if openly and publicly visible.\n\n\nBy default, no one else is legally allowed to use or modify your work."
  },
  {
    "objectID": "remote-version-control-revealjs.html#software-licenses",
    "href": "remote-version-control-revealjs.html#software-licenses",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\nAll software codes you make publicly available should be accompanied by a software license describing the terms by which others may use and/or modify your code."
  },
  {
    "objectID": "remote-version-control-revealjs.html#public-domain",
    "href": "remote-version-control-revealjs.html#public-domain",
    "title": "Remote version control with Git",
    "section": "Public Domain",
    "text": "Public Domain\n\nAlternatively, you can put work into the public domain: “This work has been placed in the public domain.”\n\n\nFree for anyone and everyone to use and modify.\n\n\nLiterature examples: Sherlock Holmes, Frankenstein\n\n\n(There are some tricky issues internationally, however.)"
  },
  {
    "objectID": "remote-version-control-revealjs.html#software-licenses-1",
    "href": "remote-version-control-revealjs.html#software-licenses-1",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\n\nKinds of software licenses: proprietary, and free/open source (FOSS, FLOSS, OSS).\n\n\nPick an existing license. Do not create your own."
  },
  {
    "objectID": "remote-version-control-revealjs.html#software-licenses-2",
    "href": "remote-version-control-revealjs.html#software-licenses-2",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\n\nFOSS categories: permissive, and “copyleft”\n\n\nPermissive licenses: BSD 3-clause, MIT; allow further distribution under any license\n\n\nCopyleft licenses: GPL; require modifications to be shared under the same license (“viral”)"
  },
  {
    "objectID": "remote-version-control-revealjs.html#httpschoosealicense.com",
    "href": "remote-version-control-revealjs.html#httpschoosealicense.com",
    "title": "Remote version control with Git",
    "section": "https://choosealicense.com",
    "text": "https://choosealicense.com"
  },
  {
    "objectID": "remote-version-control-revealjs.html#open-source-initiative-licenses",
    "href": "remote-version-control-revealjs.html#open-source-initiative-licenses",
    "title": "Remote version control with Git",
    "section": "Open Source Initiative licenses",
    "text": "Open Source Initiative licenses"
  },
  {
    "objectID": "remote-version-control-revealjs.html#which-license-to-use",
    "href": "remote-version-control-revealjs.html#which-license-to-use",
    "title": "Remote version control with Git",
    "section": "Which license to use?",
    "text": "Which license to use?\n\nWhen in doubt, use a permissive license like the BSD 3-clause or MIT licenses."
  },
  {
    "objectID": "remote-version-control-revealjs.html#copyrighting-other-creative-works-creative-commons",
    "href": "remote-version-control-revealjs.html#copyrighting-other-creative-works-creative-commons",
    "title": "Remote version control with Git",
    "section": "Copyrighting other creative works: Creative Commons",
    "text": "Copyrighting other creative works: Creative Commons\n\nBY: Attribution\nSA: ShareAlike\nND: NoDerivatives\nNC: NonCommercial\n\n\nLicenses: CC BY, CC BY-SA, CC BY-NC, CC BY-NC-NC\n\n\nChoose a license"
  },
  {
    "objectID": "remote-version-control-revealjs.html#beyond-copyright-licenses",
    "href": "remote-version-control-revealjs.html#beyond-copyright-licenses",
    "title": "Remote version control with Git",
    "section": "Beyond copyright & licenses",
    "text": "Beyond copyright & licenses\n\nPatents: cover ideas and concepts; modern issues with “patent trolls”\n\n\nTrademarks: symbols that represent a business or organization\n\n\nExport control: government may forbid the transfer of source code (and data, ideas) to another country or foreign national without permission\n\n\nHIPAA compliance: software that deals with human patients must be anonymized"
  },
  {
    "objectID": "files-command-line.html",
    "href": "files-command-line.html",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "Collaborator emails you raw data, want to look at the results\nYou want to email a collaborator data from Python\nYou need to use external code that takes input or data file (potentially 100s/1000s of times); want to automate generation of input files from data\nAn external program writes out one or more results files, and you want to read and perform analysis\nYou want to keep an intermediate calculation for debugging or validation\n\n\n\n\nf = open('data.txt')\n\nThis does:\n\n\nMake sure data.txt exists\nCreate new handle to this file\nSet cursor position pos to start of the file, pos = 0\n\n\nThis does not read any of the file into memory, write anything to the file, or close the file.\n\n\n\n\n\nf.read(n=-1): Reads in n bytes; if n=-1 or not present, read entire rest of file.\nf.readline(): Read next full line, return string with newline character.\nf.readlines(): Reads entire rest of file, returns list of strings (with newlines).\nf.seek(pos): Move file cursor to specified position.\nf.tell(): Return current position in file.\nf.write(s): Insert string s at current position.\nf.flush(): Perform all pending write operations.\nf.close(): Close file (no more reading or writing).\n\n\n\n\nmatrix.txt contents:\n1,4,15,9\n0,11,7,3\n2,8,12,13\n14,5,10,6\nf = open('matrix.txt')\nmatrix = []\nfor line in f.readlines():\n    row = [int(x) for x in line.split(',')]\n    matrix.append(row)\nf.close()\n\nMake sure to close the file!\n\n\n\n\nUse context manager & with to automatically close:\nimport numpy as np\nwith open('matrix.txt', 'r') as f:\n    lines = f.readlines()\n\nmatrix = np.array([[int(x) for x in line.split(',')]\n                  for line in lines]\n                  )\n\n… actually, this example can be even easier:\nimport numpy as np\nmatrix = np.genfromtxt('matrix.txt', delimiter=',')\n\n\n\n\nWhen opening a file, by default it opens in read-only mode. Other file modes:\n\n'r': Read-only, no writing. Starts at pos = 0.\n'w': Write. Creates file if it doesn’t exist (if it does, contents are deleted). Starts at pos = 0.\n'a': Append. Opens file for writing but does not delete contents; creates file if it doesn’t exist. Starting pos is end of file.\n'+': Update. Opens for reading and writing, does not delete current contents. Starts at pos = 0.\n\n\n\n\nwith open('matrix.txt', 'r+') as f:\n    orig = f.read()\n    f.seek(0)\n    f.write('0,0,0,0\\n')\n    f.write(orig)\n    f.write('\\n1,1,1,1')",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#situations-for-working-with-files",
    "href": "files-command-line.html#situations-for-working-with-files",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "Collaborator emails you raw data, want to look at the results\nYou want to email a collaborator data from Python\nYou need to use external code that takes input or data file (potentially 100s/1000s of times); want to automate generation of input files from data\nAn external program writes out one or more results files, and you want to read and perform analysis\nYou want to keep an intermediate calculation for debugging or validation",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#saving-or-loading-data-file-handle-object",
    "href": "files-command-line.html#saving-or-loading-data-file-handle-object",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "f = open('data.txt')\n\nThis does:\n\n\nMake sure data.txt exists\nCreate new handle to this file\nSet cursor position pos to start of the file, pos = 0\n\n\nThis does not read any of the file into memory, write anything to the file, or close the file.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#file-handle-methods",
    "href": "files-command-line.html#file-handle-methods",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "f.read(n=-1): Reads in n bytes; if n=-1 or not present, read entire rest of file.\nf.readline(): Read next full line, return string with newline character.\nf.readlines(): Reads entire rest of file, returns list of strings (with newlines).\nf.seek(pos): Move file cursor to specified position.\nf.tell(): Return current position in file.\nf.write(s): Insert string s at current position.\nf.flush(): Perform all pending write operations.\nf.close(): Close file (no more reading or writing).",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#example-read-in-matrix",
    "href": "files-command-line.html#example-read-in-matrix",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "matrix.txt contents:\n1,4,15,9\n0,11,7,3\n2,8,12,13\n14,5,10,6\nf = open('matrix.txt')\nmatrix = []\nfor line in f.readlines():\n    row = [int(x) for x in line.split(',')]\n    matrix.append(row)\nf.close()\n\nMake sure to close the file!",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#how-to-do-this-better",
    "href": "files-command-line.html#how-to-do-this-better",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "Use context manager & with to automatically close:\nimport numpy as np\nwith open('matrix.txt', 'r') as f:\n    lines = f.readlines()\n\nmatrix = np.array([[int(x) for x in line.split(',')]\n                  for line in lines]\n                  )\n\n… actually, this example can be even easier:\nimport numpy as np\nmatrix = np.genfromtxt('matrix.txt', delimiter=',')",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#file-modes",
    "href": "files-command-line.html#file-modes",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "When opening a file, by default it opens in read-only mode. Other file modes:\n\n'r': Read-only, no writing. Starts at pos = 0.\n'w': Write. Creates file if it doesn’t exist (if it does, contents are deleted). Starts at pos = 0.\n'a': Append. Opens file for writing but does not delete contents; creates file if it doesn’t exist. Starting pos is end of file.\n'+': Update. Opens for reading and writing, does not delete current contents. Starts at pos = 0.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#more-complicated-example-read-in-matrix-and-add",
    "href": "files-command-line.html#more-complicated-example-read-in-matrix-and-add",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "with open('matrix.txt', 'r+') as f:\n    orig = f.read()\n    f.seek(0)\n    f.write('0,0,0,0\\n')\n    f.write(orig)\n    f.write('\\n1,1,1,1')",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#hdf-hierarchical-data-format",
    "href": "files-command-line.html#hdf-hierarchical-data-format",
    "title": "Intro to files and command-line inputs in Python",
    "section": "HDF: Hierarchical data format",
    "text": "HDF: Hierarchical data format\n\nBasic idea: better to store structured, numerical data in binary formats over plain-text ASCII files. Why? Smaller.\n\n# small ints        # medium ints\n42   (4 bytes)      123456   (4 bytes)\n'42' (2 bytes)      '123456' (6 bytes)\n\n# near-int floats   # e-notation floats\n12.34   (8 bytes)   42.424242E+42   (8 bytes)\n'12.34' (5 bytes)   '42.424242E+42' (13 bytes)\n\nAlso, faster I/O, since binary files save in native format.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#hdf5-hierarchical-data-format-version-5",
    "href": "files-command-line.html#hdf5-hierarchical-data-format-version-5",
    "title": "Intro to files and command-line inputs in Python",
    "section": "HDF5: Hierarchical Data Format, version 5",
    "text": "HDF5: Hierarchical Data Format, version 5\n\nHDF5 files (.hdf5, .h5) store data in binary format.\n\n\nHDF5 provides database features like storing many datasets, user-defined metadata, optimized I/O, and ability to query contents.\n\n\nHDF5 is a filesystem in a file: provides nested tree structure for datasets.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#using-pytables-for-hdf5",
    "href": "files-command-line.html#using-pytables-for-hdf5",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Using PyTables for HDF5",
    "text": "Using PyTables for HDF5\nimport tables as tb\n\nPyTables provides five basic dataset classes:\n\n\nArray: homogeneous components, fixed size; great for numerical data\nCArray: chunked arrays\nEArray: extendable arrays\nVLArray: variable-length arrays\nTable: structured collection of records whose values are stored in fixed-length fields",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#section",
    "href": "files-command-line.html#section",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "Constructs need to be composed of atomic types:\n\nbool: true or false type\nint: signed integer types\nuint: unsigned integer types\nfloat: floating-point types\ncomplex: complex floating-point types\nstring: fixed-length raw string type\n\n\nAlso: Groups, links, and hidden nodes",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#getting-started-with-hdf5-files",
    "href": "files-command-line.html#getting-started-with-hdf5-files",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Getting started with HDF5 files",
    "text": "Getting started with HDF5 files\nimport tables as tb\nh5file = tb.open_file('/path/to/file', 'a')\n...\n\n… or, better yet:\n\nimport tables as tb\nwith tb.open_file('/path/to/file', 'a') as h5file:\n    ...",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#hdf5-file-modes",
    "href": "files-command-line.html#hdf5-file-modes",
    "title": "Intro to files and command-line inputs in Python",
    "section": "HDF5 file modes",
    "text": "HDF5 file modes\n\n'r': Read-only; no data can be modified.\n'w': Write; create a new file (delete existing file with that name).\n'a': Append; open existing file for reading or writing, or create new file.\n'r+': Similar to a, but file must exist.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#hdf5-basics",
    "href": "files-command-line.html#hdf5-basics",
    "title": "Intro to files and command-line inputs in Python",
    "section": "HDF5 basics",
    "text": "HDF5 basics\n\nHDF5 files: all nodes stem from root node: / or h5file.root\n\n\nNatural naming: can access subnodes as attributes of “parent” nodes, like h5file.root.a_group.some_data\n\n\n(all relevant nodes in the tree must have names that are valid Python variable names)",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#creating-nodes-arrays-and-tables",
    "href": "files-command-line.html#creating-nodes-arrays-and-tables",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Creating nodes, arrays, and tables",
    "text": "Creating nodes, arrays, and tables\n\nCreate and access a group on the root node:\nh5file.create_group(h5file.root, 'a_group', \"My Group\")\nh5file.root.a_group\n\n\nDatasets: arrays and tables, each with a corresponding create method:\n\n\nArrays are fixed size, must be created with data.\nTables have a set data type but are variable length, so we can append to them after creation.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#creating-nodes-arrays-and-tables-1",
    "href": "files-command-line.html#creating-nodes-arrays-and-tables-1",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Creating nodes, arrays, and tables",
    "text": "Creating nodes, arrays, and tables\n# integer array\nh5file.create_array(h5file.root.a_group, 'arthur_count', [1, 2, 5, 3])\n\n# tables need descriptions\ndt = np.dtype([('id', int), ('name', 'S10')])\nknights = np.array([(42, 'Lancelot'), (12, 'Bedivere')], dtype=dt)\nh5file.create_table(h5file.root, 'knights', dt)\nh5file.root.knights.append(knights)\n\nHierarchy at this point:\n/\n|-- a_group/\n|   |-- arther_count\n|\n|-- knights",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#arrays-tables-preserve-original-flavor",
    "href": "files-command-line.html#arrays-tables-preserve-original-flavor",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Arrays & tables preserve original flavor",
    "text": "Arrays & tables preserve original flavor\nh5file.root.a_group.arthur_count[:]\ntype(h5file.root.a_group.arthur_count[:])\ntype(h5file.root.a_group.arthur_count)\nh5file.root.knights[1] # pull out second row\n\nh5file.root.knights[:1] # slice the first row\n\nmask = (h5file.root.knights.cols.id[:] &lt; 28)\nh5file.root.knights[mask] # create mask and apply to table\n\n# Fancy index the second and first rows, in that order\nh5file.root.knights[([1, 0],)]\n\nMemory mapping: pull in data from disk only as needed; HDF5 takes care of this automatically",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#can-create-rows-and-append-to-tables",
    "href": "files-command-line.html#can-create-rows-and-append-to-tables",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Can create rows and append to tables",
    "text": "Can create rows and append to tables\ntable_def = {'time': tables.Float64Col(pos=0),\n             'temperature': tables.Float64Col(pos=1),\n             'pressure': tables.Float64Col(pos=2),\n             }\nwith tables.open_file(filename, mode='w', title=\"Table title\"\n                      ) as h5file:\n    table = h5file.create_table(where=h5file.root,\n                                name='simulation',\n                                description=table_def\n                                )\n    \n    # sim is an object representing a simulation\n    \n    timestep = table.row\n    # Save initial conditions\n    timestep['time'] = sim.time\n    timestep['temperature'] = sim.temperature\n    timestep['pressure'] = sim.pressure\n    timestep.append()\n\n    # Main time integration loop\n    while sim.time &lt; time_end:\n        sim.step() # perform a single integration step\n\n        # Save new timestep information\n        timestep['time'] = sim.time\n        timestep['temperature'] = sim.temperature\n        timestep['pressure'] = sim.pressure\n\n        # Add ``timestep`` to table\n        timestep.append()\n    table.flush()",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#accessing-this-table",
    "href": "files-command-line.html#accessing-this-table",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Accessing this table",
    "text": "Accessing this table\nwith tables.open_file(filename, 'r') as h5file:\n    # Load Table with Group name simulation\n    table = h5file.root.simulation\n\n    time = table.col('time')\n    pressure = table.col('pressure')\n    temperature = table.col('temperature')\n\nThese are NumPy arrays!",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#hierarchy-layout",
    "href": "files-command-line.html#hierarchy-layout",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Hierarchy layout",
    "text": "Hierarchy layout\n# particles:  id, kind,       velocity\nparticles = [(42, 'electron', 72.0),\n             (43, 'proton', 0.1),\n             (44, 'electron', 76.8),\n             (45, 'neutron', 0.39),\n             (46, 'neutron', 0.72),\n             (47, 'neutron', 0.55),\n             (48, 'proton', 0.18),\n             (49, 'neutron', 0.23),\n             ...\n             ]\n\nIf we know we want to look at neutral and charged particles separately, then why search through all the particles all the time?",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#section-1",
    "href": "files-command-line.html#section-1",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "neutral = [(45, 'neutron',  0.39),\n           (46, 'neutron',  0.72),\n           (47, 'neutron',  0.55),\n           (49, 'neutron',  0.23),\n           ...\n           ]\n\ncharged = [(42, 'electron', 72.0),\n           (43, 'proton', 0.1),\n           (44, 'electron', 76.8),\n           (48, 'proton', 0.18),\n           ...\n           ]\n\nBut now kind is redundant in the neutral table. Let’s delete this column and rely on the structure of the tables together to dictate which table refers to what.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#section-2",
    "href": "files-command-line.html#section-2",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "neutral = [(45, 0.39),\n           (46, 0.72),\n           (47, 0.55),\n           (49, 0.23),\n           ...\n           ]\n\ncharged = [(42, 'electron', 72.0),\n           (43, 'proton', 0.1),\n           (44, 'electron', 76.8),\n           (48, 'proton', 0.18),\n           ...\n           ]\n\nWe are embedding information directly into the semantics of the hierarchy.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#section-3",
    "href": "files-command-line.html#section-3",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "We could add another layer that distinguishes the particles based on detector:\n\n/\n|-- detector1/\n|   |-- neutral\n|   |-- charged\n|\n|-- detector2/\n|   |-- neutral\n|   |-- charged\n\nData should be broken up like this to improve access time speeds. This is more efficient because there are: fewer rows to search, fewer rows to pull from disk, and fewer columns in description (decreases size of rows).",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#more-complicated-topics",
    "href": "files-command-line.html#more-complicated-topics",
    "title": "Intro to files and command-line inputs in Python",
    "section": "More complicated topics",
    "text": "More complicated topics\n\nChunking, in-core and out-of-core operations, querying, compression.\nother binary format: NetCDF, flat (meaning non-hierarchical) array-oriented format also used in scientific computing. netCDF-4 builds on HDF5, though.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#command-line-interfaces",
    "href": "files-command-line.html#command-line-interfaces",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Command-line interfaces",
    "text": "Command-line interfaces\n\nRather than only calling your package from another Python code, you can (fairly easily)create a command-line interface.\n\nmyprogram --help\n\nmyprogram --input inputfile.txt --output output.h5\n\nYou can and should also use these to change inputs or settings to your programs without modifying code.",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#simple-example",
    "href": "files-command-line.html#simple-example",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Simple example",
    "text": "Simple example\n# contents of example.py\n# import the necessary packages\nimport sys\nimport argparse\n\n# construct the argument parse and parse the arguments\nparser = argparse.ArgumentParser(\n    description='This is a simple command-line program.'\n    )\nparser.add_argument('-n', '--name', required=True,\n                    help='name of the user'\n                    )\nargs = parser.parse_args(sys.argv[1:])\n\n# display a friendly message to the user\nprint(\"Hi there {}, it's nice to meet you!\".format(args.name))\n$ python example.py --help\n$ python example.py --name Kyle",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#optional-arguments",
    "href": "files-command-line.html#optional-arguments",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Optional arguments",
    "text": "Optional arguments\n...\nparser.add_argument('-c', '--count', action='store_true',\n                    default=False,\n                    help='Count number of characters in name'\n                    )\nargs = parser.parse_args(sys.argv[1:])\n\nprint(\"Hi there {}, it's nice to meet you!\".format(args.name))\nif args.count:\n    print(\"Name length: {}\".format(len(args.name)))\n$ python example.py --help\n$ python example.py --name Kyle -c",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#optional-arguments-1",
    "href": "files-command-line.html#optional-arguments-1",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Optional arguments",
    "text": "Optional arguments\n...\nparser.add_argument('-a', '--age',\n                    default=25,\n                    type=int,\n                    help='Age of person'\n                    )\nargs = parser.parse_args(sys.argv[1:])\n\nprint(\"Hi there {}, it's nice to meet you!\".format(args.name))\nif args.count:\n    print(\"Name length: {}\".format(len(args.name)))\nprint(\"Age: {}\".format(args.age))\n$ python example.py --help\n$ python example.py --name Kyle --age 31",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#more-complex-input",
    "href": "files-command-line.html#more-complex-input",
    "title": "Intro to files and command-line inputs in Python",
    "section": "More complex input",
    "text": "More complex input\n\nFor larger/more complex input, may be better to use an input file.\n\n\nYAML is a good option for this: use pyyaml (import yaml)",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line.html#example-yaml-input-file",
    "href": "files-command-line.html#example-yaml-input-file",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Example YAML input file",
    "text": "Example YAML input file\ninput.yaml:\ncase: square cavity\nlength: 1.0\nresolution: 0.01\nvelocities:\n  - 1.0\n  - 10.0\n  - 100.0\nimport yaml\nwith open('input.yaml', 'r') as f:\n    inputs = yaml.safe_load(f)\n\nReturns a dictionary",
    "crumbs": [
      "Intro to files and command-line inputs in Python"
    ]
  },
  {
    "objectID": "files-command-line-revealjs.html#situations-for-working-with-files",
    "href": "files-command-line-revealjs.html#situations-for-working-with-files",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Situations for working with files:",
    "text": "Situations for working with files:\n\nCollaborator emails you raw data, want to look at the results\nYou want to email a collaborator data from Python\nYou need to use external code that takes input or data file (potentially 100s/1000s of times); want to automate generation of input files from data\nAn external program writes out one or more results files, and you want to read and perform analysis\nYou want to keep an intermediate calculation for debugging or validation"
  },
  {
    "objectID": "files-command-line-revealjs.html#saving-or-loading-data-file-handle-object",
    "href": "files-command-line-revealjs.html#saving-or-loading-data-file-handle-object",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Saving or loading data: file handle object",
    "text": "Saving or loading data: file handle object\nf = open('data.txt')\n\nThis does:\n\n\nMake sure data.txt exists\nCreate new handle to this file\nSet cursor position pos to start of the file, pos = 0\n\n\nThis does not read any of the file into memory, write anything to the file, or close the file."
  },
  {
    "objectID": "files-command-line-revealjs.html#file-handle-methods",
    "href": "files-command-line-revealjs.html#file-handle-methods",
    "title": "Intro to files and command-line inputs in Python",
    "section": "File handle methods",
    "text": "File handle methods\n\nf.read(n=-1): Reads in n bytes; if n=-1 or not present, read entire rest of file.\nf.readline(): Read next full line, return string with newline character.\nf.readlines(): Reads entire rest of file, returns list of strings (with newlines).\nf.seek(pos): Move file cursor to specified position.\nf.tell(): Return current position in file.\nf.write(s): Insert string s at current position.\nf.flush(): Perform all pending write operations.\nf.close(): Close file (no more reading or writing)."
  },
  {
    "objectID": "files-command-line-revealjs.html#example-read-in-matrix",
    "href": "files-command-line-revealjs.html#example-read-in-matrix",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Example: read in matrix",
    "text": "Example: read in matrix\nmatrix.txt contents:\n1,4,15,9\n0,11,7,3\n2,8,12,13\n14,5,10,6\nf = open('matrix.txt')\nmatrix = []\nfor line in f.readlines():\n    row = [int(x) for x in line.split(',')]\n    matrix.append(row)\nf.close()\n\nMake sure to close the file!"
  },
  {
    "objectID": "files-command-line-revealjs.html#how-to-do-this-better",
    "href": "files-command-line-revealjs.html#how-to-do-this-better",
    "title": "Intro to files and command-line inputs in Python",
    "section": "How to do this better?",
    "text": "How to do this better?\nUse context manager & with to automatically close:\nimport numpy as np\nwith open('matrix.txt', 'r') as f:\n    lines = f.readlines()\n\nmatrix = np.array([[int(x) for x in line.split(',')]\n                  for line in lines]\n                  )\n\n… actually, this example can be even easier:\nimport numpy as np\nmatrix = np.genfromtxt('matrix.txt', delimiter=',')"
  },
  {
    "objectID": "files-command-line-revealjs.html#file-modes",
    "href": "files-command-line-revealjs.html#file-modes",
    "title": "Intro to files and command-line inputs in Python",
    "section": "File modes",
    "text": "File modes\nWhen opening a file, by default it opens in read-only mode. Other file modes:\n\n'r': Read-only, no writing. Starts at pos = 0.\n'w': Write. Creates file if it doesn’t exist (if it does, contents are deleted). Starts at pos = 0.\n'a': Append. Opens file for writing but does not delete contents; creates file if it doesn’t exist. Starting pos is end of file.\n'+': Update. Opens for reading and writing, does not delete current contents. Starts at pos = 0."
  },
  {
    "objectID": "files-command-line-revealjs.html#more-complicated-example-read-in-matrix-and-add",
    "href": "files-command-line-revealjs.html#more-complicated-example-read-in-matrix-and-add",
    "title": "Intro to files and command-line inputs in Python",
    "section": "More-complicated example: read in matrix and add",
    "text": "More-complicated example: read in matrix and add\nwith open('matrix.txt', 'r+') as f:\n    orig = f.read()\n    f.seek(0)\n    f.write('0,0,0,0\\n')\n    f.write(orig)\n    f.write('\\n1,1,1,1')"
  },
  {
    "objectID": "files-command-line-revealjs.html#hdf-hierarchical-data-format",
    "href": "files-command-line-revealjs.html#hdf-hierarchical-data-format",
    "title": "Intro to files and command-line inputs in Python",
    "section": "HDF: Hierarchical data format",
    "text": "HDF: Hierarchical data format\n\nBasic idea: better to store structured, numerical data in binary formats over plain-text ASCII files. Why? Smaller.\n\n# small ints        # medium ints\n42   (4 bytes)      123456   (4 bytes)\n'42' (2 bytes)      '123456' (6 bytes)\n\n# near-int floats   # e-notation floats\n12.34   (8 bytes)   42.424242E+42   (8 bytes)\n'12.34' (5 bytes)   '42.424242E+42' (13 bytes)\n\nAlso, faster I/O, since binary files save in native format."
  },
  {
    "objectID": "files-command-line-revealjs.html#hdf5-hierarchical-data-format-version-5",
    "href": "files-command-line-revealjs.html#hdf5-hierarchical-data-format-version-5",
    "title": "Intro to files and command-line inputs in Python",
    "section": "HDF5: Hierarchical Data Format, version 5",
    "text": "HDF5: Hierarchical Data Format, version 5\n\nHDF5 files (.hdf5, .h5) store data in binary format.\n\n\nHDF5 provides database features like storing many datasets, user-defined metadata, optimized I/O, and ability to query contents.\n\n\nHDF5 is a filesystem in a file: provides nested tree structure for datasets."
  },
  {
    "objectID": "files-command-line-revealjs.html#using-pytables-for-hdf5",
    "href": "files-command-line-revealjs.html#using-pytables-for-hdf5",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Using PyTables for HDF5",
    "text": "Using PyTables for HDF5\nimport tables as tb\n\nPyTables provides five basic dataset classes:\n\n\nArray: homogeneous components, fixed size; great for numerical data\nCArray: chunked arrays\nEArray: extendable arrays\nVLArray: variable-length arrays\nTable: structured collection of records whose values are stored in fixed-length fields"
  },
  {
    "objectID": "files-command-line-revealjs.html#section",
    "href": "files-command-line-revealjs.html#section",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "Constructs need to be composed of atomic types:\n\nbool: true or false type\nint: signed integer types\nuint: unsigned integer types\nfloat: floating-point types\ncomplex: complex floating-point types\nstring: fixed-length raw string type\n\n\nAlso: Groups, links, and hidden nodes"
  },
  {
    "objectID": "files-command-line-revealjs.html#getting-started-with-hdf5-files",
    "href": "files-command-line-revealjs.html#getting-started-with-hdf5-files",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Getting started with HDF5 files",
    "text": "Getting started with HDF5 files\nimport tables as tb\nh5file = tb.open_file('/path/to/file', 'a')\n...\n\n… or, better yet:\n\nimport tables as tb\nwith tb.open_file('/path/to/file', 'a') as h5file:\n    ..."
  },
  {
    "objectID": "files-command-line-revealjs.html#hdf5-file-modes",
    "href": "files-command-line-revealjs.html#hdf5-file-modes",
    "title": "Intro to files and command-line inputs in Python",
    "section": "HDF5 file modes",
    "text": "HDF5 file modes\n\n'r': Read-only; no data can be modified.\n'w': Write; create a new file (delete existing file with that name).\n'a': Append; open existing file for reading or writing, or create new file.\n'r+': Similar to a, but file must exist."
  },
  {
    "objectID": "files-command-line-revealjs.html#hdf5-basics",
    "href": "files-command-line-revealjs.html#hdf5-basics",
    "title": "Intro to files and command-line inputs in Python",
    "section": "HDF5 basics",
    "text": "HDF5 basics\n\nHDF5 files: all nodes stem from root node: / or h5file.root\n\n\nNatural naming: can access subnodes as attributes of “parent” nodes, like h5file.root.a_group.some_data\n\n\n(all relevant nodes in the tree must have names that are valid Python variable names)"
  },
  {
    "objectID": "files-command-line-revealjs.html#creating-nodes-arrays-and-tables",
    "href": "files-command-line-revealjs.html#creating-nodes-arrays-and-tables",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Creating nodes, arrays, and tables",
    "text": "Creating nodes, arrays, and tables\n\nCreate and access a group on the root node:\nh5file.create_group(h5file.root, 'a_group', \"My Group\")\nh5file.root.a_group\n\n\nDatasets: arrays and tables, each with a corresponding create method:\n\n\nArrays are fixed size, must be created with data.\nTables have a set data type but are variable length, so we can append to them after creation."
  },
  {
    "objectID": "files-command-line-revealjs.html#creating-nodes-arrays-and-tables-1",
    "href": "files-command-line-revealjs.html#creating-nodes-arrays-and-tables-1",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Creating nodes, arrays, and tables",
    "text": "Creating nodes, arrays, and tables\n# integer array\nh5file.create_array(h5file.root.a_group, 'arthur_count', [1, 2, 5, 3])\n\n# tables need descriptions\ndt = np.dtype([('id', int), ('name', 'S10')])\nknights = np.array([(42, 'Lancelot'), (12, 'Bedivere')], dtype=dt)\nh5file.create_table(h5file.root, 'knights', dt)\nh5file.root.knights.append(knights)\n\nHierarchy at this point:\n/\n|-- a_group/\n|   |-- arther_count\n|\n|-- knights"
  },
  {
    "objectID": "files-command-line-revealjs.html#arrays-tables-preserve-original-flavor",
    "href": "files-command-line-revealjs.html#arrays-tables-preserve-original-flavor",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Arrays & tables preserve original flavor",
    "text": "Arrays & tables preserve original flavor\nh5file.root.a_group.arthur_count[:]\ntype(h5file.root.a_group.arthur_count[:])\ntype(h5file.root.a_group.arthur_count)\nh5file.root.knights[1] # pull out second row\n\nh5file.root.knights[:1] # slice the first row\n\nmask = (h5file.root.knights.cols.id[:] &lt; 28)\nh5file.root.knights[mask] # create mask and apply to table\n\n# Fancy index the second and first rows, in that order\nh5file.root.knights[([1, 0],)]\n\nMemory mapping: pull in data from disk only as needed; HDF5 takes care of this automatically"
  },
  {
    "objectID": "files-command-line-revealjs.html#can-create-rows-and-append-to-tables",
    "href": "files-command-line-revealjs.html#can-create-rows-and-append-to-tables",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Can create rows and append to tables",
    "text": "Can create rows and append to tables\ntable_def = {'time': tables.Float64Col(pos=0),\n             'temperature': tables.Float64Col(pos=1),\n             'pressure': tables.Float64Col(pos=2),\n             }\nwith tables.open_file(filename, mode='w', title=\"Table title\"\n                      ) as h5file:\n    table = h5file.create_table(where=h5file.root,\n                                name='simulation',\n                                description=table_def\n                                )\n    \n    # sim is an object representing a simulation\n    \n    timestep = table.row\n    # Save initial conditions\n    timestep['time'] = sim.time\n    timestep['temperature'] = sim.temperature\n    timestep['pressure'] = sim.pressure\n    timestep.append()\n\n    # Main time integration loop\n    while sim.time &lt; time_end:\n        sim.step() # perform a single integration step\n\n        # Save new timestep information\n        timestep['time'] = sim.time\n        timestep['temperature'] = sim.temperature\n        timestep['pressure'] = sim.pressure\n\n        # Add ``timestep`` to table\n        timestep.append()\n    table.flush()"
  },
  {
    "objectID": "files-command-line-revealjs.html#accessing-this-table",
    "href": "files-command-line-revealjs.html#accessing-this-table",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Accessing this table",
    "text": "Accessing this table\nwith tables.open_file(filename, 'r') as h5file:\n    # Load Table with Group name simulation\n    table = h5file.root.simulation\n\n    time = table.col('time')\n    pressure = table.col('pressure')\n    temperature = table.col('temperature')\n\nThese are NumPy arrays!"
  },
  {
    "objectID": "files-command-line-revealjs.html#hierarchy-layout",
    "href": "files-command-line-revealjs.html#hierarchy-layout",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Hierarchy layout",
    "text": "Hierarchy layout\n# particles:  id, kind,       velocity\nparticles = [(42, 'electron', 72.0),\n             (43, 'proton', 0.1),\n             (44, 'electron', 76.8),\n             (45, 'neutron', 0.39),\n             (46, 'neutron', 0.72),\n             (47, 'neutron', 0.55),\n             (48, 'proton', 0.18),\n             (49, 'neutron', 0.23),\n             ...\n             ]\n\nIf we know we want to look at neutral and charged particles separately, then why search through all the particles all the time?"
  },
  {
    "objectID": "files-command-line-revealjs.html#section-1",
    "href": "files-command-line-revealjs.html#section-1",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "neutral = [(45, 'neutron',  0.39),\n           (46, 'neutron',  0.72),\n           (47, 'neutron',  0.55),\n           (49, 'neutron',  0.23),\n           ...\n           ]\n\ncharged = [(42, 'electron', 72.0),\n           (43, 'proton', 0.1),\n           (44, 'electron', 76.8),\n           (48, 'proton', 0.18),\n           ...\n           ]\n\nBut now kind is redundant in the neutral table. Let’s delete this column and rely on the structure of the tables together to dictate which table refers to what."
  },
  {
    "objectID": "files-command-line-revealjs.html#section-2",
    "href": "files-command-line-revealjs.html#section-2",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "neutral = [(45, 0.39),\n           (46, 0.72),\n           (47, 0.55),\n           (49, 0.23),\n           ...\n           ]\n\ncharged = [(42, 'electron', 72.0),\n           (43, 'proton', 0.1),\n           (44, 'electron', 76.8),\n           (48, 'proton', 0.18),\n           ...\n           ]\n\nWe are embedding information directly into the semantics of the hierarchy."
  },
  {
    "objectID": "files-command-line-revealjs.html#section-3",
    "href": "files-command-line-revealjs.html#section-3",
    "title": "Intro to files and command-line inputs in Python",
    "section": "",
    "text": "We could add another layer that distinguishes the particles based on detector:\n\n/\n|-- detector1/\n|   |-- neutral\n|   |-- charged\n|\n|-- detector2/\n|   |-- neutral\n|   |-- charged\n\nData should be broken up like this to improve access time speeds. This is more efficient because there are: fewer rows to search, fewer rows to pull from disk, and fewer columns in description (decreases size of rows)."
  },
  {
    "objectID": "files-command-line-revealjs.html#more-complicated-topics",
    "href": "files-command-line-revealjs.html#more-complicated-topics",
    "title": "Intro to files and command-line inputs in Python",
    "section": "More complicated topics",
    "text": "More complicated topics\n\nChunking, in-core and out-of-core operations, querying, compression.\nother binary format: NetCDF, flat (meaning non-hierarchical) array-oriented format also used in scientific computing. netCDF-4 builds on HDF5, though."
  },
  {
    "objectID": "files-command-line-revealjs.html#command-line-interfaces",
    "href": "files-command-line-revealjs.html#command-line-interfaces",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Command-line interfaces",
    "text": "Command-line interfaces\n\nRather than only calling your package from another Python code, you can (fairly easily)create a command-line interface.\n\nmyprogram --help\n\nmyprogram --input inputfile.txt --output output.h5\n\nYou can and should also use these to change inputs or settings to your programs without modifying code."
  },
  {
    "objectID": "files-command-line-revealjs.html#simple-example",
    "href": "files-command-line-revealjs.html#simple-example",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Simple example",
    "text": "Simple example\n# contents of example.py\n# import the necessary packages\nimport sys\nimport argparse\n\n# construct the argument parse and parse the arguments\nparser = argparse.ArgumentParser(\n    description='This is a simple command-line program.'\n    )\nparser.add_argument('-n', '--name', required=True,\n                    help='name of the user'\n                    )\nargs = parser.parse_args(sys.argv[1:])\n\n# display a friendly message to the user\nprint(\"Hi there {}, it's nice to meet you!\".format(args.name))\n$ python example.py --help\n$ python example.py --name Kyle"
  },
  {
    "objectID": "files-command-line-revealjs.html#optional-arguments",
    "href": "files-command-line-revealjs.html#optional-arguments",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Optional arguments",
    "text": "Optional arguments\n...\nparser.add_argument('-c', '--count', action='store_true',\n                    default=False,\n                    help='Count number of characters in name'\n                    )\nargs = parser.parse_args(sys.argv[1:])\n\nprint(\"Hi there {}, it's nice to meet you!\".format(args.name))\nif args.count:\n    print(\"Name length: {}\".format(len(args.name)))\n$ python example.py --help\n$ python example.py --name Kyle -c"
  },
  {
    "objectID": "files-command-line-revealjs.html#optional-arguments-1",
    "href": "files-command-line-revealjs.html#optional-arguments-1",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Optional arguments",
    "text": "Optional arguments\n...\nparser.add_argument('-a', '--age',\n                    default=25,\n                    type=int,\n                    help='Age of person'\n                    )\nargs = parser.parse_args(sys.argv[1:])\n\nprint(\"Hi there {}, it's nice to meet you!\".format(args.name))\nif args.count:\n    print(\"Name length: {}\".format(len(args.name)))\nprint(\"Age: {}\".format(args.age))\n$ python example.py --help\n$ python example.py --name Kyle --age 31"
  },
  {
    "objectID": "files-command-line-revealjs.html#more-complex-input",
    "href": "files-command-line-revealjs.html#more-complex-input",
    "title": "Intro to files and command-line inputs in Python",
    "section": "More complex input",
    "text": "More complex input\n\nFor larger/more complex input, may be better to use an input file.\n\n\nYAML is a good option for this: use pyyaml (import yaml)"
  },
  {
    "objectID": "files-command-line-revealjs.html#example-yaml-input-file",
    "href": "files-command-line-revealjs.html#example-yaml-input-file",
    "title": "Intro to files and command-line inputs in Python",
    "section": "Example YAML input file",
    "text": "Example YAML input file\ninput.yaml:\ncase: square cavity\nlength: 1.0\nresolution: 0.01\nvelocities:\n  - 1.0\n  - 10.0\n  - 100.0\nimport yaml\nwith open('input.yaml', 'r') as f:\n    inputs = yaml.safe_load(f)\n\nReturns a dictionary"
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Learning computational skills to be successful in modern research\nDeveloping a software package from scratch for your research\n\n\n\n\n\nLearning how to program in Python\nThose who aren’t comfortable doing open-ended, self-directed work.\n\n\n\n\nNearly all research relies on software—even experimental—but researchers don’t get trained in best practices in the same way as experimental methods.\n\n\n\n\nComputational environment management\nVersion control\nCollaborative software development\nStructuring programs\nWorking with files\nImproving performance, parallelization\nReproducible research\nWriting about software, documentation\nSharing software openly, copyright",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#what-this-class-is-for",
    "href": "getting-started.html#what-this-class-is-for",
    "title": "Getting Started",
    "section": "",
    "text": "Learning computational skills to be successful in modern research\nDeveloping a software package from scratch for your research",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#what-this-class-isnt-for",
    "href": "getting-started.html#what-this-class-isnt-for",
    "title": "Getting Started",
    "section": "",
    "text": "Learning how to program in Python\nThose who aren’t comfortable doing open-ended, self-directed work.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#motivation",
    "href": "getting-started.html#motivation",
    "title": "Getting Started",
    "section": "",
    "text": "Nearly all research relies on software—even experimental—but researchers don’t get trained in best practices in the same way as experimental methods.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#what-are-we-going-to-learn-about",
    "href": "getting-started.html#what-are-we-going-to-learn-about",
    "title": "Getting Started",
    "section": "",
    "text": "Computational environment management\nVersion control\nCollaborative software development\nStructuring programs\nWorking with files\nImproving performance, parallelization\nReproducible research\nWriting about software, documentation\nSharing software openly, copyright",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#who-are-you-quick-introductions",
    "href": "getting-started.html#who-are-you-quick-introductions",
    "title": "Getting Started",
    "section": "Who are you? Quick introductions",
    "text": "Who are you? Quick introductions\n\nMajors / research areas?\nExperience level in Python / programming\nExperience level with command line\nMac, Linux, or Windows?",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#who-am-i",
    "href": "getting-started.html#who-am-i",
    "title": "Getting Started",
    "section": "Who am I?",
    "text": "Who am I?\n\nDr. Kyle Niemeyer, Associate Professor of Mechanical Engineering\nBackground: computational combustion modeling, fluid dynamics\nLanguages: Matlab -&gt; Fortran -&gt; C/C++/CUDA -&gt; Python",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#online-resources",
    "href": "getting-started.html#online-resources",
    "title": "Getting Started",
    "section": "Online resources",
    "text": "Online resources\n\nSyllabus: on Canvas\nGitHub organization: https://github.com/SoftwareDevEngResearch\nOther resources: linked on Canvas\nSlack chat room (linked on Canvas)",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#textbook",
    "href": "getting-started.html#textbook",
    "title": "Getting Started",
    "section": "Textbook",
    "text": "Textbook\n\nhttp://physics.codes/\nChapters 1–6 should be review",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#project",
    "href": "getting-started.html#project",
    "title": "Getting Started",
    "section": "Project",
    "text": "Project\nMost of your work in the class will be centered around a project developing a new software package for your research.\nAssignments will focus on development stages for your software package.\nFirst assignment: project proposal, due January 17.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started-revealjs.html#what-this-class-is-for",
    "href": "getting-started-revealjs.html#what-this-class-is-for",
    "title": "Getting Started",
    "section": "What this class is for:",
    "text": "What this class is for:\n\nLearning computational skills to be successful in modern research\nDeveloping a software package from scratch for your research\n\n\n\nThis class is only intended for MS and PhD students working on thesis/dissertation research."
  },
  {
    "objectID": "getting-started-revealjs.html#what-this-class-isnt-for",
    "href": "getting-started-revealjs.html#what-this-class-isnt-for",
    "title": "Getting Started",
    "section": "What this class isn’t for:",
    "text": "What this class isn’t for:\n\nLearning how to program in Python\nThose who aren’t comfortable doing open-ended, self-directed work.\n\n\n\nThough you will learn more about programming and Python, you absolutely need to have some skills already."
  },
  {
    "objectID": "getting-started-revealjs.html#motivation",
    "href": "getting-started-revealjs.html#motivation",
    "title": "Getting Started",
    "section": "Motivation",
    "text": "Motivation\nNearly all research relies on software—even experimental—but researchers don’t get trained in best practices in the same way as experimental methods."
  },
  {
    "objectID": "getting-started-revealjs.html#what-are-we-going-to-learn-about",
    "href": "getting-started-revealjs.html#what-are-we-going-to-learn-about",
    "title": "Getting Started",
    "section": "What are we going to learn about?",
    "text": "What are we going to learn about?\n\nComputational environment management\nVersion control\nCollaborative software development\nStructuring programs\nWorking with files\nImproving performance, parallelization\nReproducible research\nWriting about software, documentation\nSharing software openly, copyright"
  },
  {
    "objectID": "getting-started-revealjs.html#anything-missing",
    "href": "getting-started-revealjs.html#anything-missing",
    "title": "Getting Started",
    "section": "Anything missing?",
    "text": "Anything missing?"
  },
  {
    "objectID": "getting-started-revealjs.html#who-are-you-quick-introductions",
    "href": "getting-started-revealjs.html#who-are-you-quick-introductions",
    "title": "Getting Started",
    "section": "Who are you? Quick introductions",
    "text": "Who are you? Quick introductions\n\nMajors / research areas?\nExperience level in Python / programming\nExperience level with command line\nMac, Linux, or Windows?"
  },
  {
    "objectID": "getting-started-revealjs.html#who-am-i",
    "href": "getting-started-revealjs.html#who-am-i",
    "title": "Getting Started",
    "section": "Who am I?",
    "text": "Who am I?\n\nDr. Kyle Niemeyer, Associate Professor of Mechanical Engineering\nBackground: computational combustion modeling, fluid dynamics\nLanguages: Matlab -&gt; Fortran -&gt; C/C++/CUDA -&gt; Python"
  },
  {
    "objectID": "getting-started-revealjs.html#online-resources",
    "href": "getting-started-revealjs.html#online-resources",
    "title": "Getting Started",
    "section": "Online resources",
    "text": "Online resources\n\nSyllabus: on Canvas\nGitHub organization: https://github.com/SoftwareDevEngResearch\nOther resources: linked on Canvas\nSlack chat room (linked on Canvas)"
  },
  {
    "objectID": "getting-started-revealjs.html#textbook",
    "href": "getting-started-revealjs.html#textbook",
    "title": "Getting Started",
    "section": "Textbook",
    "text": "Textbook\n\nhttp://physics.codes/\nChapters 1–6 should be review"
  },
  {
    "objectID": "getting-started-revealjs.html#project",
    "href": "getting-started-revealjs.html#project",
    "title": "Getting Started",
    "section": "Project",
    "text": "Project\nMost of your work in the class will be centered around a project developing a new software package for your research.\nAssignments will focus on development stages for your software package.\nFirst assignment: project proposal, due January 17."
  }
]