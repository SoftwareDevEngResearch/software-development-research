[
  {
    "objectID": "getting-started-revealjs.html#what-this-class-is-for",
    "href": "getting-started-revealjs.html#what-this-class-is-for",
    "title": "Getting Started",
    "section": "What this class is for:",
    "text": "What this class is for:\n\nLearning computational skills to be successful in modern research\nDeveloping a software package from scratch for your research\n\n\n\nThis class is only intended for MS and PhD students working on thesis/dissertation research."
  },
  {
    "objectID": "getting-started-revealjs.html#what-this-class-isnt-for",
    "href": "getting-started-revealjs.html#what-this-class-isnt-for",
    "title": "Getting Started",
    "section": "What this class isn’t for:",
    "text": "What this class isn’t for:\n\nLearning how to program in Python\nThose who aren’t comfortable doing open-ended, self-directed work.\n\n\n\nThough you will learn more about programming and Python, you absolutely need to have some skills already."
  },
  {
    "objectID": "getting-started-revealjs.html#motivation",
    "href": "getting-started-revealjs.html#motivation",
    "title": "Getting Started",
    "section": "Motivation",
    "text": "Motivation\nNearly all research relies on software—even experimental—but researchers don’t get trained in best practices in the same way as experimental methods."
  },
  {
    "objectID": "getting-started-revealjs.html#what-are-we-going-to-learn-about",
    "href": "getting-started-revealjs.html#what-are-we-going-to-learn-about",
    "title": "Getting Started",
    "section": "What are we going to learn about?",
    "text": "What are we going to learn about?\n\nComputational environment management\nVersion control\nCollaborative software development\nStructuring programs\nWorking with files\nImproving performance, parallelization\nReproducible research\nWriting about software, documentation\nSharing software openly, copyright"
  },
  {
    "objectID": "getting-started-revealjs.html#anything-missing",
    "href": "getting-started-revealjs.html#anything-missing",
    "title": "Getting Started",
    "section": "Anything missing?",
    "text": "Anything missing?"
  },
  {
    "objectID": "getting-started-revealjs.html#who-are-you-quick-introductions",
    "href": "getting-started-revealjs.html#who-are-you-quick-introductions",
    "title": "Getting Started",
    "section": "Who are you? Quick introductions",
    "text": "Who are you? Quick introductions\n\nMajors / research areas?\nExperience level in Python / programming\nExperience level with command line\nMac, Linux, or Windows?"
  },
  {
    "objectID": "getting-started-revealjs.html#who-am-i",
    "href": "getting-started-revealjs.html#who-am-i",
    "title": "Getting Started",
    "section": "Who am I?",
    "text": "Who am I?\n\nDr. Kyle Niemeyer, Associate Professor of Mechanical Engineering\nBackground: computational combustion modeling, fluid dynamics\nLanguages: Matlab -&gt; Fortran -&gt; C/C++/CUDA -&gt; Python"
  },
  {
    "objectID": "getting-started-revealjs.html#online-resources",
    "href": "getting-started-revealjs.html#online-resources",
    "title": "Getting Started",
    "section": "Online resources",
    "text": "Online resources\n\nSyllabus: on Canvas\nGitHub organization: https://github.com/SoftwareDevEngResearch\nOther resources: linked on Canvas\nSlack chat room (linked on Canvas)"
  },
  {
    "objectID": "getting-started-revealjs.html#textbook",
    "href": "getting-started-revealjs.html#textbook",
    "title": "Getting Started",
    "section": "Textbook",
    "text": "Textbook\n\nhttp://physics.codes/\nChapters 1–6 should be review"
  },
  {
    "objectID": "getting-started-revealjs.html#project",
    "href": "getting-started-revealjs.html#project",
    "title": "Getting Started",
    "section": "Project",
    "text": "Project\nMost of your work in the class will be centered around a project developing a new software package for your research.\nAssignments will focus on development stages for your software package.\nFirst assignment: project proposal, due January 17."
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Learning computational skills to be successful in modern research\nDeveloping a software package from scratch for your research\n\n\n\n\n\nLearning how to program in Python\nThose who aren’t comfortable doing open-ended, self-directed work.\n\n\n\n\nNearly all research relies on software—even experimental—but researchers don’t get trained in best practices in the same way as experimental methods.\n\n\n\n\nComputational environment management\nVersion control\nCollaborative software development\nStructuring programs\nWorking with files\nImproving performance, parallelization\nReproducible research\nWriting about software, documentation\nSharing software openly, copyright",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#what-this-class-is-for",
    "href": "getting-started.html#what-this-class-is-for",
    "title": "Getting Started",
    "section": "",
    "text": "Learning computational skills to be successful in modern research\nDeveloping a software package from scratch for your research",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#what-this-class-isnt-for",
    "href": "getting-started.html#what-this-class-isnt-for",
    "title": "Getting Started",
    "section": "",
    "text": "Learning how to program in Python\nThose who aren’t comfortable doing open-ended, self-directed work.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#motivation",
    "href": "getting-started.html#motivation",
    "title": "Getting Started",
    "section": "",
    "text": "Nearly all research relies on software—even experimental—but researchers don’t get trained in best practices in the same way as experimental methods.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#what-are-we-going-to-learn-about",
    "href": "getting-started.html#what-are-we-going-to-learn-about",
    "title": "Getting Started",
    "section": "",
    "text": "Computational environment management\nVersion control\nCollaborative software development\nStructuring programs\nWorking with files\nImproving performance, parallelization\nReproducible research\nWriting about software, documentation\nSharing software openly, copyright",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#who-are-you-quick-introductions",
    "href": "getting-started.html#who-are-you-quick-introductions",
    "title": "Getting Started",
    "section": "Who are you? Quick introductions",
    "text": "Who are you? Quick introductions\n\nMajors / research areas?\nExperience level in Python / programming\nExperience level with command line\nMac, Linux, or Windows?",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#who-am-i",
    "href": "getting-started.html#who-am-i",
    "title": "Getting Started",
    "section": "Who am I?",
    "text": "Who am I?\n\nDr. Kyle Niemeyer, Associate Professor of Mechanical Engineering\nBackground: computational combustion modeling, fluid dynamics\nLanguages: Matlab -&gt; Fortran -&gt; C/C++/CUDA -&gt; Python",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#online-resources",
    "href": "getting-started.html#online-resources",
    "title": "Getting Started",
    "section": "Online resources",
    "text": "Online resources\n\nSyllabus: on Canvas\nGitHub organization: https://github.com/SoftwareDevEngResearch\nOther resources: linked on Canvas\nSlack chat room (linked on Canvas)",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#textbook",
    "href": "getting-started.html#textbook",
    "title": "Getting Started",
    "section": "Textbook",
    "text": "Textbook\n\nhttp://physics.codes/\nChapters 1–6 should be review",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting-started.html#project",
    "href": "getting-started.html#project",
    "title": "Getting Started",
    "section": "Project",
    "text": "Project\nMost of your work in the class will be centered around a project developing a new software package for your research.\nAssignments will focus on development stages for your software package.\nFirst assignment: project proposal, due January 17.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Software Development for Research",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "version-control-revealjs.html#where-is-version-control-needed",
    "href": "version-control-revealjs.html#where-is-version-control-needed",
    "title": "Introduction to version control with Git",
    "section": "Where is version control needed?",
    "text": "Where is version control needed?\n\nBacking up changing files\nStoring and accessing an annotated history of changes\nManaging the merging of changes between different change sets"
  },
  {
    "objectID": "version-control-revealjs.html#why-is-this-important",
    "href": "version-control-revealjs.html#why-is-this-important",
    "title": "Introduction to version control with Git",
    "section": "Why is this important?",
    "text": "Why is this important?\n\n\n\nImage credit: Jorge Cham, PhD Comics"
  },
  {
    "objectID": "version-control-revealjs.html#saving-copies",
    "href": "version-control-revealjs.html#saving-copies",
    "title": "Introduction to version control with Git",
    "section": "Saving copies",
    "text": "Saving copies\n\n important_code.py\n\n\n important_code-2.py\n\n\n important_code-fix.py\n\n\n important_code-final.py\n\n\n important_code-final-4Apr.py"
  },
  {
    "objectID": "version-control-revealjs.html#git-commits",
    "href": "version-control-revealjs.html#git-commits",
    "title": "Introduction to version control with Git",
    "section": "Git commits",
    "text": "Git commits\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py"
  },
  {
    "objectID": "version-control-revealjs.html#types-of-version-control",
    "href": "version-control-revealjs.html#types-of-version-control",
    "title": "Introduction to version control with Git",
    "section": "Types of version control",
    "text": "Types of version control\n\nCentralized:\n\n\nConcurrent Version System (cvs)\nSubversion (svn)\nPerforce (p4)\n\n\nDistributed:\n\n\nDecentralized CVS (dcvs)\nmercurial (hg)\nbazaar (bzr)\nGit (git)"
  },
  {
    "objectID": "version-control-revealjs.html#git",
    "href": "version-control-revealjs.html#git",
    "title": "Introduction to version control with Git",
    "section": "Git",
    "text": "Git\n\n\nGit is a knife whose handle is also a knife. – Philip Guo"
  },
  {
    "objectID": "version-control-revealjs.html#section",
    "href": "version-control-revealjs.html#section",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "$ git --help\n\n$ git config --global user.name \"Kyle Niemeyer\"\n$ git config --global user.email \"kyle.niemeyer@oregonstate.edu\"\n$ git config --global core.editor \"vim\""
  },
  {
    "objectID": "version-control-revealjs.html#section-1",
    "href": "version-control-revealjs.html#section-1",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "~ $ mkdir analysis_code\n~ $ cd analysis_code\n\n~/analysis_code $ git init\nInitialized empty Git repository in ~/analysis_code/.git/"
  },
  {
    "objectID": "version-control-revealjs.html#section-2",
    "href": "version-control-revealjs.html#section-2",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "~/analysis_code $ ls\n~/analysis_code $ ls -A\n.git\n\n~/analysis_code $ cd .git && ls -A\nHEAD    config    description    hooks    index    info    logs\n\n\n\n\n\n\n\nTip\n\n\nTry this yourself."
  },
  {
    "objectID": "version-control-revealjs.html#adding-files",
    "href": "version-control-revealjs.html#adding-files",
    "title": "Introduction to version control with Git",
    "section": "Adding files",
    "text": "Adding files\n~/analysis_code $ touch README.md\n~/analysis_code $ git add README.md\n~/analysis_code $ git status\n\n\n\n\n\n\n\nTip\n\n\nTry this yourself."
  },
  {
    "objectID": "version-control-revealjs.html#committing-changes",
    "href": "version-control-revealjs.html#committing-changes",
    "title": "Introduction to version control with Git",
    "section": "Committing changes",
    "text": "Committing changes\n\nSnapshot of repository = revision\n\n\nCommitting a revision:\n\n\nSaves current state with a unique ID (hash)\nNames you as the author\nAllows you to add a message\n\n~/analysis_code $ git commit\n\n\n\n\n\n\n\nTip\n\n\nTry this yourself."
  },
  {
    "objectID": "version-control-revealjs.html#options-to-save-time",
    "href": "version-control-revealjs.html#options-to-save-time",
    "title": "Introduction to version control with Git",
    "section": "Options to save time",
    "text": "Options to save time\n~/analysis_code $ git commit -m \"This is my message\"\n~/analysis_code $ git commit -am \"This is my message \n                  committing all changes\""
  },
  {
    "objectID": "version-control-revealjs.html#commit-messages",
    "href": "version-control-revealjs.html#commit-messages",
    "title": "Introduction to version control with Git",
    "section": "Commit messages",
    "text": "Commit messages\n\nBad commit message:\n\nFixed bug\n\nBetter commit message:\n\nFixed bug in mass calculation\n\nDue to incorrect density value, mass was being calculated\norders of magnitude larger than it should. The correct value\nof density fixed this problem."
  },
  {
    "objectID": "version-control-revealjs.html#viewing-history-and-differences",
    "href": "version-control-revealjs.html#viewing-history-and-differences",
    "title": "Introduction to version control with Git",
    "section": "Viewing history and differences",
    "text": "Viewing history and differences\n~/analysis_code $ git log\n~/analysis_code $ git diff"
  },
  {
    "objectID": "version-control-revealjs.html#undoing-work",
    "href": "version-control-revealjs.html#undoing-work",
    "title": "Introduction to version control with Git",
    "section": "Undoing work",
    "text": "Undoing work\n\nUn-add a file that has been staged:\n\n~/analysis_code $ git restore --staged &lt;filename&gt;\n\nReset all tracked files to previous commit:\n\n~/analysis_code $ git reset [mode] [commit]\n\nRemove uncommitted changes:\n\n~/analysis_code $ git checkout -- &lt;filename&gt;"
  },
  {
    "objectID": "version-control-revealjs.html#branches",
    "href": "version-control-revealjs.html#branches",
    "title": "Introduction to version control with Git",
    "section": "Branches",
    "text": "Branches\n~/analysis_code $ git branch\n* main\n\n~/analysis_code $ git branch experimental\n~/analysis_code $ git branch\n  experimental\n* main\n\n~/analysis_code $ git branch new\n~/analysis_code $ git branch\n  experimental\n* main\n  new\n\n~/analysis_code $ git branch -d new\n~/analysis_code $ git branch\n  experimental\n* main\n\n~/analysis_code $ git switch experimental\n~/analysis_code $ git branch\n* experimental\n  main"
  },
  {
    "objectID": "version-control-revealjs.html#merging-branches",
    "href": "version-control-revealjs.html#merging-branches",
    "title": "Introduction to version control with Git",
    "section": "Merging branches",
    "text": "Merging branches\n~/analysis_code $ git switch main\n~/analysis_code $ git merge experimental\n~/analysis_code $ git log"
  },
  {
    "objectID": "version-control.html",
    "href": "version-control.html",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Backing up changing files\nStoring and accessing an annotated history of changes\nManaging the merging of changes between different change sets\n\n\n\n\n\n\n\nImage credit: Jorge Cham, PhD Comics\n\n\n\n\n\n\n important_code.py\n\n\n important_code-2.py\n\n\n important_code-fix.py\n\n\n important_code-final.py\n\n\n important_code-final-4Apr.py\n\n\n\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n\n\n\nCentralized:\n\n\nConcurrent Version System (cvs)\nSubversion (svn)\nPerforce (p4)\n\n\nDistributed:\n\n\nDecentralized CVS (dcvs)\nmercurial (hg)\nbazaar (bzr)\nGit (git)\n\n\n\n\n\n\nGit is a knife whose handle is also a knife. – Philip Guo\n\n\n\n\n\nImage credit: xkcd",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#where-is-version-control-needed",
    "href": "version-control.html#where-is-version-control-needed",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Backing up changing files\nStoring and accessing an annotated history of changes\nManaging the merging of changes between different change sets",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#why-is-this-important",
    "href": "version-control.html#why-is-this-important",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Image credit: Jorge Cham, PhD Comics",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#saving-copies",
    "href": "version-control.html#saving-copies",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "important_code.py\n\n\n important_code-2.py\n\n\n important_code-fix.py\n\n\n important_code-final.py\n\n\n important_code-final-4Apr.py",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#git-commits",
    "href": "version-control.html#git-commits",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py\n\n\n important_code.py",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#types-of-version-control",
    "href": "version-control.html#types-of-version-control",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Centralized:\n\n\nConcurrent Version System (cvs)\nSubversion (svn)\nPerforce (p4)\n\n\nDistributed:\n\n\nDecentralized CVS (dcvs)\nmercurial (hg)\nbazaar (bzr)\nGit (git)",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#git",
    "href": "version-control.html#git",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "Git is a knife whose handle is also a knife. – Philip Guo\n\n\n\n\n\nImage credit: xkcd",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#section",
    "href": "version-control.html#section",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "$ git --help\n\n$ git config --global user.name \"Kyle Niemeyer\"\n$ git config --global user.email \"kyle.niemeyer@oregonstate.edu\"\n$ git config --global core.editor \"vim\"",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#section-1",
    "href": "version-control.html#section-1",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "~ $ mkdir analysis_code\n~ $ cd analysis_code\n\n~/analysis_code $ git init\nInitialized empty Git repository in ~/analysis_code/.git/",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#section-2",
    "href": "version-control.html#section-2",
    "title": "Introduction to version control with Git",
    "section": "",
    "text": "~/analysis_code $ ls\n~/analysis_code $ ls -A\n.git\n\n~/analysis_code $ cd .git && ls -A\nHEAD    config    description    hooks    index    info    logs\n\n\n\n\n\n\nTip\n\n\n\nTry this yourself.",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#adding-files",
    "href": "version-control.html#adding-files",
    "title": "Introduction to version control with Git",
    "section": "Adding files",
    "text": "Adding files\n~/analysis_code $ touch README.md\n~/analysis_code $ git add README.md\n~/analysis_code $ git status\n\n\n\n\n\n\nTip\n\n\n\nTry this yourself.",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#committing-changes",
    "href": "version-control.html#committing-changes",
    "title": "Introduction to version control with Git",
    "section": "Committing changes",
    "text": "Committing changes\n\nSnapshot of repository = revision\n\n\nCommitting a revision:\n\n\nSaves current state with a unique ID (hash)\nNames you as the author\nAllows you to add a message\n\n~/analysis_code $ git commit\n\n\n\n\n\n\nTip\n\n\n\nTry this yourself.",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#options-to-save-time",
    "href": "version-control.html#options-to-save-time",
    "title": "Introduction to version control with Git",
    "section": "Options to save time",
    "text": "Options to save time\n~/analysis_code $ git commit -m \"This is my message\"\n~/analysis_code $ git commit -am \"This is my message \n                  committing all changes\"",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#commit-messages",
    "href": "version-control.html#commit-messages",
    "title": "Introduction to version control with Git",
    "section": "Commit messages",
    "text": "Commit messages\n\nBad commit message:\n\nFixed bug\n\nBetter commit message:\n\nFixed bug in mass calculation\n\nDue to incorrect density value, mass was being calculated\norders of magnitude larger than it should. The correct value\nof density fixed this problem.\n\n\n\n\nImage credit: xkcd",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#viewing-history-and-differences",
    "href": "version-control.html#viewing-history-and-differences",
    "title": "Introduction to version control with Git",
    "section": "Viewing history and differences",
    "text": "Viewing history and differences\n~/analysis_code $ git log\n~/analysis_code $ git diff",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#undoing-work",
    "href": "version-control.html#undoing-work",
    "title": "Introduction to version control with Git",
    "section": "Undoing work",
    "text": "Undoing work\n\nUn-add a file that has been staged:\n\n~/analysis_code $ git restore --staged &lt;filename&gt;\n\nReset all tracked files to previous commit:\n\n~/analysis_code $ git reset [mode] [commit]\n\nRemove uncommitted changes:\n\n~/analysis_code $ git checkout -- &lt;filename&gt;",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#branches",
    "href": "version-control.html#branches",
    "title": "Introduction to version control with Git",
    "section": "Branches",
    "text": "Branches\n~/analysis_code $ git branch\n* main\n\n~/analysis_code $ git branch experimental\n~/analysis_code $ git branch\n  experimental\n* main\n\n~/analysis_code $ git branch new\n~/analysis_code $ git branch\n  experimental\n* main\n  new\n\n~/analysis_code $ git branch -d new\n~/analysis_code $ git branch\n  experimental\n* main\n\n~/analysis_code $ git switch experimental\n~/analysis_code $ git branch\n* experimental\n  main",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "version-control.html#merging-branches",
    "href": "version-control.html#merging-branches",
    "title": "Introduction to version control with Git",
    "section": "Merging branches",
    "text": "Merging branches\n~/analysis_code $ git switch main\n~/analysis_code $ git merge experimental\n~/analysis_code $ git log",
    "crumbs": [
      "Introduction to version control with Git"
    ]
  },
  {
    "objectID": "managing-environment-revealjs.html#power-of-python-for-research-comes-from-rich-ecosystem-of-third-party-packages",
    "href": "managing-environment-revealjs.html#power-of-python-for-research-comes-from-rich-ecosystem-of-third-party-packages",
    "title": "Managing your computational environment",
    "section": "Power of Python for research comes from rich ecosystem of third-party packages",
    "text": "Power of Python for research comes from rich ecosystem of third-party packages\n\nThese include general numerical and scientific tools like NumPy, SciPy, and Pandas, and domain-specific software like Cantera. You should rely on mature packages that provide useful features when possible—don’t reinvent the wheel!\n\n\nBut, each software package has its own set of dependencies, and might require a specific version of some other package (like when a newer version breaks or changes some functionality)."
  },
  {
    "objectID": "managing-environment-revealjs.html#your-results-may-depend-on-the-specific-versions-and-combination-of-packages-you-have-installed.",
    "href": "managing-environment-revealjs.html#your-results-may-depend-on-the-specific-versions-and-combination-of-packages-you-have-installed.",
    "title": "Managing your computational environment",
    "section": "Your results may depend on the specific versions and combination of packages you have installed.",
    "text": "Your results may depend on the specific versions and combination of packages you have installed.\n\nThis is particularly important for research analysis."
  },
  {
    "objectID": "managing-environment-revealjs.html#as-a-rule-dont-install-packages-into-your-global-environment",
    "href": "managing-environment-revealjs.html#as-a-rule-dont-install-packages-into-your-global-environment",
    "title": "Managing your computational environment",
    "section": "🚨 As a rule, don’t install packages into your global environment!",
    "text": "🚨 As a rule, don’t install packages into your global environment!\n\n… even if the documentation says pip install x"
  },
  {
    "objectID": "managing-environment-revealjs.html#best-practice-use-virtual-environments",
    "href": "managing-environment-revealjs.html#best-practice-use-virtual-environments",
    "title": "Managing your computational environment",
    "section": "Best practice: use virtual environments",
    "text": "Best practice: use virtual environments\n\nVirtual environments are lightweight installations of packages in a particular location (like in your working directory or project project) that build on top of your system Python installation.\nVirtual environments isolate the set of dependencies for a project or package from each other, and from your system configuration.\nThese are intended to be easy to set up, disposable, and replaceable."
  },
  {
    "objectID": "managing-environment-revealjs.html#creating-and-activating-a-virtual-environment",
    "href": "managing-environment-revealjs.html#creating-and-activating-a-virtual-environment",
    "title": "Managing your computational environment",
    "section": "Creating and activating a virtual environment",
    "text": "Creating and activating a virtual environment\npython3 -m venv .venv\n\nThis creates a new directory .venv with:\n\n\n.venv/bin with link to Python, pip, and activation scripts; and\n.venv/lib/site-packages where packages will be installed."
  },
  {
    "objectID": "managing-environment-revealjs.html#installing-packages",
    "href": "managing-environment-revealjs.html#installing-packages",
    "title": "Managing your computational environment",
    "section": "Installing packages",
    "text": "Installing packages\npip install &lt;package&gt;"
  },
  {
    "objectID": "managing-environment-revealjs.html#pip-family",
    "href": "managing-environment-revealjs.html#pip-family",
    "title": "Managing your computational environment",
    "section": "pip family",
    "text": "pip family\nTools that all work similarly to venv:\n\nvenv: comes with Python, simple\nvirtualenv: installable package with same interface as venv, but faster and with more options\nuv: written in Rust and extremely fast"
  },
  {
    "objectID": "managing-environment-revealjs.html#conda-family",
    "href": "managing-environment-revealjs.html#conda-family",
    "title": "Managing your computational environment",
    "section": "Conda family",
    "text": "Conda family\n\nConda is an open-source tool for managing virtual environments across your system, originally designed for Python package management but now supports a wide range of software (e.g., compiled C++ dependencies).\n\n\nVirtual environments created with Conda are not location-dependent like venv, but the same approach applies: do not install in the base/default environment.\n\n\nConda is recommended if you expect to need non-Python dependencies."
  },
  {
    "objectID": "managing-environment-revealjs.html#section",
    "href": "managing-environment-revealjs.html#section",
    "title": "Managing your computational environment",
    "section": "",
    "text": "conda config --set auto_activate_base false  # turn off the default environment\nconda env create -n some_name  # or use paths with `-p`\nconda activate some_name\nconda deactivate"
  },
  {
    "objectID": "managing-environment-revealjs.html#conda-based-package-managers",
    "href": "managing-environment-revealjs.html#conda-based-package-managers",
    "title": "Managing your computational environment",
    "section": "Conda-based package managers",
    "text": "Conda-based package managers\nSome alternatives to conda exist and offer some advantages, including speed:\n\nMiniconda: minimal Conda installation without all the packages that come with the full Anaconda distribution\nPixi: fast, Rust-based package manager and workflow tool Some other\nMicromamba: tiny version of Mamba, statically linked C++ binary"
  },
  {
    "objectID": "managing-environment.html",
    "href": "managing-environment.html",
    "title": "Managing your computational environment",
    "section": "",
    "text": "These include general numerical and scientific tools like NumPy, SciPy, and Pandas, and domain-specific software like Cantera. You should rely on mature packages that provide useful features when possible—don’t reinvent the wheel!\n\n\nBut, each software package has its own set of dependencies, and might require a specific version of some other package (like when a newer version breaks or changes some functionality).\n\n\n\n\n\nThis is particularly important for research analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\nVirtual environments are lightweight installations of packages in a particular location (like in your working directory or project project) that build on top of your system Python installation.\nVirtual environments isolate the set of dependencies for a project or package from each other, and from your system configuration.\nThese are intended to be easy to set up, disposable, and replaceable.\n\n\n\nOn a Mac or Linux machine, I recommend using the built-in venv module to create a virtual environment for your work, then install inside that using the pip installer.\nOn Windows, your best bet is probably the Anaconda Distribution. Anaconda comes with hundreds of scientific packages already, and also lets you set up system-wide virtual environments.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#power-of-python-for-research-comes-from-rich-ecosystem-of-third-party-packages",
    "href": "managing-environment.html#power-of-python-for-research-comes-from-rich-ecosystem-of-third-party-packages",
    "title": "Managing your computational environment",
    "section": "",
    "text": "These include general numerical and scientific tools like NumPy, SciPy, and Pandas, and domain-specific software like Cantera. You should rely on mature packages that provide useful features when possible—don’t reinvent the wheel!\n\n\nBut, each software package has its own set of dependencies, and might require a specific version of some other package (like when a newer version breaks or changes some functionality).",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#your-results-may-depend-on-the-specific-versions-and-combination-of-packages-you-have-installed.",
    "href": "managing-environment.html#your-results-may-depend-on-the-specific-versions-and-combination-of-packages-you-have-installed.",
    "title": "Managing your computational environment",
    "section": "",
    "text": "This is particularly important for research analysis.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#best-practice-use-virtual-environments",
    "href": "managing-environment.html#best-practice-use-virtual-environments",
    "title": "Managing your computational environment",
    "section": "",
    "text": "Virtual environments are lightweight installations of packages in a particular location (like in your working directory or project project) that build on top of your system Python installation.\nVirtual environments isolate the set of dependencies for a project or package from each other, and from your system configuration.\nThese are intended to be easy to set up, disposable, and replaceable.\n\n\n\nOn a Mac or Linux machine, I recommend using the built-in venv module to create a virtual environment for your work, then install inside that using the pip installer.\nOn Windows, your best bet is probably the Anaconda Distribution. Anaconda comes with hundreds of scientific packages already, and also lets you set up system-wide virtual environments.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#creating-and-activating-a-virtual-environment",
    "href": "managing-environment.html#creating-and-activating-a-virtual-environment",
    "title": "Managing your computational environment",
    "section": "Creating and activating a virtual environment",
    "text": "Creating and activating a virtual environment\npython3 -m venv .venv\n\nThis creates a new directory .venv with:\n\n\n.venv/bin with link to Python, pip, and activation scripts; and\n.venv/lib/site-packages where packages will be installed.\n\n\n\nTo activate the environment, source the activation script:\n\nsource .venv/bin/activate\n\n\n\n\n\n\nTip\n\n\n\nTry this yourself. .venv/bin will be added to your PATH, and your shell will usually indicate you are “in” a virtual environment.\n\n\n\nTo leave the virtual environment, run the deactivate function:\n\ndeactivate\n\n\n\n\n\n\nNote\n\n\n\nClosing/terminating your shell will automatically deactivate the virtual environment, and you’ll need to manually activate whenever you start a new session.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#installing-packages",
    "href": "managing-environment.html#installing-packages",
    "title": "Managing your computational environment",
    "section": "Installing packages",
    "text": "Installing packages\npip install &lt;package&gt;",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#pip-family",
    "href": "managing-environment.html#pip-family",
    "title": "Managing your computational environment",
    "section": "pip family",
    "text": "pip family\nTools that all work similarly to venv:\n\nvenv: comes with Python, simple\nvirtualenv: installable package with same interface as venv, but faster and with more options\nuv: written in Rust and extremely fast\n\n\nIn addition, there are project management tools that both handle environments, packaging, production, etc.:\n\nHatch\nPoetry\nPipenv\n\n\nThese work a bit differently, but can be quite powerful particularly for locking specific versions of dependencies. Consider returning to these when we are thinking about packaging and distribution.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#conda-family",
    "href": "managing-environment.html#conda-family",
    "title": "Managing your computational environment",
    "section": "Conda family",
    "text": "Conda family\n\nConda is an open-source tool for managing virtual environments across your system, originally designed for Python package management but now supports a wide range of software (e.g., compiled C++ dependencies).\n\n\nVirtual environments created with Conda are not location-dependent like venv, but the same approach applies: do not install in the base/default environment.\n\n\nConda is recommended if you expect to need non-Python dependencies.",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#section",
    "href": "managing-environment.html#section",
    "title": "Managing your computational environment",
    "section": "",
    "text": "conda config --set auto_activate_base false  # turn off the default environment\nconda env create -n some_name  # or use paths with `-p`\nconda activate some_name\nconda deactivate",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "managing-environment.html#conda-based-package-managers",
    "href": "managing-environment.html#conda-based-package-managers",
    "title": "Managing your computational environment",
    "section": "Conda-based package managers",
    "text": "Conda-based package managers\nSome alternatives to conda exist and offer some advantages, including speed:\n\nMiniconda: minimal Conda installation without all the packages that come with the full Anaconda distribution\nPixi: fast, Rust-based package manager and workflow tool Some other\nMicromamba: tiny version of Mamba, statically linked C++ binary",
    "crumbs": [
      "Managing your computational environment"
    ]
  },
  {
    "objectID": "remote-version-control.html",
    "href": "remote-version-control.html",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Backup up code (and any files) online\nCloning and forking remote repositories\nManaging files in a collaboration\nMerging simultaneous changes\nDownloading open source code\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\nNice landing page—renders README automatically\nGrabs information about LICENSE, programming language\nSupports issue tracking and wiki\nNetwork graphs, time history of commits\nUser downloads\nVarying permissions (read, write, etc.)\nNice web interface to browse, view, and edit code\n\n\n\n\n\nCreate space for repo on GitHub account\nPoint to that remote repo from local copy\nPush repository to the remote location\nContinue working!\n\n\n\n\n\nCreate a new repo on account\nCopy (clone) empty repo to local computer\nProsper!",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#topics-for-today",
    "href": "remote-version-control.html#topics-for-today",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Backup up code (and any files) online\nCloning and forking remote repositories\nManaging files in a collaboration\nMerging simultaneous changes\nDownloading open source code",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#why-github",
    "href": "remote-version-control.html#why-github",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Nice landing page—renders README automatically\nGrabs information about LICENSE, programming language\nSupports issue tracking and wiki\nNetwork graphs, time history of commits\nUser downloads\nVarying permissions (read, write, etc.)\nNice web interface to browse, view, and edit code",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#workflow-with-account",
    "href": "remote-version-control.html#workflow-with-account",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Create space for repo on GitHub account\nPoint to that remote repo from local copy\nPush repository to the remote location\nContinue working!",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#alternatively-if-starting-new-project-you-can",
    "href": "remote-version-control.html#alternatively-if-starting-new-project-you-can",
    "title": "Remote version control with Git",
    "section": "",
    "text": "Create a new repo on account\nCopy (clone) empty repo to local computer\nProsper!",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#lets-work-through-creating-a-repo",
    "href": "remote-version-control.html#lets-work-through-creating-a-repo",
    "title": "Remote version control with Git",
    "section": "Let’s work through creating a repo",
    "text": "Let’s work through creating a repo",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#create-and-push-new-repo",
    "href": "remote-version-control.html#create-and-push-new-repo",
    "title": "Remote version control with Git",
    "section": "Create and push new repo",
    "text": "Create and push new repo",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#cloning-a-repo",
    "href": "remote-version-control.html#cloning-a-repo",
    "title": "Remote version control with Git",
    "section": "Cloning a repo",
    "text": "Cloning a repo",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#terminology",
    "href": "remote-version-control.html#terminology",
    "title": "Remote version control with Git",
    "section": "Terminology",
    "text": "Terminology\n\nClone: make local copy of any repository (Git)\n\n\nFork: Remote repository connected to/aware of the “upstream” repo it was cloned from (GitHub)",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#forking-a-repo",
    "href": "remote-version-control.html#forking-a-repo",
    "title": "Remote version control with Git",
    "section": "Forking a repo",
    "text": "Forking a repo",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#collaborative-work-using-github",
    "href": "remote-version-control.html#collaborative-work-using-github",
    "title": "Remote version control with Git",
    "section": "Collaborative work using GitHub",
    "text": "Collaborative work using GitHub\n\n\n\n\nHow does Fran keep local repo up to date with the original?",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#do-this-yourself",
    "href": "remote-version-control.html#do-this-yourself",
    "title": "Remote version control with Git",
    "section": "Do this yourself:",
    "text": "Do this yourself:\n\nFork it: click “Fork” at SoftwareDevEngResearch/analysis_code\nClone your fork: $ git clone https://github.com/[you]/analysis_code.git\nCreate alias upstream for the remote repo:\n\n$ git remote add upstream \\\nhttps://github.com/SoftwareDevEngResearch/analysis_code.git\n$ git remote -v",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#fetching-and-merging-remote-content",
    "href": "remote-version-control.html#fetching-and-merging-remote-content",
    "title": "Remote version control with Git",
    "section": "Fetching and merging remote content",
    "text": "Fetching and merging remote content\n\nIn your cloned local repo, fetch the upstream repo history\nThen merge the upstream main branch into your main branch\nLook at the changes!\n\n$ git fetch upstream\n$ git merge upstream/main",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#update-your-fork",
    "href": "remote-version-control.html#update-your-fork",
    "title": "Remote version control with Git",
    "section": "Update your fork",
    "text": "Update your fork\n\nAfter merging upstream history, push your work to origin main:\n$ git push\n\n\nWhat if you (or someone else) made a change in your fork?\n\n$ git pull\n\npull = fetch & merge for origin main",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#alternatively-use-github",
    "href": "remote-version-control.html#alternatively-use-github",
    "title": "Remote version control with Git",
    "section": "Alternatively, use GitHub",
    "text": "Alternatively, use GitHub",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#what-about-conflicts",
    "href": "remote-version-control.html#what-about-conflicts",
    "title": "Remote version control with Git",
    "section": "What about conflicts?",
    "text": "What about conflicts?\n\nWhen fetching, merging, and/or pulling remote changes, you may encounter conflicts.\n\n\nTo solve: just follow the directions!\n\n\n(In-class example)",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#best-practices-for-collaborating",
    "href": "remote-version-control.html#best-practices-for-collaborating",
    "title": "Remote version control with Git",
    "section": "Best practices for collaborating",
    "text": "Best practices for collaborating\n\nFor solo projects:\n\n\npush and pull (to/from origin\nuse branches, merge into main\n\n\nFor multi-person projects:\n\n\nFork into a personal repo\nUse git fetch/merge to keep updated with upstream\nPush (and pull) to/from origin (your fork on GitHub)\nContribute changes via pull requests on GitHub",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#pull-requests",
    "href": "remote-version-control.html#pull-requests",
    "title": "Remote version control with Git",
    "section": "Pull Requests",
    "text": "Pull Requests\n\nModern, GitHub-based version of emailing someone a patch\n\n\nPull Requests (or PRs) consist of sequences of patches, based on a history of Git commits",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#example-pull-request-on-github",
    "href": "remote-version-control.html#example-pull-request-on-github",
    "title": "Remote version control with Git",
    "section": "Example Pull Request on GitHub",
    "text": "Example Pull Request on GitHub",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#how-to-contribute-a-change-to-someone-elses-repository",
    "href": "remote-version-control.html#how-to-contribute-a-change-to-someone-elses-repository",
    "title": "Remote version control with Git",
    "section": "How to contribute a change to someone else’s repository",
    "text": "How to contribute a change to someone else’s repository\n\nFork the repo\nClone your fork locally\nCreate a new branch for your changes/fix\nCommit and push your changes\nSubmit a Pull Request via GitHub\n\n$ git clone ...\n$ git checkout -b newfix\n\n$ git commit -am \"fixes problem in upstream project\"\n$ git push origin newfix",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#create-pull-request",
    "href": "remote-version-control.html#create-pull-request",
    "title": "Remote version control with Git",
    "section": "Create Pull Request",
    "text": "Create Pull Request",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#submitting-pull-requests",
    "href": "remote-version-control.html#submitting-pull-requests",
    "title": "Remote version control with Git",
    "section": "Submitting Pull Requests",
    "text": "Submitting Pull Requests\n\nTry to submit shorter Pull Requests when possible, as they are easier to review and merge\n\n\nIf the project uses testing, make sure to add a new test (or modify an existing one) to reflect your change. More on tests later!",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#important-notice",
    "href": "remote-version-control.html#important-notice",
    "title": "Remote version control with Git",
    "section": "Important notice",
    "text": "Important notice\n\nI AM NOT A LAWYER!\n\n\nAKA: IANAL",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#copyright",
    "href": "remote-version-control.html#copyright",
    "title": "Remote version control with Git",
    "section": "Copyright",
    "text": "Copyright\n\nFacts and ideas are not copyrightable.\n\n\nExpressions of ideas are copyrightable.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#copyright-examples",
    "href": "remote-version-control.html#copyright-examples",
    "title": "Remote version control with Git",
    "section": "Copyright Examples",
    "text": "Copyright Examples\n\nGame rules are not copyrightable (chess, Go, football, Dungeons & Dragons)\n\n\nExpressions of game rules are copyrightable.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#basic-copyright",
    "href": "remote-version-control.html#basic-copyright",
    "title": "Remote version control with Git",
    "section": "Basic Copyright",
    "text": "Basic Copyright\n\n“Right of First Publication”: copyright automatically goes to the first creator of any creative work\n\n\n(Even if not explicitly specified)\n\n\nConsequence: if you post software to GitHub without an explicit license, then you own the copyright—even if openly and publicly visible.\n\n\nBy default, no one else is legally allowed to use or modify your work.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#software-licenses",
    "href": "remote-version-control.html#software-licenses",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\nAll software codes you make publicly available should be accompanied by a software license describing the terms by which others may use and/or modify your code.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#public-domain",
    "href": "remote-version-control.html#public-domain",
    "title": "Remote version control with Git",
    "section": "Public Domain",
    "text": "Public Domain\n\nAlternatively, you can put work into the public domain: “This work has been placed in the public domain.”\n\n\nFree for anyone and everyone to use and modify.\n\n\nLiterature examples: Sherlock Holmes, Frankenstein\n\n\n(There are some tricky issues internationally, however.)",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#software-licenses-1",
    "href": "remote-version-control.html#software-licenses-1",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\n\nKinds of software licenses: proprietary, and free/open source (FOSS, FLOSS, OSS).\n\n\nPick an existing license. Do not create your own.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#software-licenses-2",
    "href": "remote-version-control.html#software-licenses-2",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\n\nFOSS categories: permissive, and “copyleft”\n\n\nPermissive licenses: BSD 3-clause, MIT; allow further distribution under any license\n\n\nCopyleft licenses: GPL; require modifications to be shared under the same license (“viral”)",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#httpschoosealicense.com",
    "href": "remote-version-control.html#httpschoosealicense.com",
    "title": "Remote version control with Git",
    "section": "https://choosealicense.com",
    "text": "https://choosealicense.com",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#open-source-initiative-licenses",
    "href": "remote-version-control.html#open-source-initiative-licenses",
    "title": "Remote version control with Git",
    "section": "Open Source Initiative licenses",
    "text": "Open Source Initiative licenses",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#which-license-to-use",
    "href": "remote-version-control.html#which-license-to-use",
    "title": "Remote version control with Git",
    "section": "Which license to use?",
    "text": "Which license to use?\n\nWhen in doubt, use a permissive license like the BSD 3-clause or MIT licenses.",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#copyrighting-other-creative-works-creative-commons",
    "href": "remote-version-control.html#copyrighting-other-creative-works-creative-commons",
    "title": "Remote version control with Git",
    "section": "Copyrighting other creative works: Creative Commons",
    "text": "Copyrighting other creative works: Creative Commons\n\nBY: Attribution\nSA: ShareAlike\nND: NoDerivatives\nNC: NonCommercial\n\n\nLicenses: CC BY, CC BY-SA, CC BY-NC, CC BY-NC-NC\n\n\nChoose a license",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control.html#beyond-copyright-licenses",
    "href": "remote-version-control.html#beyond-copyright-licenses",
    "title": "Remote version control with Git",
    "section": "Beyond copyright & licenses",
    "text": "Beyond copyright & licenses\n\nPatents: cover ideas and concepts; modern issues with “patent trolls”\n\n\nTrademarks: symbols that represent a business or organization\n\n\nExport control: government may forbid the transfer of source code (and data, ideas) to another country or foreign national without permission\n\n\nHIPAA compliance: software that deals with human patients must be anonymized",
    "crumbs": [
      "Remote version control with Git"
    ]
  },
  {
    "objectID": "remote-version-control-revealjs.html#topics-for-today",
    "href": "remote-version-control-revealjs.html#topics-for-today",
    "title": "Remote version control with Git",
    "section": "Topics for today:",
    "text": "Topics for today:\n\nBackup up code (and any files) online\nCloning and forking remote repositories\nManaging files in a collaboration\nMerging simultaneous changes\nDownloading open source code"
  },
  {
    "objectID": "remote-version-control-revealjs.html#repositories",
    "href": "remote-version-control-revealjs.html#repositories",
    "title": "Remote version control with Git",
    "section": "Repositories",
    "text": "Repositories\n   \n\nWe’ll focus on GitHub."
  },
  {
    "objectID": "remote-version-control-revealjs.html#why-github",
    "href": "remote-version-control-revealjs.html#why-github",
    "title": "Remote version control with Git",
    "section": "Why GitHub?",
    "text": "Why GitHub?\n\nNice landing page—renders README automatically\nGrabs information about LICENSE, programming language\nSupports issue tracking and wiki\nNetwork graphs, time history of commits\nUser downloads\nVarying permissions (read, write, etc.)\nNice web interface to browse, view, and edit code"
  },
  {
    "objectID": "remote-version-control-revealjs.html#workflow-with-account",
    "href": "remote-version-control-revealjs.html#workflow-with-account",
    "title": "Remote version control with Git",
    "section": "Workflow (with account)",
    "text": "Workflow (with account)\n\nCreate space for repo on GitHub account\nPoint to that remote repo from local copy\nPush repository to the remote location\nContinue working!"
  },
  {
    "objectID": "remote-version-control-revealjs.html#alternatively-if-starting-new-project-you-can",
    "href": "remote-version-control-revealjs.html#alternatively-if-starting-new-project-you-can",
    "title": "Remote version control with Git",
    "section": "Alternatively, if starting new project, you can:",
    "text": "Alternatively, if starting new project, you can:\n\nCreate a new repo on account\nCopy (clone) empty repo to local computer\nProsper!"
  },
  {
    "objectID": "remote-version-control-revealjs.html#lets-work-through-creating-a-repo",
    "href": "remote-version-control-revealjs.html#lets-work-through-creating-a-repo",
    "title": "Remote version control with Git",
    "section": "Let’s work through creating a repo",
    "text": "Let’s work through creating a repo"
  },
  {
    "objectID": "remote-version-control-revealjs.html#create-and-push-new-repo",
    "href": "remote-version-control-revealjs.html#create-and-push-new-repo",
    "title": "Remote version control with Git",
    "section": "Create and push new repo",
    "text": "Create and push new repo"
  },
  {
    "objectID": "remote-version-control-revealjs.html#cloning-a-repo",
    "href": "remote-version-control-revealjs.html#cloning-a-repo",
    "title": "Remote version control with Git",
    "section": "Cloning a repo",
    "text": "Cloning a repo"
  },
  {
    "objectID": "remote-version-control-revealjs.html#terminology",
    "href": "remote-version-control-revealjs.html#terminology",
    "title": "Remote version control with Git",
    "section": "Terminology",
    "text": "Terminology\n\nClone: make local copy of any repository (Git)\n\n\nFork: Remote repository connected to/aware of the “upstream” repo it was cloned from (GitHub)"
  },
  {
    "objectID": "remote-version-control-revealjs.html#forking-a-repo",
    "href": "remote-version-control-revealjs.html#forking-a-repo",
    "title": "Remote version control with Git",
    "section": "Forking a repo",
    "text": "Forking a repo"
  },
  {
    "objectID": "remote-version-control-revealjs.html#collaborative-work-using-github",
    "href": "remote-version-control-revealjs.html#collaborative-work-using-github",
    "title": "Remote version control with Git",
    "section": "Collaborative work using GitHub",
    "text": "Collaborative work using GitHub"
  },
  {
    "objectID": "remote-version-control-revealjs.html#do-this-yourself",
    "href": "remote-version-control-revealjs.html#do-this-yourself",
    "title": "Remote version control with Git",
    "section": "Do this yourself:",
    "text": "Do this yourself:\n\nFork it: click “Fork” at SoftwareDevEngResearch/analysis_code\nClone your fork: $ git clone https://github.com/[you]/analysis_code.git\nCreate alias upstream for the remote repo:\n\n$ git remote add upstream \\\nhttps://github.com/SoftwareDevEngResearch/analysis_code.git\n$ git remote -v"
  },
  {
    "objectID": "remote-version-control-revealjs.html#fetching-and-merging-remote-content",
    "href": "remote-version-control-revealjs.html#fetching-and-merging-remote-content",
    "title": "Remote version control with Git",
    "section": "Fetching and merging remote content",
    "text": "Fetching and merging remote content\n\nIn your cloned local repo, fetch the upstream repo history\nThen merge the upstream main branch into your main branch\nLook at the changes!\n\n$ git fetch upstream\n$ git merge upstream/main"
  },
  {
    "objectID": "remote-version-control-revealjs.html#update-your-fork",
    "href": "remote-version-control-revealjs.html#update-your-fork",
    "title": "Remote version control with Git",
    "section": "Update your fork",
    "text": "Update your fork\n\nAfter merging upstream history, push your work to origin main:\n$ git push\n\n\nWhat if you (or someone else) made a change in your fork?\n\n$ git pull\n\npull = fetch & merge for origin main"
  },
  {
    "objectID": "remote-version-control-revealjs.html#alternatively-use-github",
    "href": "remote-version-control-revealjs.html#alternatively-use-github",
    "title": "Remote version control with Git",
    "section": "Alternatively, use GitHub",
    "text": "Alternatively, use GitHub"
  },
  {
    "objectID": "remote-version-control-revealjs.html#what-about-conflicts",
    "href": "remote-version-control-revealjs.html#what-about-conflicts",
    "title": "Remote version control with Git",
    "section": "What about conflicts?",
    "text": "What about conflicts?\n\nWhen fetching, merging, and/or pulling remote changes, you may encounter conflicts.\n\n\nTo solve: just follow the directions!\n\n\n(In-class example)"
  },
  {
    "objectID": "remote-version-control-revealjs.html#best-practices-for-collaborating",
    "href": "remote-version-control-revealjs.html#best-practices-for-collaborating",
    "title": "Remote version control with Git",
    "section": "Best practices for collaborating",
    "text": "Best practices for collaborating\n\nFor solo projects:\n\n\npush and pull (to/from origin\nuse branches, merge into main\n\n\nFor multi-person projects:\n\n\nFork into a personal repo\nUse git fetch/merge to keep updated with upstream\nPush (and pull) to/from origin (your fork on GitHub)\nContribute changes via pull requests on GitHub"
  },
  {
    "objectID": "remote-version-control-revealjs.html#pull-requests",
    "href": "remote-version-control-revealjs.html#pull-requests",
    "title": "Remote version control with Git",
    "section": "Pull Requests",
    "text": "Pull Requests\n\nModern, GitHub-based version of emailing someone a patch\n\n\nPull Requests (or PRs) consist of sequences of patches, based on a history of Git commits"
  },
  {
    "objectID": "remote-version-control-revealjs.html#example-pull-request-on-github",
    "href": "remote-version-control-revealjs.html#example-pull-request-on-github",
    "title": "Remote version control with Git",
    "section": "Example Pull Request on GitHub",
    "text": "Example Pull Request on GitHub"
  },
  {
    "objectID": "remote-version-control-revealjs.html#how-to-contribute-a-change-to-someone-elses-repository",
    "href": "remote-version-control-revealjs.html#how-to-contribute-a-change-to-someone-elses-repository",
    "title": "Remote version control with Git",
    "section": "How to contribute a change to someone else’s repository",
    "text": "How to contribute a change to someone else’s repository\n\nFork the repo\nClone your fork locally\nCreate a new branch for your changes/fix\nCommit and push your changes\nSubmit a Pull Request via GitHub\n\n$ git clone ...\n$ git checkout -b newfix\n\n$ git commit -am \"fixes problem in upstream project\"\n$ git push origin newfix"
  },
  {
    "objectID": "remote-version-control-revealjs.html#create-pull-request",
    "href": "remote-version-control-revealjs.html#create-pull-request",
    "title": "Remote version control with Git",
    "section": "Create Pull Request",
    "text": "Create Pull Request"
  },
  {
    "objectID": "remote-version-control-revealjs.html#submitting-pull-requests",
    "href": "remote-version-control-revealjs.html#submitting-pull-requests",
    "title": "Remote version control with Git",
    "section": "Submitting Pull Requests",
    "text": "Submitting Pull Requests\n\nTry to submit shorter Pull Requests when possible, as they are easier to review and merge\n\n\nIf the project uses testing, make sure to add a new test (or modify an existing one) to reflect your change. More on tests later!"
  },
  {
    "objectID": "remote-version-control-revealjs.html#important-notice",
    "href": "remote-version-control-revealjs.html#important-notice",
    "title": "Remote version control with Git",
    "section": "Important notice",
    "text": "Important notice\nI AM NOT A LAWYER!\nAKA: IANAL"
  },
  {
    "objectID": "remote-version-control-revealjs.html#copyright",
    "href": "remote-version-control-revealjs.html#copyright",
    "title": "Remote version control with Git",
    "section": "Copyright",
    "text": "Copyright\n\nFacts and ideas are not copyrightable.\n\n\nExpressions of ideas are copyrightable."
  },
  {
    "objectID": "remote-version-control-revealjs.html#copyright-examples",
    "href": "remote-version-control-revealjs.html#copyright-examples",
    "title": "Remote version control with Git",
    "section": "Copyright Examples",
    "text": "Copyright Examples\n\nGame rules are not copyrightable (chess, Go, football, Dungeons & Dragons)\n\n\nExpressions of game rules are copyrightable."
  },
  {
    "objectID": "remote-version-control-revealjs.html#basic-copyright",
    "href": "remote-version-control-revealjs.html#basic-copyright",
    "title": "Remote version control with Git",
    "section": "Basic Copyright",
    "text": "Basic Copyright\n\n“Right of First Publication”: copyright automatically goes to the first creator of any creative work\n\n\n(Even if not explicitly specified)\n\n\nConsequence: if you post software to GitHub without an explicit license, then you own the copyright—even if openly and publicly visible.\n\n\nBy default, no one else is legally allowed to use or modify your work."
  },
  {
    "objectID": "remote-version-control-revealjs.html#software-licenses",
    "href": "remote-version-control-revealjs.html#software-licenses",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\nAll software codes you make publicly available should be accompanied by a software license describing the terms by which others may use and/or modify your code."
  },
  {
    "objectID": "remote-version-control-revealjs.html#public-domain",
    "href": "remote-version-control-revealjs.html#public-domain",
    "title": "Remote version control with Git",
    "section": "Public Domain",
    "text": "Public Domain\n\nAlternatively, you can put work into the public domain: “This work has been placed in the public domain.”\n\n\nFree for anyone and everyone to use and modify.\n\n\nLiterature examples: Sherlock Holmes, Frankenstein\n\n\n(There are some tricky issues internationally, however.)"
  },
  {
    "objectID": "remote-version-control-revealjs.html#software-licenses-1",
    "href": "remote-version-control-revealjs.html#software-licenses-1",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\n\nKinds of software licenses: proprietary, and free/open source (FOSS, FLOSS, OSS).\n\n\nPick an existing license. Do not create your own."
  },
  {
    "objectID": "remote-version-control-revealjs.html#software-licenses-2",
    "href": "remote-version-control-revealjs.html#software-licenses-2",
    "title": "Remote version control with Git",
    "section": "Software Licenses",
    "text": "Software Licenses\n\nFOSS categories: permissive, and “copyleft”\n\n\nPermissive licenses: BSD 3-clause, MIT; allow further distribution under any license\n\n\nCopyleft licenses: GPL; require modifications to be shared under the same license (“viral”)"
  },
  {
    "objectID": "remote-version-control-revealjs.html#httpschoosealicense.com",
    "href": "remote-version-control-revealjs.html#httpschoosealicense.com",
    "title": "Remote version control with Git",
    "section": "https://choosealicense.com",
    "text": "https://choosealicense.com"
  },
  {
    "objectID": "remote-version-control-revealjs.html#open-source-initiative-licenses",
    "href": "remote-version-control-revealjs.html#open-source-initiative-licenses",
    "title": "Remote version control with Git",
    "section": "Open Source Initiative licenses",
    "text": "Open Source Initiative licenses"
  },
  {
    "objectID": "remote-version-control-revealjs.html#which-license-to-use",
    "href": "remote-version-control-revealjs.html#which-license-to-use",
    "title": "Remote version control with Git",
    "section": "Which license to use?",
    "text": "Which license to use?\n\nWhen in doubt, use a permissive license like the BSD 3-clause or MIT licenses."
  },
  {
    "objectID": "remote-version-control-revealjs.html#copyrighting-other-creative-works-creative-commons",
    "href": "remote-version-control-revealjs.html#copyrighting-other-creative-works-creative-commons",
    "title": "Remote version control with Git",
    "section": "Copyrighting other creative works: Creative Commons",
    "text": "Copyrighting other creative works: Creative Commons\n\nBY: Attribution\nSA: ShareAlike\nND: NoDerivatives\nNC: NonCommercial\n\n\nLicenses: CC BY, CC BY-SA, CC BY-NC, CC BY-NC-NC\n\n\nChoose a license"
  },
  {
    "objectID": "remote-version-control-revealjs.html#beyond-copyright-licenses",
    "href": "remote-version-control-revealjs.html#beyond-copyright-licenses",
    "title": "Remote version control with Git",
    "section": "Beyond copyright & licenses",
    "text": "Beyond copyright & licenses\n\nPatents: cover ideas and concepts; modern issues with “patent trolls”\n\n\nTrademarks: symbols that represent a business or organization\n\n\nExport control: government may forbid the transfer of source code (and data, ideas) to another country or foreign national without permission\n\n\nHIPAA compliance: software that deals with human patients must be anonymized"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "classes-objects.html",
    "href": "classes-objects.html",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Classes: organize data, methods, and functions\n\n\nObjects: manifestations of classes\n\n\nWe can use object-oriented programming to cleanly organize behaviors and data in our code.\n\n\n\n\n\nIt provides a framework for classifying distinct concepts into comprehensible sizes. These smaller conceptual units facilitate cleaner, more scalable modeling.\n\n\n\n\n\nClasses and objects combine functions with data to make both easier to manage.\nA class defines the behaviors of a new kind of thing, while an object is a particular thing.\nClasses have constructors that describe how to create a new object of a particular kind.\nAn interface describes what an object can do; an implementation defines how.\nOne class can inherit from another and override just those things that it wants to change.\n\n\n\n\n\nEncapsulation is the property of owning data\nInheritance establishes a relationship hierarchy between models\nPolymorphism allows for models to customize their own behavior even when they are based on other models",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#brief-intro-to-object-oriented-programming",
    "href": "classes-objects.html#brief-intro-to-object-oriented-programming",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Classes: organize data, methods, and functions\n\n\nObjects: manifestations of classes\n\n\nWe can use object-oriented programming to cleanly organize behaviors and data in our code.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-orientation",
    "href": "classes-objects.html#object-orientation",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "It provides a framework for classifying distinct concepts into comprehensible sizes. These smaller conceptual units facilitate cleaner, more scalable modeling.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-orientation-1",
    "href": "classes-objects.html#object-orientation-1",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Classes and objects combine functions with data to make both easier to manage.\nA class defines the behaviors of a new kind of thing, while an object is a particular thing.\nClasses have constructors that describe how to create a new object of a particular kind.\nAn interface describes what an object can do; an implementation defines how.\nOne class can inherit from another and override just those things that it wants to change.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-orientation-2",
    "href": "classes-objects.html#object-orientation-2",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Encapsulation is the property of owning data\nInheritance establishes a relationship hierarchy between models\nPolymorphism allows for models to customize their own behavior even when they are based on other models",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-example-integers",
    "href": "classes-objects.html#object-example-integers",
    "title": "Brief intro to object-oriented programming",
    "section": "Object example: integers",
    "text": "Object example: integers\na = 1\nhelp(a) # gives info about the object\ndir(a) # gives list of data and behaviors associated with class",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#object-example-integers-1",
    "href": "classes-objects.html#object-example-integers-1",
    "title": "Brief intro to object-oriented programming",
    "section": "Object example: integers",
    "text": "Object example: integers\na = 1\nhelp(a) # gives info about the object\ndir(a) # gives list of data and behaviors associated with class\n\n\nWhat do double underscores around __abs__ mean?\n\nFrom PEP8: “magic objects or attributes that live in user-controlled namespaces. E.g., __init__, __import__, or __file__. Never invent such names; only use them as documented.”\n\nGenerally don’t call dunder methods directly; instead, use built-in functions.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#what-about-functions",
    "href": "classes-objects.html#what-about-functions",
    "title": "Brief intro to object-oriented programming",
    "section": "… what about functions?",
    "text": "… what about functions?\nimport math\ndir(math.sin)\n\nEven functions are objects!",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#what-about-classes",
    "href": "classes-objects.html#what-about-classes",
    "title": "Brief intro to object-oriented programming",
    "section": "What about classes?",
    "text": "What about classes?\n\nClasses define logical collections of attributes and methods describing a kind of object, and how to create objects of that kind.\n\n\nChoose classes to encapsulate internal data and functions for different types of objects.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#example-particle-physics",
    "href": "classes-objects.html#example-particle-physics",
    "title": "Brief intro to object-oriented programming",
    "section": "Example: particle physics",
    "text": "Example: particle physics\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\"\"\"\n    # class body definition here\n\nWhat else do classes include?\n\n\nClass variables\nConstructors\nMethods",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#elementary-particles",
    "href": "classes-objects.html#elementary-particles",
    "title": "Brief intro to object-oriented programming",
    "section": "Elementary particles",
    "text": "Elementary particles",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#class-variables",
    "href": "classes-objects.html#class-variables",
    "title": "Brief intro to object-oriented programming",
    "section": "Class variables",
    "text": "Class variables\n\nData universally applicable to all objects of the class\n\n# contents of particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\"\"\"\n    # class body definition here\n    roar = \"I am a particle!\"\n# import particle module\nimport particle as p\nprint(p.Particle.roar)\n# create instance of Particle\nimport particle as p\nhiggs = p.Particle()\nprint(higgs.roar)\n\n\nClass variables can get a bit confusing; if you modify the variable associated with an object, it becomes an instance variable. For example:\nclass Particle(object):\n    spin = 0\n\n    def init(self, charge, mass):\n        self.charge = charge\n        self.mass = mass\nHere, spin is a class variable while charge and mass are instance variables. Creating two particles:\np1 = Particle(1, 1)\np2 = Particle(-1, 1)\n\nprint(p1.spin)\nprint(p2.spin)\nwe’ll get\n0\n0\nIf we change spin for p1 only, it modifies the value just for that instance:\np1.spin = 0.5\nprint(p1.spin)\nprint(p2.spin)\ngives 0.5 0 However, in general spin is still a class variable, and we can modify it for the whole class: Particle.spin = -0.5 print(p1.spin) print(p2.spin) which gives 0.5 -0.5 So for p1, spin has become an instance variable, but p2 is still pointing to the class variable.\n\n:::\n:::\n\n## Instance variables\n\n::: {.fragment}\nData with different values for each instance of the class\n:::\n\n::: {.fragment}\nExample: particle position.\n:::\n\n``` {.python .fragment}\nimport particle as p\n# create empty list to hold observed particle data\nobs = []\n# append first particle\nobs.append(p.Particle())\n# assign its position\nobs[0].r = {'x': 100.0, 'y': 38.0, 'z': -42.0}\n# append second particle and assign its position\nobs.append(p.Particle())\nobs[1].r = {'x': 0.01, 'y': 99.0, 'z': 32.0}\n# print positions of each particle\nprint(obs[0].r)\nprint(obs[1].r)\n\nInstance variables\n\nUsing instance variables, we can store all data associated with a particle observation (position, mass, charge, spin, etc.) without much more complexity\n\n\n(Hopefully the value of this reduced complexity is obvious.)\n\n\nHow to accomplish in class definition? Constructor: __init()__ function.\n\n\n\nConstructors\n\nConstructor: __init__() function, executed upon instantiation of object.\n\n\nConstructor not required; every class inherits default constructor from object.\n\n\nTip: good to initialize all instance variables in constructor, to ensure they are initialized when you need them.\n\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self):\n        \"\"\"Initializes the particle with default values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = 0\n        self.m = 0\n        self.r = {'x': 0, 'y': 0, 'z': 0}\n\nself argument required since function is method; binds to specific instance of the class.\n\n\n\nMore efficient: specify data values upon initialization:\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n\nMethods\n\nMethods: functions tied to a class definition; may operate on data contained by object.\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n\n\nExample: proton\n\nfrom scipy import constants\nimport particle as p\n\nm_p = constants.m_p\nr_p = {'x': 1, 'y': 1, 'z': 53}\na_p = p.Particle(1, m_p, r_p)\na_p.hear_me()\n\n\nMethods can alter instance variables. Example: Quark class with instance variable flavor.\n\ndef flip(self):\n    \"\"\"Flip quark's flavor to complementary flavor.\n    \"\"\"\n    if self.flavor == \"up\":\n        self.flavor = \"down\"\n    elif self.flavor == \"down\":\n        self.flavor = \"up\"\n    elif self.flavor == \"top\":\n        self.flavor = \"bottom\"\n    elif self.flavor == \"bottom\":\n        self.flavor = \"top\"\n    elif self.flavor == \"strange\":\n        self.flavor = \"charm\"\n    elif self.flavor == \"charm\":\n        self.flavor = \"strange\"\n    else:\n        raise AttributeError(\"The quark cannot be flipped, because the flavor is invalid.\")\n\nfrom quark import Quark\n\nt = Quark()\nt.flavor = \"top\"\nt.flip()\nprint(t.flavor)\n\n\nParticle capture relationship between uncertainty in momentum and uncertainty in position:\n\\[ \\Delta x \\Delta p_x \\geq \\frac{\\hbar}{2} \\]\n\nfrom scipy import constants\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...\n\n    def delta_x_min(self, delta_p_x):\n        \"\"\"Returns minimum possible value of Δx\n        \"\"\"\n        hbar = constants.hbar\n        delx_min = hbar / (2.0 * delta_p_x)\n        return delx_min\n\n\nStatic methods\n\nExample: Quark class can include function that lists all possible values of flavor; possible values are static irrespective of specific instance.\n\ndef possible_flavors():\n    return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]\n\nUse @staticmethod decorator to define a method not bound to object.\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n\n    # ... other parts of class definition ...\n\n    @staticmethod\n    def possible_flavors():\n        return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]\n\n\nDuck typing\n\n“When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”\n\n\nMeaning: Python does not explicitly check for object types like other languages. It only checks for behavior when a method is called or attribute accessed.\n\n\nIf different object types both “quack like a duck”, then it treats them like a duck. An object does not need to be of a certain type in order for its methods to be invoked; must merely possess those method.\n\n\n\n\n\nExample: all particles with a valid c attribute for charge can be used identically.\n\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        tot += p.c\n    return tot\np = Proton()\ne1 = Electron()\ne2 = Electrion()\nparticles = [p, e1, e2]\ntotal_charge(particles)\n# overrule duck typing when inconvenient\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        if isinstance(p, Particle):\n            tot += p.c\n    return tot\n\n\nPolymorphism\n\nWhen class inherits attributes of a parent class. General rule: what works for parent class should work for subclass (plus specialized behavior).\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\n# composite.py\nclass CompositeParticle(Particle):\n    \"\"\"Particles like protons and neutrons, composed of elementary particles\n    but don't share attributes.\n    \"\"\"\n\n    def __init__(self, parts):\n        self.constituents = parts\n\n\nSubclasses\n\nElementaryParticle and CompositeParticle are Particle objects, and thus have (inherit) all of the functions and data of the original class.\n\n\nWe can override that data and those behaviors if desired.\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\nfrom elementary import ElementaryParticle\np = ElementaryParticle(1.5)\np.s\np.hear_me()\n\n\nSuperclasses\n\nAny class, including a subclass, can be a superclass or parent class; the subclass inherits from its parent.\n\n\nElementaryParticle can also be a superclass:\n\nclass Quark(ElementaryParticle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, color, charge, color_charge, spin, flavor):\n        self.color = color\n        self.charge = charge\n        self.color_charge = color_charge\n        self.spin = spin\n        self.flavor = flavor\n\n\nInheritance of class contructors\n\nBest/most Pythonic way of handling inherited + additional constructor arguments: be explicit.\n\n\n\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, charge, mass, position, spin):\n        super().__init__(charge, mass, position)\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\n\n\nMetaprogramming\n\nWhen definition of a class or function is specified (in part or in full) by code outside the definition itself.\n\n\nExample: add an is_particle class attribute to Particle class:\n\ndef add_is_particle(cls):\n    cls.is_particle = True\n    return cls\n\n@add_is_particle\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...\n\n\nPractical example\nTake a look at my code PyTeCK, which uses classes to hide lots of details of performing simulations: https://github.com/kyleniemeyer/PyTeCK",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#instance-variables",
    "href": "classes-objects.html#instance-variables",
    "title": "Brief intro to object-oriented programming",
    "section": "Instance variables",
    "text": "Instance variables\n\nUsing instance variables, we can store all data associated with a particle observation (position, mass, charge, spin, etc.) without much more complexity\n\n\n(Hopefully the value of this reduced complexity is obvious.)\n\n\nHow to accomplish in class definition? Constructor: __init()__ function.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#constructors",
    "href": "classes-objects.html#constructors",
    "title": "Brief intro to object-oriented programming",
    "section": "Constructors",
    "text": "Constructors\n\nConstructor: __init__() function, executed upon instantiation of object.\n\n\nConstructor not required; every class inherits default constructor from object.\n\n\nTip: good to initialize all instance variables in constructor, to ensure they are initialized when you need them.\n\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self):\n        \"\"\"Initializes the particle with default values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = 0\n        self.m = 0\n        self.r = {'x': 0, 'y': 0, 'z': 0}\n\nself argument required since function is method; binds to specific instance of the class.\n\n\n\nMore efficient: specify data values upon initialization:\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#methods",
    "href": "classes-objects.html#methods",
    "title": "Brief intro to object-oriented programming",
    "section": "Methods",
    "text": "Methods\n\nMethods: functions tied to a class definition; may operate on data contained by object.\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n\n\nExample: proton\n\nfrom scipy import constants\nimport particle as p\n\nm_p = constants.m_p\nr_p = {'x': 1, 'y': 1, 'z': 53}\na_p = p.Particle(1, m_p, r_p)\na_p.hear_me()\n\n\nMethods can alter instance variables. Example: Quark class with instance variable flavor.\n\ndef flip(self):\n    \"\"\"Flip quark's flavor to complementary flavor.\n    \"\"\"\n    if self.flavor == \"up\":\n        self.flavor = \"down\"\n    elif self.flavor == \"down\":\n        self.flavor = \"up\"\n    elif self.flavor == \"top\":\n        self.flavor = \"bottom\"\n    elif self.flavor == \"bottom\":\n        self.flavor = \"top\"\n    elif self.flavor == \"strange\":\n        self.flavor = \"charm\"\n    elif self.flavor == \"charm\":\n        self.flavor = \"strange\"\n    else:\n        raise AttributeError(\"The quark cannot be flipped, because the flavor is invalid.\")\n\nfrom quark import Quark\n\nt = Quark()\nt.flavor = \"top\"\nt.flip()\nprint(t.flavor)\n\n\nParticle capture relationship between uncertainty in momentum and uncertainty in position:\n\\[ \\Delta x \\Delta p_x \\geq \\frac{\\hbar}{2} \\]\n\nfrom scipy import constants\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...\n\n    def delta_x_min(self, delta_p_x):\n        \"\"\"Returns minimum possible value of Δx\n        \"\"\"\n        hbar = constants.hbar\n        delx_min = hbar / (2.0 * delta_p_x)\n        return delx_min",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#static-methods",
    "href": "classes-objects.html#static-methods",
    "title": "Brief intro to object-oriented programming",
    "section": "Static methods",
    "text": "Static methods\n\nExample: Quark class can include function that lists all possible values of flavor; possible values are static irrespective of specific instance.\n\ndef possible_flavors():\n    return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]\n\nUse @staticmethod decorator to define a method not bound to object.\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n\n    # ... other parts of class definition ...\n\n    @staticmethod\n    def possible_flavors():\n        return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#duck-typing",
    "href": "classes-objects.html#duck-typing",
    "title": "Brief intro to object-oriented programming",
    "section": "Duck typing",
    "text": "Duck typing\n\n“When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”\n\n\nMeaning: Python does not explicitly check for object types like other languages. It only checks for behavior when a method is called or attribute accessed.\n\n\nIf different object types both “quack like a duck”, then it treats them like a duck. An object does not need to be of a certain type in order for its methods to be invoked; must merely possess those method.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#section",
    "href": "classes-objects.html#section",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Example: all particles with a valid c attribute for charge can be used identically.\n\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        tot += p.c\n    return tot\np = Proton()\ne1 = Electron()\ne2 = Electrion()\nparticles = [p, e1, e2]\ntotal_charge(particles)\n# overrule duck typing when inconvenient\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        if isinstance(p, Particle):\n            tot += p.c\n    return tot",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#polymorphism",
    "href": "classes-objects.html#polymorphism",
    "title": "Brief intro to object-oriented programming",
    "section": "Polymorphism",
    "text": "Polymorphism\n\nWhen class inherits attributes of a parent class. General rule: what works for parent class should work for subclass (plus specialized behavior).\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\n# composite.py\nclass CompositeParticle(Particle):\n    \"\"\"Particles like protons and neutrons, composed of elementary particles\n    but don't share attributes.\n    \"\"\"\n\n    def __init__(self, parts):\n        self.constituents = parts",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#subclasses",
    "href": "classes-objects.html#subclasses",
    "title": "Brief intro to object-oriented programming",
    "section": "Subclasses",
    "text": "Subclasses\n\nElementaryParticle and CompositeParticle are Particle objects, and thus have (inherit) all of the functions and data of the original class.\n\n\nWe can override that data and those behaviors if desired.\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\nfrom elementary import ElementaryParticle\np = ElementaryParticle(1.5)\np.s\np.hear_me()",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#superclasses",
    "href": "classes-objects.html#superclasses",
    "title": "Brief intro to object-oriented programming",
    "section": "Superclasses",
    "text": "Superclasses\n\nAny class, including a subclass, can be a superclass or parent class; the subclass inherits from its parent.\n\n\nElementaryParticle can also be a superclass:\n\nclass Quark(ElementaryParticle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, color, charge, color_charge, spin, flavor):\n        self.color = color\n        self.charge = charge\n        self.color_charge = color_charge\n        self.spin = spin\n        self.flavor = flavor",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#inheritance-of-class-contructors",
    "href": "classes-objects.html#inheritance-of-class-contructors",
    "title": "Brief intro to object-oriented programming",
    "section": "Inheritance of class contructors",
    "text": "Inheritance of class contructors\n\nBest/most Pythonic way of handling inherited + additional constructor arguments: be explicit.",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#section-1",
    "href": "classes-objects.html#section-1",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, charge, mass, position, spin):\n        super().__init__(charge, mass, position)\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#metaprogramming",
    "href": "classes-objects.html#metaprogramming",
    "title": "Brief intro to object-oriented programming",
    "section": "Metaprogramming",
    "text": "Metaprogramming\n\nWhen definition of a class or function is specified (in part or in full) by code outside the definition itself.\n\n\nExample: add an is_particle class attribute to Particle class:\n\ndef add_is_particle(cls):\n    cls.is_particle = True\n    return cls\n\n@add_is_particle\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects.html#practical-example",
    "href": "classes-objects.html#practical-example",
    "title": "Brief intro to object-oriented programming",
    "section": "Practical example",
    "text": "Practical example\nTake a look at my code PyTeCK, which uses classes to hide lots of details of performing simulations: https://github.com/kyleniemeyer/PyTeCK",
    "crumbs": [
      "Brief intro to object-oriented programming"
    ]
  },
  {
    "objectID": "classes-objects-revealjs.html#brief-intro-to-object-oriented-programming",
    "href": "classes-objects-revealjs.html#brief-intro-to-object-oriented-programming",
    "title": "Brief intro to object-oriented programming",
    "section": "Brief intro to object-oriented programming",
    "text": "Brief intro to object-oriented programming\n\nClasses: organize data, methods, and functions\n\n\nObjects: manifestations of classes\n\n\nWe can use object-oriented programming to cleanly organize behaviors and data in our code."
  },
  {
    "objectID": "classes-objects-revealjs.html#object-orientation",
    "href": "classes-objects-revealjs.html#object-orientation",
    "title": "Brief intro to object-oriented programming",
    "section": "Object Orientation",
    "text": "Object Orientation\n\nIt provides a framework for classifying distinct concepts into comprehensible sizes. These smaller conceptual units facilitate cleaner, more scalable modeling."
  },
  {
    "objectID": "classes-objects-revealjs.html#object-orientation-1",
    "href": "classes-objects-revealjs.html#object-orientation-1",
    "title": "Brief intro to object-oriented programming",
    "section": "Object Orientation",
    "text": "Object Orientation\n\nClasses and objects combine functions with data to make both easier to manage.\nA class defines the behaviors of a new kind of thing, while an object is a particular thing.\nClasses have constructors that describe how to create a new object of a particular kind.\nAn interface describes what an object can do; an implementation defines how.\nOne class can inherit from another and override just those things that it wants to change."
  },
  {
    "objectID": "classes-objects-revealjs.html#object-orientation-2",
    "href": "classes-objects-revealjs.html#object-orientation-2",
    "title": "Brief intro to object-oriented programming",
    "section": "Object Orientation",
    "text": "Object Orientation\n\nEncapsulation is the property of owning data\nInheritance establishes a relationship hierarchy between models\nPolymorphism allows for models to customize their own behavior even when they are based on other models"
  },
  {
    "objectID": "classes-objects-revealjs.html#object-example-integers",
    "href": "classes-objects-revealjs.html#object-example-integers",
    "title": "Brief intro to object-oriented programming",
    "section": "Object example: integers",
    "text": "Object example: integers\na = 1\nhelp(a) # gives info about the object\ndir(a) # gives list of data and behaviors associated with class"
  },
  {
    "objectID": "classes-objects-revealjs.html#object-example-integers-1",
    "href": "classes-objects-revealjs.html#object-example-integers-1",
    "title": "Brief intro to object-oriented programming",
    "section": "Object example: integers",
    "text": "Object example: integers\na = 1\nhelp(a) # gives info about the object\ndir(a) # gives list of data and behaviors associated with class\n\n\n\n\nWhat do double underscores around __abs__ mean?\n\nFrom PEP8: “magic objects or attributes that live in user-controlled namespaces. E.g., __init__, __import__, or __file__. Never invent such names; only use them as documented.”\n\nGenerally don’t call dunder methods directly; instead, use built-in functions."
  },
  {
    "objectID": "classes-objects-revealjs.html#what-about-functions",
    "href": "classes-objects-revealjs.html#what-about-functions",
    "title": "Brief intro to object-oriented programming",
    "section": "… what about functions?",
    "text": "… what about functions?\nimport math\ndir(math.sin)\n\nEven functions are objects!"
  },
  {
    "objectID": "classes-objects-revealjs.html#what-about-classes",
    "href": "classes-objects-revealjs.html#what-about-classes",
    "title": "Brief intro to object-oriented programming",
    "section": "What about classes?",
    "text": "What about classes?\n\nClasses define logical collections of attributes and methods describing a kind of object, and how to create objects of that kind.\n\n\nChoose classes to encapsulate internal data and functions for different types of objects."
  },
  {
    "objectID": "classes-objects-revealjs.html#example-particle-physics",
    "href": "classes-objects-revealjs.html#example-particle-physics",
    "title": "Brief intro to object-oriented programming",
    "section": "Example: particle physics",
    "text": "Example: particle physics\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\"\"\"\n    # class body definition here\n\nWhat else do classes include?\n\n\nClass variables\nConstructors\nMethods"
  },
  {
    "objectID": "classes-objects-revealjs.html#elementary-particles",
    "href": "classes-objects-revealjs.html#elementary-particles",
    "title": "Brief intro to object-oriented programming",
    "section": "Elementary particles",
    "text": "Elementary particles"
  },
  {
    "objectID": "classes-objects-revealjs.html#class-variables",
    "href": "classes-objects-revealjs.html#class-variables",
    "title": "Brief intro to object-oriented programming",
    "section": "Class variables",
    "text": "Class variables\n\nData universally applicable to all objects of the class\n\n# contents of particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\"\"\"\n    # class body definition here\n    roar = \"I am a particle!\"\n# import particle module\nimport particle as p\nprint(p.Particle.roar)\n# create instance of Particle\nimport particle as p\nhiggs = p.Particle()\nprint(higgs.roar)\n\n\nClass variables can get a bit confusing; if you modify the variable associated with an object, it becomes an instance variable. For example:\nclass Particle(object):\n    spin = 0\n\n    def init(self, charge, mass):\n        self.charge = charge\n        self.mass = mass\nHere, spin is a class variable while charge and mass are instance variables. Creating two particles:\np1 = Particle(1, 1)\np2 = Particle(-1, 1)\n\nprint(p1.spin)\nprint(p2.spin)\nwe’ll get\n0\n0\nIf we change spin for p1 only, it modifies the value just for that instance:\np1.spin = 0.5\nprint(p1.spin)\nprint(p2.spin)\ngives 0.5 0 However, in general spin is still a class variable, and we can modify it for the whole class: Particle.spin = -0.5 print(p1.spin) print(p2.spin) which gives 0.5 -0.5 So for p1, spin has become an instance variable, but p2 is still pointing to the class variable.\n\n:::\n:::\n\n## Instance variables\n\n::: {.fragment}\nData with different values for each instance of the class\n:::\n\n::: {.fragment}\nExample: particle position.\n:::\n\n``` {.python .fragment}\nimport particle as p\n# create empty list to hold observed particle data\nobs = []\n# append first particle\nobs.append(p.Particle())\n# assign its position\nobs[0].r = {'x': 100.0, 'y': 38.0, 'z': -42.0}\n# append second particle and assign its position\nobs.append(p.Particle())\nobs[1].r = {'x': 0.01, 'y': 99.0, 'z': 32.0}\n# print positions of each particle\nprint(obs[0].r)\nprint(obs[1].r)\n\nInstance variables\n\nUsing instance variables, we can store all data associated with a particle observation (position, mass, charge, spin, etc.) without much more complexity\n\n\n(Hopefully the value of this reduced complexity is obvious.)\n\n\nHow to accomplish in class definition? Constructor: __init()__ function.\n\n\n\nConstructors\n\nConstructor: __init__() function, executed upon instantiation of object.\n\n\nConstructor not required; every class inherits default constructor from object.\n\n\nTip: good to initialize all instance variables in constructor, to ensure they are initialized when you need them.\n\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self):\n        \"\"\"Initializes the particle with default values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = 0\n        self.m = 0\n        self.r = {'x': 0, 'y': 0, 'z': 0}\n\nself argument required since function is method; binds to specific instance of the class.\n\n\n\nMore efficient: specify data values upon initialization:\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n\nMethods\n\nMethods: functions tied to a class definition; may operate on data contained by object.\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n\n\nExample: proton\n\nfrom scipy import constants\nimport particle as p\n\nm_p = constants.m_p\nr_p = {'x': 1, 'y': 1, 'z': 53}\na_p = p.Particle(1, m_p, r_p)\na_p.hear_me()\n\n\nMethods can alter instance variables. Example: Quark class with instance variable flavor.\n\ndef flip(self):\n    \"\"\"Flip quark's flavor to complementary flavor.\n    \"\"\"\n    if self.flavor == \"up\":\n        self.flavor = \"down\"\n    elif self.flavor == \"down\":\n        self.flavor = \"up\"\n    elif self.flavor == \"top\":\n        self.flavor = \"bottom\"\n    elif self.flavor == \"bottom\":\n        self.flavor = \"top\"\n    elif self.flavor == \"strange\":\n        self.flavor = \"charm\"\n    elif self.flavor == \"charm\":\n        self.flavor = \"strange\"\n    else:\n        raise AttributeError(\"The quark cannot be flipped, because the flavor is invalid.\")\n\nfrom quark import Quark\n\nt = Quark()\nt.flavor = \"top\"\nt.flip()\nprint(t.flavor)\n\n\nParticle capture relationship between uncertainty in momentum and uncertainty in position:\n\\[ \\Delta x \\Delta p_x \\geq \\frac{\\hbar}{2} \\]\n\nfrom scipy import constants\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...\n\n    def delta_x_min(self, delta_p_x):\n        \"\"\"Returns minimum possible value of Δx\n        \"\"\"\n        hbar = constants.hbar\n        delx_min = hbar / (2.0 * delta_p_x)\n        return delx_min\n\n\nStatic methods\n\nExample: Quark class can include function that lists all possible values of flavor; possible values are static irrespective of specific instance.\n\ndef possible_flavors():\n    return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]\n\nUse @staticmethod decorator to define a method not bound to object.\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n\n    # ... other parts of class definition ...\n\n    @staticmethod\n    def possible_flavors():\n        return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]\n\n\nDuck typing\n\n“When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”\n\n\nMeaning: Python does not explicitly check for object types like other languages. It only checks for behavior when a method is called or attribute accessed.\n\n\nIf different object types both “quack like a duck”, then it treats them like a duck. An object does not need to be of a certain type in order for its methods to be invoked; must merely possess those method.\n\n\n\n\n\nExample: all particles with a valid c attribute for charge can be used identically.\n\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        tot += p.c\n    return tot\np = Proton()\ne1 = Electron()\ne2 = Electrion()\nparticles = [p, e1, e2]\ntotal_charge(particles)\n# overrule duck typing when inconvenient\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        if isinstance(p, Particle):\n            tot += p.c\n    return tot\n\n\nPolymorphism\n\nWhen class inherits attributes of a parent class. General rule: what works for parent class should work for subclass (plus specialized behavior).\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\n# composite.py\nclass CompositeParticle(Particle):\n    \"\"\"Particles like protons and neutrons, composed of elementary particles\n    but don't share attributes.\n    \"\"\"\n\n    def __init__(self, parts):\n        self.constituents = parts\n\n\nSubclasses\n\nElementaryParticle and CompositeParticle are Particle objects, and thus have (inherit) all of the functions and data of the original class.\n\n\nWe can override that data and those behaviors if desired.\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\nfrom elementary import ElementaryParticle\np = ElementaryParticle(1.5)\np.s\np.hear_me()\n\n\nSuperclasses\n\nAny class, including a subclass, can be a superclass or parent class; the subclass inherits from its parent.\n\n\nElementaryParticle can also be a superclass:\n\nclass Quark(ElementaryParticle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, color, charge, color_charge, spin, flavor):\n        self.color = color\n        self.charge = charge\n        self.color_charge = color_charge\n        self.spin = spin\n        self.flavor = flavor\n\n\nInheritance of class contructors\n\nBest/most Pythonic way of handling inherited + additional constructor arguments: be explicit.\n\n\n\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, charge, mass, position, spin):\n        super().__init__(charge, mass, position)\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\n\n\nMetaprogramming\n\nWhen definition of a class or function is specified (in part or in full) by code outside the definition itself.\n\n\nExample: add an is_particle class attribute to Particle class:\n\ndef add_is_particle(cls):\n    cls.is_particle = True\n    return cls\n\n@add_is_particle\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...\n\n\nPractical example\nTake a look at my code PyTeCK, which uses classes to hide lots of details of performing simulations: https://github.com/kyleniemeyer/PyTeCK"
  },
  {
    "objectID": "classes-objects-revealjs.html#instance-variables",
    "href": "classes-objects-revealjs.html#instance-variables",
    "title": "Brief intro to object-oriented programming",
    "section": "Instance variables",
    "text": "Instance variables\n\nUsing instance variables, we can store all data associated with a particle observation (position, mass, charge, spin, etc.) without much more complexity\n\n\n(Hopefully the value of this reduced complexity is obvious.)\n\n\nHow to accomplish in class definition? Constructor: __init()__ function."
  },
  {
    "objectID": "classes-objects-revealjs.html#constructors",
    "href": "classes-objects-revealjs.html#constructors",
    "title": "Brief intro to object-oriented programming",
    "section": "Constructors",
    "text": "Constructors\n\nConstructor: __init__() function, executed upon instantiation of object.\n\n\nConstructor not required; every class inherits default constructor from object.\n\n\nTip: good to initialize all instance variables in constructor, to ensure they are initialized when you need them.\n\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self):\n        \"\"\"Initializes the particle with default values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = 0\n        self.m = 0\n        self.r = {'x': 0, 'y': 0, 'z': 0}\n\nself argument required since function is method; binds to specific instance of the class.\n\n\n\nMore efficient: specify data values upon initialization:\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position"
  },
  {
    "objectID": "classes-objects-revealjs.html#methods",
    "href": "classes-objects-revealjs.html#methods",
    "title": "Brief intro to object-oriented programming",
    "section": "Methods",
    "text": "Methods\n\nMethods: functions tied to a class definition; may operate on data contained by object.\n\n# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    Attributes\n    ----------\n    c : charge in units of [e]\n    m : mass in units of [kg]\n    r : position in units of [meters]\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n\n\nExample: proton\n\nfrom scipy import constants\nimport particle as p\n\nm_p = constants.m_p\nr_p = {'x': 1, 'y': 1, 'z': 53}\na_p = p.Particle(1, m_p, r_p)\na_p.hear_me()\n\n\nMethods can alter instance variables. Example: Quark class with instance variable flavor.\n\ndef flip(self):\n    \"\"\"Flip quark's flavor to complementary flavor.\n    \"\"\"\n    if self.flavor == \"up\":\n        self.flavor = \"down\"\n    elif self.flavor == \"down\":\n        self.flavor = \"up\"\n    elif self.flavor == \"top\":\n        self.flavor = \"bottom\"\n    elif self.flavor == \"bottom\":\n        self.flavor = \"top\"\n    elif self.flavor == \"strange\":\n        self.flavor = \"charm\"\n    elif self.flavor == \"charm\":\n        self.flavor = \"strange\"\n    else:\n        raise AttributeError(\"The quark cannot be flipped, because the flavor is invalid.\")\n\nfrom quark import Quark\n\nt = Quark()\nt.flavor = \"top\"\nt.flip()\nprint(t.flavor)\n\n\nParticle capture relationship between uncertainty in momentum and uncertainty in position:\n\\[ \\Delta x \\Delta p_x \\geq \\frac{\\hbar}{2} \\]\n\nfrom scipy import constants\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ...\n\n    def delta_x_min(self, delta_p_x):\n        \"\"\"Returns minimum possible value of Δx\n        \"\"\"\n        hbar = constants.hbar\n        delx_min = hbar / (2.0 * delta_p_x)\n        return delx_min"
  },
  {
    "objectID": "classes-objects-revealjs.html#static-methods",
    "href": "classes-objects-revealjs.html#static-methods",
    "title": "Brief intro to object-oriented programming",
    "section": "Static methods",
    "text": "Static methods\n\nExample: Quark class can include function that lists all possible values of flavor; possible values are static irrespective of specific instance.\n\ndef possible_flavors():\n    return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]\n\nUse @staticmethod decorator to define a method not bound to object.\n\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n\n    # ... other parts of class definition ...\n\n    @staticmethod\n    def possible_flavors():\n        return [\"up\", \"down\", \"top\", \"bottom\", \"strange\", \"charm\"]"
  },
  {
    "objectID": "classes-objects-revealjs.html#duck-typing",
    "href": "classes-objects-revealjs.html#duck-typing",
    "title": "Brief intro to object-oriented programming",
    "section": "Duck typing",
    "text": "Duck typing\n\n“When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”\n\n\nMeaning: Python does not explicitly check for object types like other languages. It only checks for behavior when a method is called or attribute accessed.\n\n\nIf different object types both “quack like a duck”, then it treats them like a duck. An object does not need to be of a certain type in order for its methods to be invoked; must merely possess those method."
  },
  {
    "objectID": "classes-objects-revealjs.html#section",
    "href": "classes-objects-revealjs.html#section",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "Example: all particles with a valid c attribute for charge can be used identically.\n\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        tot += p.c\n    return tot\np = Proton()\ne1 = Electron()\ne2 = Electrion()\nparticles = [p, e1, e2]\ntotal_charge(particles)\n# overrule duck typing when inconvenient\ndef total_charge(particles):\n    \"\"\"Calculate the total charge of a collection of particles.\n    \"\"\"\n    tot = 0\n    for p in particles:\n        if isinstance(p, Particle):\n            tot += p.c\n    return tot"
  },
  {
    "objectID": "classes-objects-revealjs.html#polymorphism",
    "href": "classes-objects-revealjs.html#polymorphism",
    "title": "Brief intro to object-oriented programming",
    "section": "Polymorphism",
    "text": "Polymorphism\n\nWhen class inherits attributes of a parent class. General rule: what works for parent class should work for subclass (plus specialized behavior).\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\n# composite.py\nclass CompositeParticle(Particle):\n    \"\"\"Particles like protons and neutrons, composed of elementary particles\n    but don't share attributes.\n    \"\"\"\n\n    def __init__(self, parts):\n        self.constituents = parts"
  },
  {
    "objectID": "classes-objects-revealjs.html#subclasses",
    "href": "classes-objects-revealjs.html#subclasses",
    "title": "Brief intro to object-oriented programming",
    "section": "Subclasses",
    "text": "Subclasses\n\nElementaryParticle and CompositeParticle are Particle objects, and thus have (inherit) all of the functions and data of the original class.\n\n\nWe can override that data and those behaviors if desired.\n\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, spin):\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion\nfrom elementary import ElementaryParticle\np = ElementaryParticle(1.5)\np.s\np.hear_me()"
  },
  {
    "objectID": "classes-objects-revealjs.html#superclasses",
    "href": "classes-objects-revealjs.html#superclasses",
    "title": "Brief intro to object-oriented programming",
    "section": "Superclasses",
    "text": "Superclasses\n\nAny class, including a subclass, can be a superclass or parent class; the subclass inherits from its parent.\n\n\nElementaryParticle can also be a superclass:\n\nclass Quark(ElementaryParticle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n\n    def __init__(self, color, charge, color_charge, spin, flavor):\n        self.color = color\n        self.charge = charge\n        self.color_charge = color_charge\n        self.spin = spin\n        self.flavor = flavor"
  },
  {
    "objectID": "classes-objects-revealjs.html#inheritance-of-class-contructors",
    "href": "classes-objects-revealjs.html#inheritance-of-class-contructors",
    "title": "Brief intro to object-oriented programming",
    "section": "Inheritance of class contructors",
    "text": "Inheritance of class contructors\n\nBest/most Pythonic way of handling inherited + additional constructor arguments: be explicit."
  },
  {
    "objectID": "classes-objects-revealjs.html#section-1",
    "href": "classes-objects-revealjs.html#section-1",
    "title": "Brief intro to object-oriented programming",
    "section": "",
    "text": "# particle.py\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n    \"\"\"\n    roar = \"I am a particle!\"\n\n    def __init__(self, charge, mass, position):\n        \"\"\"Initializes the particle with supplied values for charge c, mass m, and position r.\n        \"\"\"\n        self.c = charge\n        self.m = mass\n        self.r = position\n\n    def hear_me(self):\n        \"\"\"Print information about particle.\n        \"\"\"\n        myroar = self.roar + (\n            \" My charge is:     \" + str(self.c) +\n            \" My mass is:       \" + str(self.m) +\n            \" My x position is: \" + str(self.r['x']) +\n            \" My y position is: \" + str(self.r['y']) +\n            \" My z position is: \" + str(self.r['z']))\n        print(myroar)\n# elementary.py\nclass ElementaryParticle(Particle):\n    \"\"\"No distinct constituent particles, have spin.\n    \"\"\"\n    roar = \"I am an Elementary Particle!\"\n\n    def __init__(self, charge, mass, position, spin):\n        super().__init__(charge, mass, position)\n        self.s = spin\n        self.is_fermion = bool(spin % 1.0)\n        self.is_boson = not self.is_fermion"
  },
  {
    "objectID": "classes-objects-revealjs.html#metaprogramming",
    "href": "classes-objects-revealjs.html#metaprogramming",
    "title": "Brief intro to object-oriented programming",
    "section": "Metaprogramming",
    "text": "Metaprogramming\n\nWhen definition of a class or function is specified (in part or in full) by code outside the definition itself.\n\n\nExample: add an is_particle class attribute to Particle class:\n\ndef add_is_particle(cls):\n    cls.is_particle = True\n    return cls\n\n@add_is_particle\nclass Particle(object):\n    \"\"\"A particle is a constituent unit of the universe.\n\n    # ... other parts of class definition ..."
  },
  {
    "objectID": "classes-objects-revealjs.html#practical-example",
    "href": "classes-objects-revealjs.html#practical-example",
    "title": "Brief intro to object-oriented programming",
    "section": "Practical example",
    "text": "Practical example\nTake a look at my code PyTeCK, which uses classes to hide lots of details of performing simulations: https://github.com/kyleniemeyer/PyTeCK"
  }
]